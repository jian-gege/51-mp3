C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ZNFAT
OBJECT MODULE PLACED IN .\Objects\znFAT.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE znFAT.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\znFAT.lst) TABS(2) OBJECT(.\Objects\znFAT.obj)

line level    source

   1          #include "znfat.h"
   2          #include "template.h"
   3          #include "gb2uni.h"
   4          #include "deviceio.h"
   5          
   6          
   7          /*----------------------------------------------------------------------------/
   8          /-----------------------------------------------------------------------------/
   9          Function Table(¹¦ÄÜº¯Êı±í): 
  10           znFAT_Device_Init  : Storage device initialize (´æ´¢Éè±¸³õÊ¼»¯)
  11           znFAT_Init         : File system initialize (ÎÄ¼şÏµÍ³³õÊ¼»¯)
  12           znFAT_Select_Device: Select storage device (Ñ¡Ôñ´æ´¢Éè±¸)
  13           znFAT_Open_File    : Open a file (´ò¿ªÎÄ¼ş)
  14           znFAT_ReadData     : Read data in a file (¶ÁÈ¡ÎÄ¼şÊı¾İ)
  15           znFAT_ReadDataX    : Read data and redirect it (¶ÁÈ¡ÎÄ¼şÊı¾İ+Êı¾İÖØ¶¨Ïò)
  16           znFAT_Enter_Dir    : Enter a dir (½øÈëÄ¿Â¼)
  17           znFAT_WriteData    : Write data to a file,append it to the end (ÏòÎÄ¼şĞ´ÈëÊı¾İ)
  18           znFAT_Modify_Data  : Modify data in a file (ĞŞ¸ÄÎÄ¼şÊı¾İ)
  19           znFAT_Dump_Data    : Dump data of a file (¶ªÆú£¬½Ø¶ÏÎÄ¼şÊı¾İ)
  20           znFAT_Create_File  : Create file (´´½¨ÎÄ¼ş)
  21           znFAT_Create_Dir   : Create dir (´´½¨Ä¿Â¼)
  22           znFAT_Delete_File  : Delete file (É¾³ıÎÄ¼ş)
  23           znFAT_Delete_Dir   : Delete dir (É¾³ıÄ¿Â¼)
  24           znFAT_Make_FS      : Make a FAT32 FS on a storage device,even Format (¸ñÊ½»¯)
  25           znFAT_Close_File   : Close file (¹Ø±ÕÎÄ¼ş)
  26           znFAT_Flush_FS     : Flush FS,Update FS information from RAM to Disk (Ë¢ĞÂFS)
  27          /----------------------------------------------------------------------------/
  28          Configuration for znFAT's Functions,is necessary before the usage of them.
  29                  (¶ÔznFATÖĞ¹¦ÄÜº¯ÊıµÄÅäÖÃ£¬ÔÚÊ¹ÓÃËüÃÇÖ®Ç°ÇëÎñ±Ø¶ÔÆä½øĞĞÅäÖÃ)
  30          
  31          When you use a function in znFAT(but znFAT_Device_Init znFAT_Init and znFAT_\
  32          Select_Device,because them must be used in every project),you must firstly
  33          OPEN the MACROS as "#define ZNFAT_XXXX",So the relevant code of the function
  34          is added to the compiling.Or,You will get a warning like "XXXX is undefined .."
  35          For example:You now wanna use znFAT_Open_File,You must open the header file
  36          config.h,OPEN the MACRO ZNFAT_OPEN_FILE,even delete the "//" before it.
  37          
  38          (µ±ÄãÒªÊ¹ÓÃznFATÖĞÒ»¸öº¯ÊıÊ±(znFAT_Device_Init znFAT_Init and znFAT_Select_\
  39          DeviceÕâÈı¸öº¯Êı³ıÍâ£¬ÒòÎªËüÃÇÔÚÈÎºÎÊ±ºò¶¼ÊÇ±ØÈ»±»Ê¹ÓÃµÄ)£¬±ØĞëÊ×ÏÈ°ÑÏàÓ¦µÄºê
  40          ´ò¿ª£¬±ÈÈç"#define ZNFAT_XXXX"£¬ÕâÑùÓëÕâ¸öº¯ÊıÏà¹ØµÄ´úÂë²Å»á±»¼ÓÈëµ½±àÒëÖ®ÖĞ£¬
  41          ·ñÔò£¬Äã¿ÉÄÜ»áµÃµ½ÏñÕâÑùµÄ¾¯¸æ"XXXX is undefined.."¡£¾ÙÀıËµÃ÷£ºÒªÊ¹ÓÃznFAT_\
  42          Open_Fileº¯Êı£¬Äã±ØĞëÒª´ò¿ªconfig.h£¬´ò¿ªÀïÃæ¶ÔÓ¦µÄºêZNFAT_OPEN_FILE£¬¼´È¥µô
  43          Ç°ÃæµÄ"//"¡£)
  44          
  45          Option for znFAT (znFATÖĞµÄ¹¤×÷·½Ê½Ñ¡Ôñ)
  46          
  47           USE_LFN : Use the Long File Name (Ê¹ÓÃ³¤ÎÄ¼şÃû)
  48            MAX_LFN_LEN : Define the max Long File Name length (¶¨Òå³¤ÎÄ¼şÃû×î´ó³¤¶È)
  49            USE_OEM_CHAR: Use OEM charactor in LFN,as CHN (ÔÚ³¤ÎÄ¼şÃûÖĞÊ¹ÓÃOEM×Ö·û£¬ÈçÖĞÎÄ)
  50           USE_MULTISEC_R : Use hardware continuous Sector Read (Ê¹ÓÃÓ²¼ş¼¶Á¬ĞøÉÈÇø¶Á)
  51           USE_MULTISEC_W : Use hardware continuous Sector Write (Ê¹ÓÃÓ²¼ş¼¶Á¬ĞøÉÈÇøĞ´)
  52           USE_MULTISEC_CLEAR : Use hardware continuous Sector Clear (Ê¹ÓÃÓ²¼ş¼¶Á¬ĞøÉÈÇøÇå0)
  53           RT_UPDATE_FSINFO : Realtime update the information of FS (ÊµÊ±Ë¢ĞÂÎÄ¼şÏµÍ³ĞÅÏ¢)
  54           RT_UPDATE_FILESIZE : Realtime update the file size (ÊµÊ±¸üĞÂÎÄ¼ş´óĞ¡)
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 2   

  55           RT_UPDATE_CLUSTER_CHAIN : Realtime update the cluster chain (ÊµÊ±¸üĞÂ´ØÁ´)
  56                                     if not define it ,znFAT will use CCCB algorithm
  57                         to store the cluster chain in CCCB buffer 
  58                         (Èç¹ûÃ»ÓĞ¶¨ÒåÕâ¸öºê£¬ÔòznFATÔÚÊı¾İ¶ÁĞ´¹ı³ÌÖĞ£¬Ê¹ÓÃ
  59                          CCCBËã·¨À´½«´ØÁ´ÁÙÊ±ĞÔµÄ´æ´¢ÔÚRAMµÄ»º³åÇøÖĞ£¬ÕâÑù
  60                        ÊÇÎªÁËÌá¸ßÊı¾İ¶ÁĞ´ËÙÂÊ£¬±×¶ËÔÚÓÚ»º³åÖĞµÄ´ØÁ´²»»Ø
  61                        Ğ´µ½ÎïÀíÉÈÇøÖĞ£¬»áÔì³ÉÊı¾İ¶ªÊ§£¬Òò´ËÒª¼°Ê±»ØĞ´¡£)
  62            CCCB_LEN (XXX) : Define the size of CCCB buffer (¶¨ÒåCCCB »º³åÇø´óĞ¡)
  63            USE_ALONE_CCCB : Use the alone CCCB buffer (Ê¹ÓÃ¶ÀÁ¢CCCB »º³åÇø£¬¼´Ã¿Ò»¸öÎÄ¼ş
  64                                                        ¶¼»á·ÖÅäÒ»¸ö¶ÀÁ¢µÄCCCB»º³åÇø£¬Êı¾İ
  65                                  ¶ÁĞ´Ê±£¬¸÷ÎÄ¼ş¸÷ÓÃ¸÷×ÔµÄCCCB»º³å£¬
  66                                  »¥²»¸ÉÉæ¡£)
  67                         if not define it,use the Shared CCCB buffer
  68                                               (Èç¹û´ËºêÃ»ÓĞ¶¨Òå£¬ÔòznFAT»áÊ¹ÓÃ¹²
  69                                  CCCB »º³åÇø£¬Ö÷ÒªÊÇÎªÁË½ÚÊ¡RAM×Ê
  70                                  Ô´£¬µ«ÕâÑù±ØÈ»ÕĞÖÂ¶à¸öÎÄ¼ş¶Ô¹²Ïí
  71                                  CCCB»º³åµÄÇÀ¶á£¬ÔÚÍ¬Ê±²Ù×÷ÎÄ¼ş
  72                                  ½Ï¶àµÄÊ±ºò£¬Êı¾İ¶ÁĞ´Ğ§ÂÊ²¢²»¸ß¡£)
  73           USE_EXCHANGE_BUFFER : Use the exchange buffer and relevant algorithm (EXB)
  74                                                       (Ê¹ÓÃEXBÉÈÇø½»»»»º³å¼°ÆäËã·¨£¬EXB
  75                                  »º³åÊÇÎªÁË¼õÉÙÉÈÇøÊı¾İµÄ¶Á-¸Ä-Ğ´
  76                                  ²Ù×÷´ÎÊı)
  77            USE_ALONE_EXB : Use alone exchange buffer (Ê¹ÓÃ¶ÀÁ¢µÄEXBÉÈÇø½»»»»º³å£¬¼´Ã¿¸ö
  78                                                       ÎÄ¼ş¾ùÓĞ¸÷×Ô¶ÀÁ¢µÄEXB»º³å£¬ÕâÑù×÷
  79                                 »á¼«´óµÄÔö´óRAM¿ªÏú)
  80                          if no define it,use the Shared exchange buffer
  81                                              (Èç¹û´ËºêÃ»ÓĞ¶¨Òå£¬ÔòÊ¹ÓÃ¹²ÏíEXB
  82                                 »º³å£¬¶à¸öÎÄ¼ş·ÖÊ±·ÖÏíÒ»¸öÉÈÇø½»»»
  83                                 »º³å£¬»áÔì³ÉÕùÇÀÎÊÌâ)
  84           Data_Redirect : Redirect function name macro defination for read_dataX
  85                                                      (ÎªznFAT_ReadDataXº¯ÊıËù¶¨ÒåµÄÊı¾İ
  86                                 ÖØ¶¨Ïòµ¥Î»×Ö½Ú´¦Àíº¯Êı)
  87          
  88          /---------------------------------------------------------------------------*/
  89          
  90          
  91          //#pragma udata directive
  92          //#pragma udata BUFFER
  93          UINT8 tmpBuf[ZNFAT_BUF_SIZE];
  94          //#pragma udata
  95          
  96          UINT8 *znFAT_Buffer=tmpBuf; //znFATµÄÄÚ²¿»º³åÇø£¬Ê¹ÓÃÕß²»¿ÉË½×ÔÊ¹ÓÃ
  97                                      //ÏÈ¶¨ÒåtmpBuf£¬ÔÙÓÃznFAT_BufferÖ¸ÏòËü£¬ÊÇÒòÎªÔÚÒ»Ğ©¼Ü¹¹µÄCPUÖĞ
  98                                      //ÊÜÏŞÓÚRAMµÄÌØÊâ½á¹¹£¬Ö»ÄÜÓÃÖ¸ÕëÀ´·ÃÎÊ´óÊı×é£¬±ÈÈçPIC
  99          
 100          //--------------------------------------------------------------------------------------------------
 101          struct znFAT_Init_Args *pInit_Args; //³õÊ¼»¯²ÎÊı½á¹¹ÌåÖ¸Õë£¬ÓÃÒÔÖ¸ÏòÄ³Ò»´æ´¢Éè±¸µÄ³õÊ¼»¯²ÎÊı¼¯ºÏ
 102                                              //Ê¹ÓÃÖ®Ç°*±ØĞë*ÏÈÖ¸Ïò½á¹¹»¯±äÁ¿
 103          extern struct znFAT_IO_Ctl ioctl; 
 104          
 105          UINT8 Dev_No=0; //Éè±¸ºÅ£¬ÓÃÓÚÊµÏÖ¶àÉè±¸
 106          
 107          //--------------------------------------------------------------------------------------------------
 108          
 109          struct FileInfo *just_file=(struct FileInfo *)0; //ÓÃÓÚ¼ÇÂ¼×î½ü²Ù×÷µÄÎÄ¼ş
 110          
 111          #ifdef USE_LFN
                static UINT8 file_Open_unistr2oemstr(UINT16 *oemstr);
              #endif
 114          
 115          //-------------------SCCCBÏà¹Ø±äÁ¿¶¨Òå----------------------
 116          #ifndef RT_UPDATE_CLUSTER_CHAIN //ÓÃÓÚ¶¨Òå¹²ÏíCCCBµÄ±äÁ¿¼°»º³åÊµÌå
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 3   

              #ifndef USE_ALONE_CCCB
              UINT32 scccb_buf[CCCB_LEN]; //CCCBµÄ»º³åÇø£¬ÒÔÁ¬Ğø´Ø¶ÎµÄ·½Ê½À´¼ÇÂ¼´ØÁ´
              UINT8  scccb_counter=0; 
              UINT32 scccb_curval=0;
              
              UINT8  scccb_curdev=(UINT8)(-1);
              #endif
              #endif
 125          
 126          #ifndef RT_UPDATE_CLUSTER_CHAIN
              
              #ifndef USE_ALONE_CCCB //²»Ê¹ÓÃ¶ÀÁ¢´ØÁ´»º³å£¬¶øÊÇÊ¹ÓÃ¹²Ïí´ØÁ´»º³å£¬ÒÔÏÂ±äÁ¿ÓÃÓÚÍê³É¹²ÏíCCCBÊ¹ÓÃ¹ı³ÌÖĞµÄÕùÇ
             -À
              UINT32 *pcccb_buf=scccb_buf;
              UINT32 *pcccb_curval=&scccb_curval;
              UINT8  *pcccb_counter=&scccb_counter;
              
              UINT8  *pcccb_curdev=&scccb_curdev;
              struct FileInfo *pcccb_cur_oc=(struct FileInfo *)0;
              struct znFAT_Init_Args *pcccb_cur_initargs=(struct znFAT_Init_Args *)0;
              #else
              UINT32 *pcccb_buf=(UINT32 *)0;
              UINT32 *pcccb_curval=(UINT32 *)0;
              UINT8  *pcccb_counter=(UINT8 *)0;
              #endif
               
              UINT8 get_next_cluster_in_cccb=0; //ÓÃÒÔ±êÖ¾ÊÇ·ñÔÚCCCBÖĞ²éÕÒÏÂÒ»´Ø
              #endif
 144          //----------------------------------------------------------
 145          
 146          //------------------EXBÏà¹Ø±äÁ¿¶¨Òå-------------------------
 147          #ifdef USE_EXCHANGE_BUFFER
              #ifndef USE_ALONE_EXB
              //#pragma udata directive
              //#pragma udata SEXB_BUF
              UINT8  sexb_buf[ZNFAT_BUF_SIZE];
              //#pragma udata
              
              UINT8  sexb_cur_dev=(UINT8)(-1);
              UINT32 sexb_cur_sec=0;
              struct FileInfo *psexb_cur_oc=(struct FileInfo *)0; //Ö¸Ê¾µ±Ç°EXB±»ÄÄ¸öÎÄ¼şÕ¼ÓÃ
              #endif
              #endif
 159          
 160          #ifdef USE_EXCHANGE_BUFFER
              
              #ifndef USE_ALONE_EXB
              UINT8 *pexb_buf=sexb_buf;
              #else
              UINT8 *pexb_buf=(UINT8 *)0;
              #endif
              
              #endif
 169          //----------------------------------------------------------
 170          //====================Ò»Ğ©³£ÓÃº¯Êı================================================================
 171          
 172          //znFATÖĞÊ¹ÓÃµ½µÄ¹«¹²º¯Êı£¬ÆäÖĞ°üº¬ÁË¶ÔROMÀàĞÍ ×Ö½Ú¡¢×Ö¡¢Ë«×ÖµÄ¶ÁÈ¡ÒÔ¼°ROMµ½RAMÖ®¼ä¿½±´²Ù×÷
 173          //Èç¹ûÒªÊ¹³¤ÎÄ¼şÃû»ò¸ñÊ½»¯¹¦ÄÜ£¬ÔòÕâĞ©ROMÏà¹ØµÄº¯ÊıÊÇ±ØĞëÕıÈ·ÓèÒÔÊµÏÖµÄ
 174          
 175          UINT8 Memory_Set(UINT8 *pmem,UINT32 len,UINT8 value)
 176          {
 177   1       UINT32 i=0;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 4   

 178   1       for(i=0;i<len;i++)
 179   1       { 
 180   2        pmem[i]=value;
 181   2       }
 182   1      
 183   1       return 0;
 184   1      }
 185          
 186          UINT8 Memory_Compare(UINT8 *psmem,UINT8 *pdmem,UINT32 len)
 187          {
 188   1       UINT32 i=0;
 189   1      
 190   1       for(i=0;i<len;i++)
 191   1       {
 192   2        if(psmem[i]!=pdmem[i])
 193   2        {
 194   3         return 0;
 195   3        }
 196   2       }
 197   1       return 1;
 198   1      }
 199          
 200          UINT8 * Memory_Copy(UINT8 *pdmem,UINT8 *psmem,UINT32 len)
 201          {
 202   1       UINT32 i=0;
 203   1      
 204   1       for(i=0;i<len;i++)
 205   1       {
 206   2        pdmem[i]=psmem[i];
 207   2       }
 208   1      
 209   1       return pdmem;
 210   1      }
 211          
 212          INT8 * StringCopy(INT8 *dest_str,INT8 *src_str)
 213          {
 214   1       UINT8 i=0;
 215   1      
 216   1       while('\0'!=src_str[i])
 217   1       {
 218   2        dest_str[i]=src_str[i];
 219   2        i++;
 220   2       }
 221   1      
 222   1       dest_str[i]='\0';
 223   1      
 224   1       return dest_str;
 225   1      }
 226          
 227          UINT32 StringLen(INT8 *pstr)
 228          {
 229   1       UINT32 len=0;
 230   1       while('\0'!=pstr[len]) 
 231   1       {
 232   2        len++;
 233   2       }
 234   1       return len;
 235   1      }
 236          
 237          UINT32 WStringLen(UINT16 *str)
 238          {
 239   1       UINT32 i=0;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 5   

 240   1       while(0!=str[i])
 241   1       {
 242   2        i++;
 243   2       }
 244   1      
 245   1       return i;
 246   1      }
 247          
 248          //=============================FLASHROM ²Ù×÷Ïà¹Øº¯Êı=====================
 249          
 250          UINT8 PGM_BYTE_FUN(ROM_TYPE_UINT8 *ptr)
 251          {
 252   1       return *(ptr); 
 253   1      }
 254          
 255          UINT16 PGM_WORD_FUN(ROM_TYPE_UINT16 *ptr)
 256          {
 257   1       return *(ptr);
 258   1      }
 259          
 260          UINT32 PGM_DWORD_FUN(ROM_TYPE_UINT32 *ptr)
 261          {
 262   1       return *(ptr);
 263   1      }
 264          
 265          UINT8 * PGM2RAM(UINT8 *pdmem,ROM_TYPE_UINT8 *psmem,UINT32 len)
 266          {
 267   1       UINT32 i=0;
 268   1      
 269   1       for(i=0;i<len;i++)
 270   1       {
 271   2        pdmem[i]=PGM_BYTE_FUN((psmem+i));
 272   2       }
 273   1      
 274   1       return pdmem;
 275   1      }
 276          
 277          //================================================================================================
 278          
 279          /*****************************************************************************
 280           ¹¦ÄÜ£ºÑ¡¶¨Ò»¸ö´æ´¢Éè±¸
 281           ĞÎ²Î£ºdevno:Éè±¸ºÅ pinitargs:Ö¸Ïò´æ´¢Éè±¸Ëù¶ÔÓ¦µÄÎÄ¼şÏµÍ³³õÊ¼»¯²ÎÊı¼¯ºÏµÄÖ¸Õë
 282           ·µ»Ø£º0
 283           Ïê½â£ºznFATÊÇÖ§³Ö¶àÉè±¸µÄ£¬Òò´ËÔÚ¶ÔÉè±¸½øĞĞÎÄ¼şÏµÍ³Ïà¹Ø²Ù×÷Ö®Ç°£¬±ØĞëÒªÏÈÑ¡¶¨
 284                 Ò»¸ö´æ´¢Éè±¸¡£´Ëº¯Êı¶ÔDev_NoÕâ¸öÈ«¾ÖµÄÓÃÓÚÇø·Ö´æ´¢Éè±¸Çı¶¯µÄ±äÁ¿½øĞĞÉè
 285                 ¶¨£¬Í¬Ê±½«pInit_ArgsÖ¸Ïò´æ´¢Éè±¸ÏàÓ¦µÄÎÄ¼şÏµÍ³³õÊ¼»¯²ÎÊı¼¯ºÏ
 286          *****************************************************************************/
 287          UINT8 znFAT_Select_Device(UINT8 devno,struct znFAT_Init_Args *pinitargs) //Ñ¡ÔñÉè±¸
 288          {
 289   1       pInit_Args=pinitargs; //½«znFATµÄ³õÊ¼»¯²ÎÊı¼¯ºÏÖ¸ÕëÖ¸ÏòÉè±¸µÄ³õÊ¼»¯²ÎÊı¼¯ºÏ
 290   1      
 291   1       Dev_No=devno; //ÉèÖÃÉè±¸ºÅ
 292   1      
 293   1       return 0;
 294   1      }
 295          
 296          /***********************************************************************************
 297           ¹¦ÄÜ£ºÓÉÒ»¸öĞ¡¶ËÅÅÁĞµÄ×Ö½ÚĞòÁĞ£¬¼ÆËãµÃµ½ÆäÔÚÄ³Ò»×Ö·û³¤¶ÈÏÂËù±í´ïµÄÕûĞÍÖµ
 298           ĞÎ²Î£ºdat:Ö¸Ïò×Ö½ÚĞòÁĞµÄÖ¸Õë len:½«×Ö½ÚĞòÁĞµÄÇ°len¸ö×Ö½Ú¼ÆËãÕûĞÍÖµ
 299           ·µ»Ø£º¼ÆËãµÃµ½µÄÕûĞÍÖµ
 300           Ïê½â£ºÕâÒ»º¯ÊıÊÇÆÁ±Î²»Í¬CPUÔÚ´óĞ¡¶ËÉÏµÄ²îÒìµÄÖ÷ÒªÊÖ¶Î¡£±ÈÈç¶ÔÓÚÒ»¸öĞ¡¶ËµÄ4×Ö½ÚĞòÁĞ
 301                 unsigned char *p={0X12,0X34,0X56,0X78} Èç¹ûÎÒÃÇÏë°ÑËüºÏ³ÉÎªÒ»¸ö4×Ö½ÚÕûĞÍ£¬Èç
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 6   

 302                 unsigned long£¬ÄÇÃ´¿ÉÒÔÕâÑùÀ´×÷ *((unsigned long *)p)£¬µ«¶ÔÓÚ²»Í¬µÄCPU£¬Òò±ä
 303                 Á¿ÔÚRAMÖĞµÄ×Ö½ÚÅÅÁĞË³Ğò²»Í¬£¬¼´´óĞ¡¶ËÎÊÌâ£¬ÔòÆäËù±í´ïµÄÕûĞÍÖµ¿ÉÄÜÎª0X12345678
 304                 »ò 0X78563412£¬Õâ½«»á³öÏÖ´íÎó¡£ÎªÁËÆÁ±ÎÕâÖÖ²îÒì£¬ÒıÈëÁË´Ëº¯Êı£¬Í¨¹ı¶Ô×Ö½ÚĞòÁĞ
 305                 ½øĞĞ¼ÆËã£¬×îºó½«¿ÉÒÔµÃµ½ÕıÈ·µÄÖµ£¬¶ÔÓÚÉÏÀıÖĞµÄ×Ö½ÚĞòÁĞ£¬Í¨¹ı´Ëº¯ÊıµÄ¼ÆËãBytes
 306                 2Value(p,4)ÖµÒ»¶¨Îª0X12345678¡£
 307          ***********************************************************************************/
 308          UINT32 Bytes2Value(UINT8 *dat,UINT8 len)
 309          {
 310   1       UINT32 temp=0;
 311   1      
 312   1       if(len>=1) temp|=((UINT32)(dat[0]))    ;
 313   1       if(len>=2) temp|=((UINT32)(dat[1]))<<8 ;
 314   1       if(len>=3) temp|=((UINT32)(dat[2]))<<16;
 315   1       if(len>=4) temp|=((UINT32)(dat[3]))<<24;
 316   1      
 317   1       return temp;
 318   1      }
 319          
 320          /***********************************************************************************
 321           ¹¦ÄÜ£º²éÕÒFSINFOÉÈÇøµÄÎïÀíµØÖ·
 322           ĞÎ²Î£ºfsinfosec:Ò»¸öÖ¸ÏòÓÃÓÚ¼ÇÂ¼FSINFOÉÈÇøÎïÀíµØÖ·µÄ±äÁ¿µÄÖ¸Õë
 323           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»òÊ§°Ü
 324           Ïê½â£ºÒ»°ãÀ´ËµFSINFOÉÈÇøÔÚDBRÉÈÇøµÄºóÒ»¸öÉÈÇø£¬µ«²»·¦ÓĞÌØÊâÇé¿ö£¬Òò´ËÕâÀï¶ÔDBR+1µ½
 325                 FAT1µÄÇ°Ò»¸öÉÈÇø½øĞĞ±éÀú£¬ÒÔFSINFOÉÈÇøµÄ±êÖ¾×Ö×÷ÎªÈÏ¶¨ÊÇFSINFOÉÈÇøµÄÌõ¼ş¡£
 326          ***********************************************************************************/
 327          UINT8 Find_FSINFO_Sec(UINT32 *fsinfosec) //Ñ°ÕÒFSINFOÉÈÇø£¬ÀïÃæÓĞÊ£Óà´ØÊıÓë¿ÉÓÃµÄ¿Õ´Ø
 328          {
 329   1       UINT32 iSec=0;
 330   1       struct FSInfo *pfsinfo;
 331   1      
 332   1       UINT8 head[4]={'R','R','a','A'};
 333   1       UINT8 sign[4]={'r','r','A','a'}; //FSINFOÉÈÇøµÄ±êÖ¾
 334   1      
 335   1       for(iSec=(pInit_Args->BPB_Sector_No+1);iSec<(pInit_Args->FirstFATSector);iSec++)
 336   1       {
 337   2        znFAT_Device_Read_Sector(iSec,znFAT_Buffer);
 338   2        pfsinfo=((struct FSInfo *)znFAT_Buffer);
 339   2        if(Memory_Compare(pfsinfo->Head,head,4) //ÅĞ¶ÏÉÈÇøÊÇ·ñÊÇFSINFOÉÈÇø
 340   2         && Memory_Compare(pfsinfo->Sign,sign,4))
 341   2        {
 342   3         *fsinfosec=iSec;
 343   3         return ERR_SUCC;
 344   3        }
 345   2       }
 346   1      
 347   1       return ERR_FAIL;
 348   1      }
 349          
 350          /***********************************************************************************
 351           ¹¦ÄÜ£º´ÓFAT±íµÄ×îÍ·ÉÏ¿ªÊ¼²éÕÒ¿ÉÓÃµÄ¿Õ´Ø£¬¼´ÕÒµ½µÚÒ»¸ö¿ÉÓÃ¿Õ´Ø
 352           ĞÎ²Î£ºnFreeCluster:Ö¸ÏòÓÃÓÚ¼ÇÂ¼ÓĞÓÃµÄ¿Õ´ØµÄ±äÁ¿µÄÖ¸Õë
 353           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»òÊ§°Ü
 354           Ïê½â£º´ÓFAT±íµÄ×î¿ªÊ¼Î»ÖÃ¿ªÊ¼Ë³´Î²éÕÒ£¬Ö±µ½µÚÒ»¸ö¿ÉÓÃµÄ¿Õ´Ø³öÏÖ£¬´Ë¿Õ´ØÖµ½«»á±»¼ÇÂ¼
 355                 ÔÚÎÄ¼şÏµÍ³³õÊ¼»¯²ÎÊı¼¯ºÏÖĞµÄpInit_Args->Next_Free_Cluster£¬ÎªÎÄ¼ş²Ù×÷¹ı³ÌÖĞĞè
 356                 Ê¹ÓÃ¿Õ´ØÊ±Ìá¹©¿ÉÓÃ¿Õ´ØµÄ²Î¿¼Öµ¡£
 357          ***********************************************************************************/
 358          UINT8 Search_Free_Cluster_From_Start(UINT32 *nFreeCluster)
 359          {
 360   1       UINT32 iSec=0;
 361   1       UINT8  iItem=0;
 362   1      
 363   1       struct FAT_Sec *pFAT_Sec;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 7   

 364   1      
 365   1       for(iSec=0;iSec<pInit_Args->FATsectors;iSec++)
 366   1       {
 367   2        znFAT_Device_Read_Sector(pInit_Args->FirstFATSector+iSec,znFAT_Buffer); //¶ÁÈ¡FATÉÈÇø
 368   2        pFAT_Sec=(struct FAT_Sec *)znFAT_Buffer;
 369   2      
 370   2        for(iItem=0;iItem<NITEMSINFATSEC;iItem++) //±éÀúËùÓĞ´ØÏî£¬Ñ°ÕÒ¿ÕÏĞ´Ø
 371   2        {
 372   3         if((0==(((pFAT_Sec->items[iItem]).Item)[0])) && (0==(((pFAT_Sec->items[iItem]).Item)[1])) &&
 373   3          (0==(((pFAT_Sec->items[iItem]).Item)[2])) && (0==(((pFAT_Sec->items[iItem]).Item)[3])))
 374   3         {
 375   4          *nFreeCluster=((iSec*NITEMSINFATSEC)+(UINT32)iItem);
 376   4        return ERR_SUCC;
 377   4         }
 378   3        }
 379   2       }
 380   1       
 381   1       return ERR_FAIL;
 382   1      }
 383          
 384          /***********************************************************************************
 385           ¹¦ÄÜ£º¸üĞÂFSINFOÉÈÇø²ÎÊı
 386           ĞÎ²Î£ºÎŞ
 387           ·µ»Ø£º0
 388           Ïê½â£º¸üĞÂFSINFOÉÈÇø£¬ÆäÊµÖ÷ÒªÊÇÎªÁËÎ¬»¤Ê£Óà¿Õ´ØÊıÓëÏÂÒ»¸ö¿ÉÓÃ¿Õ´Ø²Î¿¼ÖµÕâÁ½¸ö²ÎÊı¡£
 389          ***********************************************************************************/
 390          #ifdef UPDATE_FSINFO
 391          UINT8 Update_FSINFO(void) //¸üĞÂFSINFOÉÈÇø
 392          {
 393   1       struct FSInfo *pfsinfo;
 394   1       znFAT_Device_Read_Sector(pInit_Args->FSINFO_Sec,znFAT_Buffer);
 395   1       
 396   1       pfsinfo=((struct FSInfo *)znFAT_Buffer);
 397   1       
 398   1       //Ğ´ÈëÊ£Óà¿Õ´ØÊı
 399   1       pfsinfo->Free_Cluster[0]=(UINT8)( pInit_Args->Free_nCluster&0X000000FF)    ;
 400   1       pfsinfo->Free_Cluster[1]=(UINT8)((pInit_Args->Free_nCluster&0X0000FF00)>>8);
 401   1       pfsinfo->Free_Cluster[2]=(UINT8)((pInit_Args->Free_nCluster&0X00FF0000)>>16);
 402   1       pfsinfo->Free_Cluster[3]=(UINT8)((pInit_Args->Free_nCluster&0XFF000000)>>24);
 403   1      
 404   1       //Ğ´ÈëÏÂÒ»¿ÕÏĞ´Ø²Î¿¼Öµ£¬²¢ÎŞ¶à´óÒâÒå
 405   1       pfsinfo->Next_Free_Cluster[0]=(UINT8)( pInit_Args->Next_Free_Cluster&0X000000FF)    ;
 406   1       pfsinfo->Next_Free_Cluster[1]=(UINT8)((pInit_Args->Next_Free_Cluster&0X0000FF00)>>8);
 407   1       pfsinfo->Next_Free_Cluster[2]=(UINT8)((pInit_Args->Next_Free_Cluster&0X00FF0000)>>16);
 408   1       pfsinfo->Next_Free_Cluster[3]=(UINT8)((pInit_Args->Next_Free_Cluster&0XFF000000)>>24);
 409   1      
 410   1       znFAT_Device_Write_Sector(pInit_Args->FSINFO_Sec,znFAT_Buffer);
 411   1      
 412   1       return 0;
 413   1      }
 414          #endif
 415          
 416          /***********************************************************************************
 417           ¹¦ÄÜ£ºznFATÖĞµÄÎÄ¼şÏµÍ³³õÊ¼»¯º¯Êı
 418           ĞÎ²Î£ºÎŞ
 419           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»òÊ§°Ü£¬Èç¹ûËü·µ»Ø2£¬ÔòËµÃ÷·¢ÉúFAT32ÎÄ¼şÏµÍ³ÀàĞÍĞ£Ñé´íÎó£¬¼´´æ
 420                 ´æ´¢ÉÏµÄÎÄ¼şÏµÍ³·ÇFAT32¡£
 421           Ïê½â£ºÎÄ¼şÏµÍ³³õÊ¼»¯º¯Êı£¬½«Íê³ÉÎÄ¼şÏµÍ³³õÊ¼»¯²ÎÊı¼¯ºÏµÄ×°Èë£¬ÎªÒÔºóµÄÎÄ¼ş²Ù×÷×÷ºÃ
 422                 ×¼±¸¡£
 423          ***********************************************************************************/
 424          UINT8 znFAT_Init(void)
 425          {
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 8   

 426   1       struct DBR *pdbr;
 427   1      
 428   1       UINT8 dm[3]=DBR_MARK;
 429   1      
 430   1       znFAT_Device_Read_Sector(MBR_SECTOR,znFAT_Buffer); 
 431   1         
 432   1       if(!(znFAT_Buffer[0]==dm[0] && znFAT_Buffer[1]==dm[1] && znFAT_Buffer[2]==dm[2])) //¼ì²â0ÉÈÇøÊÇ·ñÎªDBRÉÈÇ
             -ø
 433   1       {
 434   2        pInit_Args->BPB_Sector_No=Bytes2Value(((((struct MBR *)(znFAT_Buffer))->Part[0]).StartLBA),4);
 435   2       }
 436   1       else
 437   1       {
 438   2        pInit_Args->BPB_Sector_No=0;
 439   2       }
 440   1       
 441   1       znFAT_Device_Read_Sector((pInit_Args->BPB_Sector_No),znFAT_Buffer); //¶ÁÈ¡DBRÉÈÇø
 442   1       pdbr=(struct DBR *)znFAT_Buffer;
 443   1      
 444   1       if(!IS_FAT32_TYPE((pdbr->BS_FilSysType1))) return FSTYPE_NOT_FAT32; //FAT32ÎÄ¼şÏµÍ³ÀàĞÍ¼ìÑé
 445   1      
 446   1       pInit_Args->BytesPerSector  =Bytes2Value((pdbr->BPB_BytesPerSec),2);//×°ÈëÃ¿ÉÈÇø×Ö½ÚÊıµ½BytesPerSectorÖĞ
 447   1      
 448   1       pInit_Args->FATsectors      =Bytes2Value((pdbr->BPB_FATSz32)    ,4);//×°ÈëFAT±íÕ¼ÓÃµÄÉÈÇøÊıµ½FATsectorsÖĞ
 449   1      
 450   1       pInit_Args->SectorsPerClust =pdbr->BPB_SecPerClus;//×°ÈëÃ¿´ØÉÈÇøÊıµ½SectorsPerClust ÖĞ
 451   1       pInit_Args->FirstFATSector  =Bytes2Value((pdbr->BPB_RsvdSecCnt) ,2)+pInit_Args->BPB_Sector_No;//×°ÈëµÚÒ»¸
             -öFAT±íÉÈÇøºÅµ½FirstFATSector ÖĞ
 452   1       pInit_Args->FirstDirSector  =(pInit_Args->FirstFATSector)+(pdbr->BPB_NumFATs)*(pInit_Args->FATsectors); /
             -/×°ÈëµÚÒ»¸öÄ¿Â¼ÉÈÇøµ½FirstDirSectorÖĞ
 453   1       pInit_Args->Total_SizeKB    =Bytes2Value((pdbr->BPB_TotSec32),4)/2;  //´ÅÅÌµÄ×ÜÈİÁ¿£¬µ¥Î»ÊÇKB
 454   1      
 455   1       if(Find_FSINFO_Sec(&(pInit_Args->FSINFO_Sec))) //²éÕÒFSINFOĞÅÏ¢ÉÈÇø
 456   1       {  
 457   2        return ERR_FAIL;
 458   2         
 459   2      
 460   2       }
 461   1      
 462   1       znFAT_Device_Read_Sector((pInit_Args->FSINFO_Sec),znFAT_Buffer);
 463   1       pInit_Args->Free_nCluster=Bytes2Value(((struct FSInfo *)znFAT_Buffer)->Free_Cluster,4); //»ñÈ¡Ê£Óà´ØÊı
 464   1      
 465   1       if(0XFFFFFFFF==pInit_Args->Free_nCluster) //Èç¹ûÒ»¸ö´ÅÅÌ¸ñÊ½»¯ºóÃ»ÓĞ¾í±ê£¬ÔòÆä´æ´¢¿Õ¼ä¾ÍÃ»ÓĞÒ»µãÕ¼ÓÃ£¬´ËÊ
             -±FSINFO¼ÇÂ¼µÄÊ£Óà¿Õ´ØÊıÎª0XFFFFFFFF
 466   1       {
 467   2        pInit_Args->Free_nCluster=(((pInit_Args->Total_SizeKB*2)-(pInit_Args->FirstDirSector))/(pInit_Args->Sect
             -orsPerClust))-1;
 468   2       }
 469   1      
 470   1       if(Search_Free_Cluster_From_Start(&(pInit_Args->Next_Free_Cluster)))//±éÀúÕû¸öFAT±í£¬ËÑË÷¿ÉÓÃµÄ¿ÕÏĞ´Ø
 471   1       {                                                                   //´Ë²Ù×÷¿ÉÄÜ»áºÄ·Ñ½Ï¶àÊ±¼ä£¬µ«Ã»ÓĞ°ì·
             -¨
 472   2        return ERR_FAIL;                                                   //FSINFOÖĞµÄ¿ÕÏĞ´Ø²Î¿¼Öµ²¢²»±£Ö¤ÕıÈ·
 473   2       }                                                                   //ĞŞÕıºÍÎ¬»¤Ëü·´¶ø»á¸ü¼ÓÂé·³
 474   1       
 475   1       #ifdef RT_UPDATE_FSINFO //¼°Ê±½«FSINFOÉÈÇø½øĞĞ¸üĞÂ
 476   1       Update_FSINFO();
 477   1       #endif
 478   1      
 479   1       #ifndef RT_UPDATE_CLUSTER_CHAIN
               #ifndef USE_ALONE_CCCB
               Memory_Set((UINT8 *)pcccb_buf,sizeof(UINT32)*CCCB_LEN,0);
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 9   

               #endif
               #endif
 484   1      
 485   1       #ifdef USE_EXCHANGE_BUFFER
               #ifndef USE_ALONE_EXB
               Memory_Set(pexb_buf,512,0);
               #endif
               #endif
 490   1      
 491   1       return ERR_SUCC;
 492   1      }
 493          
 494          #ifndef RT_UPDATE_CLUSTER_CHAIN
              
              #ifdef USE_ALONE_CCCB
              UINT8 CCCB_To_Alone(void) //¶¨Ïòµ½µ±Ç°ÎÄ¼şµÄCCCB   
              {
               pcccb_buf=(just_file->acccb_buf);
               pcccb_curval=&(just_file->acccb_curval);
               pcccb_counter=&(just_file->acccb_counter);
              
               return 0;
              }
              #endif
              
              UINT32 CCCB_Get_Next_Cluster(UINT32 cluster)
              {
               UINT32 pos=CCCB_LEN-1;
               UINT32 i=0,temp=0;
              
               if(pcccb_buf==(UINT32 *)0) return 0;
               
               if(0==pcccb_buf[0]) return 0; //Èç¹ûCCCBÎ´±»Õ¼ÓÃ£¬ÔòÖ±½Ó·µ»Ø0
              
               #ifndef USE_ALONE_CCCB
               if(Dev_No!=(*pcccb_curdev)) return 0; //Èç¹ûµ±Ç°Õ¼ÓÃSCCCBµÄÉè±¸²»ÊÇÏÖÔÚÑ¡¶¨µÄÉè±¸£¬ÔòÖ±½Ó·µ»Ø0
               if(just_file!=pcccb_cur_oc) return 0; //Èç¹ûµ±Ç°Õ¼ÓÃSCCCBµÄÎÄ¼ş²»ÊÇÏÖÔÚÕıÔÚ²Ù×÷µÄÎÄ¼ş£¬ÔòÖ±½Ó·µ»Ø0
               #endif
              
               while(0==pcccb_buf[pos]) pos--;
              
               if(cluster>=pcccb_buf[pos] && cluster<=(*pcccb_curval))
               {
                if(cluster==(*pcccb_curval)) return 0X0FFFFFFF;
                if(cluster==pcccb_buf[pos])
                {
                 if(pcccb_buf[pos]==(*pcccb_curval)) return 0X0FFFFFFF;
                }
                return (cluster+1);
               }
              
               temp=pos/2;
               for(i=0;i<temp;i++)
               {
                if(cluster>=pcccb_buf[2*i] && cluster<=pcccb_buf[2*i+1])
                {
                 if(cluster==pcccb_buf[2*i+1]) return pcccb_buf[2*i+2];
                 if(cluster==pcccb_buf[2*i])
                 {
                  if(pcccb_buf[2*i]==pcccb_buf[2*i+1]) return pcccb_buf[2*i+2];
                 }
                 return (cluster+1);
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 10  

                }  
               }
              
               return 0;
              }
              
              UINT8 CCCB_Update_FAT(void)
              {
               UINT32 i=0,j=0,temp=0,temp1=0;
               UINT32 old_clu=0,cur_clu=0,clu_sec=0;
              
               #ifndef USE_ALONE_CCCB
               UINT8 old_devno=Dev_No;
               struct znFAT_Init_Args *old_pinit_args=pInit_Args;
               #endif
              
               struct FAT_Sec *pFAT_Sec=(struct FAT_Sec *)znFAT_Buffer; //½«Êı¾İ»º³åÇøÊ×µØÖ·Ç¿×ªÎªFAT_Sec½á¹¹ÌåµÄÖ¸ÕëÀàĞ
             -Í
              
               if(pcccb_buf==(UINT32 *)0) return 0;
              
               if(0==pcccb_buf[0]) return 0; //CCCBÉĞÎ´±»Õ¼ÓÃ£¬ÎŞ´ØÁ´¿É¸üĞÂ
              
               #ifndef USE_ALONE_CCCB
               Dev_No=(*pcccb_curdev); pInit_Args=pcccb_cur_initargs;
               #endif
              
               old_clu=cur_clu=pcccb_buf[0];
               clu_sec=(old_clu/NITEMSINFATSEC); //¼ÆËãÇ°Ò»´ØµÄ´ØÏîËùÔÚµÄFATÉÈÇø
               znFAT_Device_Read_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
               
               pcccb_buf[(*pcccb_counter)]=(*pcccb_curval); //½«×îºóÒ»¸öÇø¼ä²¹Æë
              
               temp1=((*pcccb_counter)+1)/2;
               for(i=0;i<temp1;)
               {
                for(j=pcccb_buf[2*i]+1;j<=pcccb_buf[2*i+1];j++)
                {
                 cur_clu++;
              
                 if(clu_sec!=(old_clu/NITEMSINFATSEC))
                 {
                  znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                  znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
                   
                clu_sec=(old_clu/NITEMSINFATSEC);
                  znFAT_Device_Read_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                 }
              
                 temp=(UINT8)(old_clu%NITEMSINFATSEC);
                 (((pFAT_Sec->items)[temp]).Item)[0]=(UINT8)(cur_clu&0X000000FF)      ;  //½«ÆäÁ´ÔÚÇ°ÃæµÄ´ØÏîÉÏ   
                 (((pFAT_Sec->items)[temp]).Item)[1]=(UINT8)((cur_clu&0X0000FF00)>>8) ;
                 (((pFAT_Sec->items)[temp]).Item)[2]=(UINT8)((cur_clu&0X00FF0000)>>16);
                 (((pFAT_Sec->items)[temp]).Item)[3]=(UINT8)((cur_clu&0XFF000000)>>24);
                
                 old_clu=cur_clu;
                }
              
                cur_clu=((i==(temp1-1))?(0X0FFFFFFF):(pcccb_buf[2*i+2])); //Ä¿±ê´ØÈ¡ÏÂÒ»´Ø¶ÎµÄ¿ªÊ¼´Ø;
              
                if(clu_sec!=(old_clu/NITEMSINFATSEC))
                {
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 11  

                 znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                 znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
                   
                 clu_sec=(old_clu/NITEMSINFATSEC);
                 znFAT_Device_Read_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                }
              
                temp=(UINT8)(old_clu%NITEMSINFATSEC);
                (((pFAT_Sec->items)[temp]).Item)[0]=(UINT8)(cur_clu&0X000000FF)      ;  //½«ÆäÁ´ÔÚÇ°ÃæµÄ´ØÏîÉÏ   
                (((pFAT_Sec->items)[temp]).Item)[1]=(UINT8)((cur_clu&0X0000FF00)>>8) ;
                (((pFAT_Sec->items)[temp]).Item)[2]=(UINT8)((cur_clu&0X00FF0000)>>16);
                (((pFAT_Sec->items)[temp]).Item)[3]=(UINT8)((cur_clu&0XFF000000)>>24);
              
                old_clu=cur_clu;
                i++;
               }
               znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
               znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
              
               //============================================================================================
               Memory_Set((UINT8 *)pcccb_buf,sizeof(UINT32)*CCCB_LEN,0); //Çå¿ÕCCCB
               (*pcccb_counter)=0;
              
               #ifndef USE_ALONE_CCCB
               pcccb_cur_oc=(struct FileInfo *)0;
               *pcccb_curdev=(UINT8)(-1);
               pcccb_cur_initargs=(struct znFAT_Init_Args *)0;
              
               Dev_No=old_devno; pInit_Args=old_pinit_args; //»Ö¸´Éè±¸ºÅÓë ÓëÉè±¸Ïà¹ØµÄÎÄ¼şÏµÍ³²ÎÊı¼¯ºÏ
               #endif
              
               return 0;
              }
              #endif
 639          
 640          /***********************************************************************************
 641           ¹¦ÄÜ£º»ñÈ¡ÏÂÒ»´Ø
 642           ĞÎ²Î£ºµ±Ç°´Ø
 643           ·µ»Ø£ºÏÂÒ»´ØµÄ´ØºÅ
 644           Ïê½â£º´Ëº¯ÊıÔÚznFAT±»Æµ·±µ÷ÓÃ
 645          ***********************************************************************************/
 646          #ifdef GET_NEXT_CLUSTER 
 647          UINT32 Get_Next_Cluster(UINT32 cluster)
 648          {
 649   1       UINT32 clu_sec=0;
 650   1       struct FAT_Sec *pFAT_Sec;
 651   1       struct FAT_Item *pFAT_Item;
 652   1      
 653   1       #ifndef RT_UPDATE_CLUSTER_CHAIN
               UINT32 next_clu=0;
               #endif
 656   1      
 657   1       #ifndef RT_UPDATE_CLUSTER_CHAIN //Èç¹ûÊ¹ÓÃÁËCCCB£¬Ôò»ñÈ¡ÏÂÒ»´ØÊ±£¬ÏÈµ½CCCBÖĞÑ°ÕÒ£¬È»ºóÔÙµ½FATÖĞÈ¥ÕÒ
               if(0!=get_next_cluster_in_cccb)
               {
                next_clu=CCCB_Get_Next_Cluster(cluster);
                if(0!=next_clu) return next_clu;
               }
               #endif
 664   1      
 665   1       clu_sec=(cluster/NITEMSINFATSEC)+(pInit_Args->FirstFATSector); //Ö¸¶¨´ØµÄ´ØÏîËùÔÚµÄÉÈÇøÎªÆäFATÇøÄÚµÄÆ«ÒÆÁ
             -¿¼ÓÉÏ
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 12  

 666   1                                                                
 667   1       znFAT_Device_Read_Sector(clu_sec,znFAT_Buffer); //½«´ØÏîËùÔÚµÄÉÈÇøÊı¾İ¶ÁÈë»º³åÇø
 668   1      
 669   1       pFAT_Sec=(struct FAT_Sec *)znFAT_Buffer; //½«Êı¾İ»º³åÇøÊ×µØÖ·Ç¿×ªÎªFAT_Sec½á¹¹ÌåµÄÖ¸ÕëÀàĞÍ
 670   1      
 671   1       pFAT_Item=&((pFAT_Sec->items)[cluster%NITEMSINFATSEC]); //»ñÈ¡Ö¸¶¨´ØµÄ´ØÏîÔÚËùÔÚÉÈÇøÖĞµÄµØÖ·
 672   1      
 673   1       return Bytes2Value((UINT8 *)pFAT_Item,NFATITEMBYTES); //·µ»Ø´ØÏîµÄÖµ£¬¼´Ö¸¶¨´ØÏÂÒ»´ØµÄ´ØºÅ
 674   1      }
 675          #endif
 676          
 677          /***********************************************************************************
 678           ¹¦ÄÜ£ºÎÄ¼şÊı¾İ¶¨Î»
 679           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë offset:Ä¿±êÆ«ÒÆÁ¿
 680           ·µ»Ø£º0
 681           Ïê½â£ºÈç¹ûoffset´óÓÚÎÄ¼ş´óĞ¡£¬Ôò¶¨Î»µ½ÎÄ¼şÄ©Î²¡£´Ëº¯ÊıÒÑ¾­±»Êı¾İ¶ÁĞ´º¯Êı¼¯³É£¬Ê¹ÓÃ
 682                 ÕßÒ»°ã²»ĞèÒªµ÷ÓÃ´Ëº¯Êı¡£
 683          ***********************************************************************************/
 684          #ifdef ZNFAT_SEEK
 685          UINT8 znFAT_Seek(struct FileInfo *pfi,UINT32 offset)
 686          {
 687   1       UINT32 Cluster_Size=((pInit_Args->SectorsPerClust)*(pInit_Args->BytesPerSector)); //¼ÆËã´ØµÄ×Ü×Ö½ÚÊı¾İ£¬Ò
             -ÔÃâºóÃæÖØ¸´¼ÆËã
 688   1       UINT32 temp=0,temp1=0,temp2=0,len=0,k=0,ncluster=0,have_read=0;
 689   1      
 690   1       just_file=pfi;
 691   1      
 692   1       #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=1;
               #ifdef USE_ALONE_CCCB
               CCCB_To_Alone();
               #endif
               #endif
 698   1      
 699   1       if(offset<(pfi->File_Size)) //Èç¹ûÒª¶¨Î»µ½µÄÆ«ÒÆÁ¿Ğ¡ÓÚÎÄ¼ş´óĞ¡£¬Ôò±Ø¶¨²»ÔÚÎÄ¼şÄ©Î²
 700   1       {
 701   2        pfi->File_IsEOF=BOOL_FALSE;
 702   2       }
 703   1      
 704   1       if(offset==(pfi->File_CurOffset)) return 0; //Èç¹ûÒª¶¨Î»µÄÎ»ÖÃÕıºÃÊÇµ±Ç°Æ«ÒÆÁ¿£¬ÔòÖ±½Ó·µ»Ø
 705   1      
 706   1       if(offset<(pfi->File_CurOffset)) //Èç¹ûÒª¶¨Î»µÄÎ»ÖÃÔÚµ±Ç°Æ«ÒÆÁ¿Ö®Ç°£¬ÔòÏÈ»Øµ½ÎÄ¼şÆğµã£¬ÒòÎª´ØÁ´ÊÇµ¥ÏòµÄ
 707   1       {
 708   2        pfi->File_CurClust=pfi->File_StartClust;
 709   2        pfi->File_CurSec=SOC(pfi->File_CurClust);
 710   2        pfi->File_CurPos=0;
 711   2        pfi->File_CurOffset=0; 
 712   2        pfi->File_IsEOF=BOOL_FALSE;
 713   2       }
 714   1       
 715   1       len=offset-(pfi->File_CurOffset); //¼ÆËãÄ¿±êÆ«ÒÆÁ¿µ½µ±Ç°Æ«ÒÆÁ¿Ö®¼äµÄÊı¾İ³¤¶È
 716   1       
 717   1       if(offset>=(pfi->File_Size)) //Èç¹û´Óµ±Ç°Î»ÖÃ¿ªÊ¼Òª¶ÁÈ¡µÄÊı¾İ³¤¶Èlen²»Ğ¡ÓÚÎÄ¼ş´óĞ¡
 718   1       {
 719   2        len=(pfi->File_Size-pfi->File_CurOffset);    //¶Ôlen½øĞĞĞŞÕı£¬ÖÃÎªÎÄ¼şÊ£Óà¿É¶ÁÊı¾İÁ¿¡£
 720   2        pfi->File_IsEOF=BOOL_TRUE;    //ÕâÖÖÇé¿öÏÂ£¬ÎÄ¼ş±ØÈ»»á¶Áµ½Ä©Î²¡£                    
 721   2       }
 722   1       
 723   1       //=================================================================== 
 724   1       if((pfi->File_CurOffset%Cluster_Size)!=0) //Èç¹ûµ±Ç°Æ«ÒÆÁ¿ÊÇ´Ø´óĞ¡ÕûÊı±¶£¬ËµÃ÷´ËÎ»ÖÃ¼´ÎªÕû´Ø¿ªÊ¼
 725   1       {                                         //²»ÒªÔÙ½øĞĞµ±Ç°´ØÄÚÊı¾İ´¦Àí£¬Ö±½Ó½øÈë´Ø-ÉÈÇø-×Ö½Ú½×¶Î
 726   2        if(len<=(pInit_Args->BytesPerSector-pfi->File_CurPos))
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 13  

 727   2        {
 728   3         //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı
 729   3         if((pInit_Args->BytesPerSector-pfi->File_CurPos)==len) //Èç¹ûÕıºÃ¶Áµ½µ±Ç°ÉÈÇøµÄÄ©Î²
 730   3         {
 731   4          if(IS_END_SEC_OF_CLU(pfi->File_CurSec,pfi->File_CurClust))//Èç¹ûµ±Ç°ÉÈÇøÊÇµ±Ç°´ØµÄ×îºóÒ»¸öÉÈÇø        
             -             
 732   4          {
 733   5           if(!pfi->File_IsEOF) 
 734   5         {
 735   6          pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust); 
 736   6         }
 737   5           pfi->File_CurSec=SOC(pfi->File_CurClust);
 738   5          }
 739   4          else
 740   4          {
 741   5           pfi->File_CurSec++;  
 742   5          }
 743   4          pfi->File_CurPos=0; 
 744   4         }
 745   3         else
 746   3         {
 747   4          pfi->File_CurPos+=((UINT16)len); 
 748   4         }  
 749   3         pfi->File_CurOffset+=len;
 750   3      
 751   3         return NUL_RET;
 752   3        }
 753   2        //===================================================================
 754   2        else
 755   2        {
 756   3         temp=(pInit_Args->BytesPerSector-pfi->File_CurPos); //½«µ±Ç°ÉÈÇøµÄÊ£ÓàÊı¾İÁ¿¸³¸øÖĞ¼ä±äÁ¿temp
 757   3         have_read+=temp;
 758   3        
 759   3         if(!(IS_END_SEC_OF_CLU(pfi->File_CurSec,pfi->File_CurClust))) //Èç¹ûµ±Ç°ÉÈÇø²»ÊÇµ±Ç°´ØµÄ×îºóÒ»¸öÉÈÇø
 760   3         {
 761   4          pfi->File_CurSec++;
 762   4          pfi->File_CurPos=0; 
 763   4      
 764   4          temp2=(len-have_read); //¼ÆËãÊ£ÓàÊı¾İÁ¿
 765   4          temp1=((LAST_SEC_OF_CLU(pfi->File_CurClust)-(pfi->File_CurSec-1))*(pInit_Args->BytesPerSector)); //Ê£Ó
             -àËùÓĞÉÈÇøÊı¾İÁ¿
 766   4          if(temp2<=temp1) //Èç¹ûÊ£ÓàÊı¾İÁ¿xxx
 767   4          {
 768   5         //ÕâËµÃ÷Òª¶ÁµÄÊı¾İÔÚµ±Ç°´ØÄÚ£¬Ã»ÓĞ¿çµ½ÏÂÒ»´Ø    
 769   5           temp=temp2/(pInit_Args->BytesPerSector); //¼ÆËãµ±Ç°´ØÄÚÕûÉÈÇø¶ÁÈ¡µÄ½áÊøÉÈÇø
 770   5           have_read+=((pInit_Args->BytesPerSector)*temp);
 771   5      
 772   5           if(temp2==temp1)
 773   5           {
 774   6            if(!pfi->File_IsEOF) 
 775   6          {
 776   7           pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust); 
 777   7          }
 778   6            pfi->File_CurSec=SOC(pfi->File_CurClust); 
 779   6            pfi->File_CurPos=0;
 780   6           }
 781   5           else
 782   5           {
 783   6            pfi->File_CurSec+=temp; 
 784   6            //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı
 785   6            pfi->File_CurPos=(UINT16)(len-have_read);
 786   6           }
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 14  

 787   5           pfi->File_CurOffset+=len; 
 788   5          
 789   5           return NUL_RET;
 790   5          }
 791   4          else //Èç¹ûÊ£ÓàÊı¾İµÄÕûÉÈÇøÊı²»Ğ¡ÓÚµ±Ç°´ØµÄÊ£ÓàÉÈÇøÊı£¬¼´Òª¶ÁµÄÊı¾İ²»¹âÔÚµ±Ç°´ØÄÚ£¬ÒÑ¾­¿ç´ØÁË
 792   4          {
 793   5           temp=LAST_SEC_OF_CLU(pfi->File_CurClust)-(pfi->File_CurSec)+1; //¼ÆËãµ±Ç°´ØµÄÊ£ÓàÕûÉÈÇøÊı
 794   5           have_read+=((pInit_Args->BytesPerSector)*temp);
 795   5          }
 796   4         }
 797   3        
 798   3         //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı£¬´ËÊ±ÒÑ¾­¶ÁÍêµ±Ç°´ØµÄËùÓĞÊ£ÓàÊı¾İ£¬¿çµ½ÏÂÒ»´Ø
 799   3         pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust);
 800   3         pfi->File_CurSec=SOC(pfi->File_CurClust); 
 801   3         pfi->File_CurPos=0;    
 802   3        }
 803   2       }
 804   1       //----------------------------ÒÔÉÏÊÇ´¦Àíµ±Ç°´ØÄÚµÄÊı¾İ-------------------------------------
 805   1       if(len-have_read>0) 
 806   1       {
 807   2        ncluster=(len-have_read)/Cluster_Size; //¼ÆËãÊ£ÓàÊı¾İµÄÕû´ØÊı
 808   2      
 809   2        //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı£¬´ËÊ±ÒÑ¾­¶ÁÍêËùÓĞµÄÕû´ØÊı¾İ
 810   2      
 811   2        for(k=0;k<ncluster;k++) //¶ÁÈ¡Õû´ØÊı¾İ
 812   2        {
 813   3         have_read+=(Cluster_Size);
 814   3         if(!((len-have_read)==0 && pfi->File_IsEOF))  
 815   3         {
 816   4        pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust);
 817   4         }
 818   3        }
 819   2      
 820   2        pfi->File_CurSec=SOC(pfi->File_CurClust);
 821   2       
 822   2        //----------------------------ÒÔÉÏÊÇ´¦ÀíÕû´ØÊı¾İ------------------------------------------  
 823   2        if(len-have_read>0)
 824   2        {
 825   3         temp=(len-have_read)/(pInit_Args->BytesPerSector); //¼ÆËã×îÖÕÊ£ÓàÊı¾İµÄÕûÉÈÇøÊı
 826   3         have_read+=((pInit_Args->BytesPerSector)*temp);   
 827   3      
 828   3         pfi->File_CurSec+=temp;
 829   3         //----------------------------ÒÔÉÏÊÇ´¦ÀíÕûÉÈÇøÊı¾İ----------------------------------------
 830   3         if(len-have_read>0)
 831   3         {  
 832   4          //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı£¬´ËÊ±Êı¾İ¶ÁÈ¡²Ù×÷ÒÑ¾­½áÊø
 833   4          pfi->File_CurPos=(UINT16)(len-have_read);    
 834   4         }
 835   3         //----------------------------ÒÔÉÏÊÇ´¦Àí×îºóÉÈÇøÄÚµÄÊ£Óà×Ö½Ú----------------------------------------
 836   3        }
 837   2       }
 838   1      
 839   1       pfi->File_CurOffset+=len;
 840   1      
 841   1       return 0;
 842   1      }
 843          #endif
 844          
 845          /******************************************************************************************
 846           ¹¦ÄÜ£ºÎÄ¼şÊı¾İ¶ÁÈ¡
 847           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë offset:Êı¾İ¶ÁÈ¡µÄ¿ªÊ¼Æ«ÒÆÁ¿ len:Òª¶ÁÈ¡µÄ×Ö½ÚÊı
 848                 app_Buffer:Ó¦ÓÃÊı¾İ»º³åÇøÖ¸Õë
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 15  

 849           ·µ»Ø£ºÊµ¼Ê¶ÁÈ¡µ½µÄÊı¾İ³¤¶È 
 850           Ïê½â£ºÈç¹û´ÓoffsetÎ»ÖÃ¶ÁÈ¡µÄÊı¾İ³¤¶ÈÒÑ¾­³¬Ô½ÁËÎÄ¼ş´óĞ¡£¬Ôò½ö¶ÁÈ¡offsetÎ»ÖÃµ½ÎÄ¼şÄ©Î²µÄÊı¾İ
 851                 Òò´Ë£¬Èç¹ûÎÄ¼şµÄÆ«ÒÆÎ»ÖÃÒÑ¾­ÔÚÎÄ¼şÄ©Î²£¬ÔÙ¶ÔÆä½øĞĞ¶ÁÈ¡£¬Ôò±ØÈ»¶Á²»µ½Êı¾İ£¬¶ø·µ»Ø0£¬
 852                 Õâ¿ÉÒÔ×÷ÎªÎÄ¼şÊı¾İÒÑÈ«²¿¶ÁÍêµÄ±êÖ¾£»µ±È»Ò²¿ÉÒÔ¿´File_IsEOFÕâ¸ö±êÖ¾£¬Èç¹ûÎª1ÔòËµÃ÷ÎÄ¼ş
 853                 ÒÑ¾­ÔÚÄ©Î²ÁË£»ÔÙ»òÕß¿ÉÒÔ±È½ÏÎÄ¼şµ±Ç°Æ«ÒÆÁ¿File_CurOffsetÓëÎÄ¼ş´óĞ¡µÄ²îÖµ£¬Èç¹ûÎª0£¬Ôò
 854                 ÎÄ¼şÒÑµ½Ä©Î²¡£¶Áµ½µÄÊı¾İ½«±»·ÅÔÚapp_BufferÖ¸ÏòµÄÓ¦ÓÃÊı¾İ»º³åÇøÖĞ£¬Òª×¢Òâ»º³åÇø´óĞ¡£¬
 855                 ·ÀÖ¹ÄÚ´æÒç³ö¡£
 856          ******************************************************************************************/
 857          #ifdef ZNFAT_READDATA 
 858          UINT32 znFAT_ReadData(struct FileInfo *pfi,UINT32 offset,UINT32 len,UINT8 *app_Buffer)
 859          {
 860   1       UINT32 Cluster_Size=0,iClu=0,next_clu=0,start_clu=0,end_clu=0;
 861   1       UINT32 temp=0,temp1=0,temp2=0,ncluster=0,have_read=0;
 862   1      
 863   1       just_file=pfi;
 864   1      
 865   1       #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=1;
               #ifdef USE_ALONE_CCCB
               CCCB_To_Alone();
               #endif
               #endif
 871   1        
 872   1      
 873   1       znFAT_Seek(pfi,offset); //ÎÄ¼ş¶¨Î»
 874   1      
 875   1       if(0==len) return 0; //Èç¹ûÒª¶ÁÈ¡µÄÊı¾İ³¤¶ÈÎª0£¬ÔòÖ±½Ó·µ»Ø
 876   1       
 877   1       Cluster_Size=(pInit_Args->SectorsPerClust*pInit_Args->BytesPerSector); //¼ÆËã´ØµÄ×Ü×Ö½ÚÊı¾İ£¬ÒÔÃâºóÃæÖØ¸´
             -¼ÆËã
 878   1       
 879   1       if((pfi->File_CurOffset+len)>=(pfi->File_Size)) //Èç¹û´Óµ±Ç°Î»ÖÃ¿ªÊ¼Òª¶ÁÈ¡µÄÊı¾İ³¤¶Èlen²»Ğ¡ÓÚÎÄ¼ş´óĞ¡
 880   1       {
 881   2        len=(pfi->File_Size-pfi->File_CurOffset);    //¶Ôlen½øĞĞĞŞÕı£¬ÖÃÎªÎÄ¼şÊ£Óà¿É¶ÁÊı¾İÁ¿¡£
 882   2        pfi->File_IsEOF=BOOL_TRUE;    //ÕâÖÖÇé¿öÏÂ£¬ÎÄ¼ş±ØÈ»»á¶Áµ½Ä©Î²¡£                    
 883   2       }
 884   1       
 885   1       //=======================================================================================================
             -===== 
 886   1       if((pfi->File_CurOffset%Cluster_Size)!=0) //Èç¹ûµ±Ç°Æ«ÒÆÁ¿ÊÇ´Ø´óĞ¡ÕûÊı±¶£¬ËµÃ÷´ËÎ»ÖÃ¼´ÎªÕû´Ø¿ªÊ¼
 887   1       {                                         //²»ÒªÔÙ½øĞĞµ±Ç°´ØÄÚÊı¾İ´¦Àí£¬Ö±½Ó½øÈë´Ø-ÉÈÇø-×Ö½Ú½×¶Î
 888   2      
 889   2         znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer); //½«µ±Ç°ÉÈÇø¶ÁÈëÄÚ²¿»º³åÇø
 890   2      
 891   2        temp=pInit_Args->BytesPerSector-pfi->File_CurPos; //¼ÆËãµ±Ç°ÉÈÇøÖĞµÄÊ£ÓàÊı¾İÁ¿
 892   2      
 893   2        if(len<=temp)
 894   2        {
 895   3         Memory_Copy(app_Buffer,znFAT_Buffer+(pfi->File_CurPos),len);//½«ÄÚ²¿»º³åÇøÖĞÒª¶ÁµÄÊı¾İ¿½ÈëÓ¦ÓÃ»º³åÇø
 896   3         
 897   3         //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı
 898   3         if(temp==len) //Èç¹ûÕıºÃ¶Áµ½µ±Ç°ÉÈÇøµÄÄ©Î²
 899   3         {
 900   4          if(IS_END_SEC_OF_CLU(pfi->File_CurSec,pfi->File_CurClust))//Èç¹ûµ±Ç°ÉÈÇøÊÇµ±Ç°´ØµÄ×îºóÒ»¸öÉÈÇø        
             -             
 901   4          {
 902   5           if(!pfi->File_IsEOF) //Èç¹û²»ÊÇÎÄ¼şÄ©Î²
 903   5         {
 904   6          pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust); //¿ÉÄÜÓĞ¡°¾½´Ø¡± 
 905   6         }
 906   5           pfi->File_CurSec=SOC(pfi->File_CurClust);
 907   5          }
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 16  

 908   4          else
 909   4          {
 910   5           pfi->File_CurSec++;  
 911   5          }
 912   4          pfi->File_CurPos=0; 
 913   4         }
 914   3         else
 915   3         {
 916   4          pfi->File_CurPos+=(UINT16)len; 
 917   4         }  
 918   3         pfi->File_CurOffset+=len;
 919   3      
 920   3         return len;
 921   3        }
 922   2        //======================================================================================================
             -=====
 923   2        else
 924   2        {
 925   3         temp=(pInit_Args->BytesPerSector-pfi->File_CurPos); //½«µ±Ç°ÉÈÇøµÄÊ£ÓàÊı¾İÁ¿¸³¸øÖĞ¼ä±äÁ¿temp
 926   3      
 927   3         Memory_Copy(app_Buffer,znFAT_Buffer+(pfi->File_CurPos),temp); //½«µ±Ç°ÉÈÇøÊ£ÓàÊı¾İÌÜµ½Ó¦ÓÃ»º³åÇø
 928   3         have_read+=temp;
 929   3        
 930   3         if(!(IS_END_SEC_OF_CLU(pfi->File_CurSec,pfi->File_CurClust))) //Èç¹ûµ±Ç°ÉÈÇø²»ÊÇµ±Ç°´ØµÄ×îºóÒ»¸öÉÈÇø
 931   3         {
 932   4          pfi->File_CurSec++;
 933   4          pfi->File_CurPos=0; 
 934   4      
 935   4          temp2=(len-have_read); //¼ÆËãÊ£ÓàÊı¾İÁ¿
 936   4          temp1=((LAST_SEC_OF_CLU(pfi->File_CurClust)-(pfi->File_CurSec-1))*(pInit_Args->BytesPerSector)); //Ê£Ó
             -àËùÓĞÉÈÇøÊı¾İÁ¿
 937   4          if(temp2<=temp1) //Èç¹ûÒª¶ÁµÄÊ£ÓàÊı¾İÁ¿Ğ¡ÓÚµÈÓÚµ±Ç°´ØÊ£ÓàÊı¾İÁ¿ 
 938   4          {
 939   5         //ÕâËµÃ÷Òª¶ÁµÄÊı¾İÔÚµ±Ç°´ØÄÚ£¬Ã»ÓĞ¿çµ½ÏÂÒ»´Ø
 940   5           
 941   5           temp=temp2/(pInit_Args->BytesPerSector); //¼ÆËãÒª¶ÁÈ¡µÄÊ£ÓàÊı¾İ×ã¹»¼¸¸öÕûÉÈÇø 
 942   5           
 943   5         znFAT_Device_Read_nSector(temp,pfi->File_CurSec,app_Buffer+have_read);
 944   5         have_read+=((pInit_Args->BytesPerSector)*temp);
 945   5      
 946   5           if(temp2==temp1)
 947   5           {
 948   6            if(!pfi->File_IsEOF) //Èç¹û²»ÊÇÎÄ¼şÄ©Î²
 949   6          {
 950   7           pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust); //¿ÉÄÜÓĞ¡°¾½´Ø¡± 
 951   7          }
 952   6            pfi->File_CurSec=SOC(pfi->File_CurClust); 
 953   6            pfi->File_CurPos=0;
 954   6           }
 955   5           else
 956   5           {
 957   6            pfi->File_CurSec+=temp; 
 958   6          temp=len-have_read;
 959   6      
 960   6            znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer); //µ±Ç°ÉÈÇøÖĞ¿ÉÄÜ»¹ÓĞ²¿·ÖÊ£ÓàÊı¾İÒª¶Á
 961   6            Memory_Copy(app_Buffer+have_read,znFAT_Buffer,temp); //½«×îºó²»×ãÉÈÇøµÄÊı¾İÌÜÈëÓ¦ÓÃ»º³åÇø
 962   6            //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı
 963   6            pfi->File_CurPos=(UINT16)temp;
 964   6            
 965   6           }
 966   5           pfi->File_CurOffset+=len; 
 967   5          
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 17  

 968   5           return len;
 969   5          }
 970   4          else //Èç¹ûÊ£ÓàÊı¾İµÄÕûÉÈÇøÊı²»Ğ¡ÓÚµ±Ç°´ØµÄÊ£ÓàÉÈÇøÊı£¬¼´Òª¶ÁµÄÊı¾İ²»¹âÔÚµ±Ç°´ØÄÚ£¬ÒÑ¾­¿ç´ØÁË
 971   4          {
 972   5           temp=(LAST_SEC_OF_CLU(pfi->File_CurClust))-(pfi->File_CurSec)+1; //¼ÆËãµ±Ç°´Ø»¹ÓĞ¼¸¸öÕûÉÈÇø 
 973   5      
 974   5           znFAT_Device_Read_nSector(temp,(pfi->File_CurSec),app_Buffer+have_read);
 975   5           have_read+=((pInit_Args->BytesPerSector)*temp);
 976   5          }
 977   4         }
 978   3        
 979   3         //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı£¬´ËÊ±ÒÑ¾­¶ÁÍêµ±Ç°´ØµÄËùÓĞÊ£ÓàÊı¾İ£¬¿çµ½ÏÂÒ»´Ø
 980   3         pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust); //ÕâÀï²»»á²úÉú¡°¾½´Ø¡± 
 981   3         pfi->File_CurSec=SOC(pfi->File_CurClust); 
 982   3         pfi->File_CurPos=0;    
 983   3        }
 984   2       }
 985   1       //----------------------------ÒÔÉÏÊÇ´¦Àíµ±Ç°´ØÄÚµÄÊı¾İ-------------------------------------
 986   1      
 987   1       temp1=len-have_read;
 988   1       ncluster=temp1/Cluster_Size; //¼ÆËãÊ£ÓàÊı¾İµÄÕû´ØÊı
 989   1       if(ncluster>0) //Ê£ÓàÊı¾İÆğÂë×ã¹»Ò»¸ö´Ø
 990   1       {
 991   2        //ÒÔÏÂ¼ÆËãÁ¬Ğø´Ø¶Î£¬ÒÔ¾¡Á¿Ê¹ÓÃ¶àÉÈÇø¶ÁÈ¡Çı¶¯
 992   2        start_clu=end_clu=pfi->File_CurClust;
 993   2      
 994   2        for(iClu=1;iClu<ncluster;iClu++)
 995   2        {
 996   3         next_clu=Get_Next_Cluster(end_clu);
 997   3         if((next_clu-1)==end_clu)
 998   3         {
 999   4          end_clu=next_clu;
1000   4         }
1001   3         else
1002   3         {
1003   4          znFAT_Device_Read_nSector(((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)),SOC(start_clu),app_Buf
             -fer+have_read);
1004   4        have_read+=((end_clu-start_clu+1)*Cluster_Size);
1005   4        start_clu=end_clu=next_clu;
1006   4         }
1007   3        }
1008   2      
1009   2        //----------------------------ÒÔÉÏÊÇ´¦ÀíÕû´ØÊı¾İ------------------------------------------  
1010   2        temp=temp1%Cluster_Size; //¼ÆËãÕû´Ø¶ÁÍêÖ®ºó£¬ÊÇ·ñ»¹ÓĞÊı¾İÒª¶Á
1011   2        if(temp>0) //Õû´ØÊı¾İºóÃæ»¹ÓĞÊı¾İÒª¶Á
1012   2        {
1013   3         temp=temp/(pInit_Args->BytesPerSector); //¼ÆËã×îÖÕ²»×ãÕû´ØµÄÊ£ÓàÊı¾İµÄÕûÉÈÇøÊı
1014   3      
1015   3         
1016   3      
1017   3         next_clu=Get_Next_Cluster(end_clu);
1018   3         if((next_clu-1)==end_clu) //Èç¹û×îºóÒ»¸ö´ØÈÔÈ»ÓëÇ°ÃæµÄÁ¬Ğø´Ø¶ÎÁ¬Ğø
1019   3         {
1020   4          znFAT_Device_Read_nSector(((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)+temp),SOC(start_clu),ap
             -p_Buffer+have_read);
1021   4        have_read+=((pInit_Args->BytesPerSector)*((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)+temp));
1022   4         }
1023   3         else //Èç¹û×îºóÒ»¸ö´ØÓëÇ°ÃæµÄÁ¬Ğø´Ø¶Î²¢²»Á¬Ğø
1024   3         {
1025   4          znFAT_Device_Read_nSector(((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)),SOC(start_clu),app_Buf
             -fer+have_read);
1026   4        have_read+=(Cluster_Size*(end_clu-start_clu+1));
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 18  

1027   4          znFAT_Device_Read_nSector(temp,SOC(next_clu),app_Buffer+have_read);
1028   4        have_read+=(temp*(pInit_Args->BytesPerSector));
1029   4         }
1030   3      
1031   3         pfi->File_CurClust=next_clu;
1032   3         pfi->File_CurSec=(SOC(next_clu)+temp); 
1033   3      
1034   3         //----------------------------ÒÔÉÏÊÇ´¦ÀíÕûÉÈÇøÊı¾İ----------------------------------------
1035   3         temp=len-have_read;
1036   3         if(temp>0)
1037   3         {
1038   4          znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer); //½«×îºóµÄ¿ÉÄÜ°üº¬Ò»²¿·ÖÒª¶ÁµÄÊı¾İµÄÉÈÇø¶Áµ½Ä
             -Ú²¿»º³åÇø
1039   4          Memory_Copy(app_Buffer+have_read,znFAT_Buffer,temp); //½«×îºó²»×ãÉÈÇøµÄÊı¾İÓàÁ¿ÌÜÈëÓ¦ÓÃ»º³åÇø
1040   4        
1041   4          //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı£¬´ËÊ±Êı¾İ¶ÁÈ¡²Ù×÷ÒÑ¾­½áÊø
1042   4          pfi->File_CurPos=(UINT16)temp;    
1043   4         }
1044   3         //----------------------------ÒÔÉÏÊÇ´¦Àí×îºóÉÈÇøÄÚµÄÊ£Óà×Ö½Ú----------------------------------------
1045   3        }
1046   2        else //Õû´ØÊı¾İ¶ÁÍêÖ®ºóÔÙÎŞÊı¾İÒª¶Á
1047   2        {
1048   3         znFAT_Device_Read_nSector(((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)),SOC(start_clu),app_Buff
             -er+have_read);
1049   3      
1050   3         pfi->File_CurClust=end_clu;
1051   3         if(!pfi->File_IsEOF) 
1052   3         {
1053   4          pfi->File_CurClust=Get_Next_Cluster(end_clu);
1054   4         }
1055   3         pfi->File_CurSec=SOC(pfi->File_CurClust); 
1056   3        }
1057   2       }
1058   1       else //Ê£ÓàµÄÊı¾İ²»×ãÒ»¸ö´Ø
1059   1       {
1060   2        temp=temp1/(pInit_Args->BytesPerSector); //¼ÆËãÊ£ÓàµÄÊı¾İ×ã¹»¼¸¸öÉÈÇø
1061   2        znFAT_Device_Read_nSector(temp,SOC(pfi->File_CurClust),app_Buffer+have_read);
1062   2        have_read+=temp*(pInit_Args->BytesPerSector);
1063   2      
1064   2        pfi->File_CurSec+=temp;
1065   2        
1066   2        temp=temp1%(pInit_Args->BytesPerSector); //¼ÆËã×îÖÕµÄ²»×ãÒ»ÉÈÇøµÄÊı¾İÁ¿
1067   2        if(temp>0) //Èç¹û×îºó»¹ÓĞÊı¾İ
1068   2        {
1069   3         znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer);
1070   3         Memory_Copy(app_Buffer+have_read,znFAT_Buffer,temp);
1071   3      
1072   3         pfi->File_CurPos=(UINT16)temp;
1073   3        }
1074   2       }
1075   1      
1076   1       //----------------------------------------------------------------------------------------
1077   1       pfi->File_CurOffset+=len;
1078   1      
1079   1       return len;
1080   1      }
1081          #endif
1082          
1083          /******************************************************************************************
1084           ¹¦ÄÜ£ºÎÄ¼şÊı¾İ¶ÁÈ¡+Êı¾İÖØ¶¨Ïò
1085           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë offset:Êı¾İ¶ÁÈ¡µÄ¿ªÊ¼Æ«ÒÆÁ¿ len:Òª¶ÁÈ¡µÄ×Ö½ÚÊı
1086                 app_Buffer:Ó¦ÓÃÊı¾İ»º³åÇøÖ¸Õë
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 19  

1087           ·µ»Ø£ºÊµ¼Ê¶ÁÈ¡µ½µÄÊı¾İ³¤¶È 
1088           Ïê½â£º´Ëº¯ÊıµÄÊµÏÖ¹ı³ÌÓëÉÏÃæµÄÊı¾İ¶ÁÈ¡º¯ÊıÏàËÆ£¬²»Í¬ÔÚÓÚ¿ÉÒÔ¶Ô¶Áµ½µÄÊı¾İ½øĞĞÖØĞÂ¶¨Ïò¡£
1089                 ÉÏÃæµÄÊı¾İ¶ÁÈ¡º¯ÊıÊÇ½«Êı¾İÖ±½Ó·Åµ½ÁËÓ¦ÓÃÊı¾İ»º³åÇøÖĞ£¬µ«ÊÇÔÚÄ³Ğ©Ó²¼şÆ½Ì¨ÉÏRAM×ÊÔ´
1090                 ±È½Ï½ôÕÅ£¬¿ª±Ù³ö½Ï´óµÄÓ¦ÓÃÊı¾İ»º³åÇø²»Ì«ÏÖÊµ£¬Òò´ËÔÚÕâÀïÒıÈëÖØ¶¨ÏòµÄ¸ÅÄî£¬¿ÉÒÔ½«
1091                 ¶Áµ½µÄÃ¿Ò»¸ö×Ö½ÚÊ¹ÓÃÄ³¸öº¯ÊıÖ±½Ó½øĞĞ´¦Àí£¬¶ø²»·ÅÔÚ»º³åÇøÖĞ¡£Õâ¸öÓÃÓÚ´¦Àí×Ö½ÚÊı¾İµÄ
1092                 º¯ÊıÓÉÊ¹ÓÃÕßÌá¹©£¬Õâ¸öº¯ÊıµÄº¯ÊıÃûÔÚznfat.hÖĞ±»ºê¶¨ÒåÎªData_Redirect¡£±ÈÈçÈç¹ûÏë°Ñ
1093                 ¶Áµ½µÄÊı¾İÍ¨¹ı´®¿Ú·¢³ö£¬ÔòÔÚznfat.hÖĞ½«ºê¶¨Òå¸ÄÎª #define Data_Redirect Send_Byte
1094                 Send_Byte¾ÍÊÇ´®¿Ú·¢ËÍ×Ö½ÚµÄº¯ÊıµÄº¯ÊıÃû¡£
1095          ******************************************************************************************/
1096          #ifdef ZNFAT_READDATAX 
              UINT32 znFAT_ReadDataX(struct FileInfo *pfi,UINT32 offset,UINT32 len) //Êı¾İÖØ¶¨Ïò¶ÁÈ¡Ì×ÓÃÁËÊı¾İ¶ÁÈ¡º¯Êı£¬
             -µ«²¢²»Ê¹ÓÃ¶àÉÈÇøÇı¶¯
              {                                                                     //¼ÓÖ®Ã»ÓĞ×ã¹»µÄRAM×ÊÔ´£¬ÇÒÃ¿´Î´¦ÀíÒ
             -»¸ö×Ö½Ú£¬Òò´ËĞ§ÂÊ²»¸ß
               UINT32 Cluster_Size=0,iClu=0,iSec=0,next_clu=0,start_clu=0,end_clu=0;
               UINT32 temp=0,temp1=0,temp2=0,ncluster=0,have_read=0;
               UINT32 i=0;
              
               just_file=pfi;
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=1;
               #ifdef USE_ALONE_CCCB
               CCCB_To_Alone();
               #endif
               #endif
              
               znFAT_Seek(pfi,offset); //ÎÄ¼ş¶¨Î»
               
               Cluster_Size=(pInit_Args->SectorsPerClust*pInit_Args->BytesPerSector); //¼ÆËã´ØµÄ×Ü×Ö½ÚÊı¾İ£¬ÒÔÃâºóÃæÖØ¸´
             -¼ÆËã
               
               if((pfi->File_CurOffset+len)>=(pfi->File_Size)) //Èç¹û´Óµ±Ç°Î»ÖÃ¿ªÊ¼Òª¶ÁÈ¡µÄÊı¾İ³¤¶Èlen²»Ğ¡ÓÚÎÄ¼ş´óĞ¡
               {
                len=(pfi->File_Size-pfi->File_CurOffset);    //¶Ôlen½øĞĞĞŞÕı£¬ÖÃÎªÎÄ¼şÊ£Óà¿É¶ÁÊı¾İÁ¿¡£
                pfi->File_IsEOF=BOOL_TRUE;    //ÕâÖÖÇé¿öÏÂ£¬ÎÄ¼ş±ØÈ»»á¶Áµ½Ä©Î²¡£                    
               }
               
               //=================================================================== 
               if((pfi->File_CurOffset%Cluster_Size)!=0) //Èç¹ûµ±Ç°Æ«ÒÆÁ¿ÊÇ´Ø´óĞ¡ÕûÊı±¶£¬ËµÃ÷´ËÎ»ÖÃ¼´ÎªÕû´Ø¿ªÊ¼
               {                                         //²»ÒªÔÙ½øĞĞµ±Ç°´ØÄÚÊı¾İ´¦Àí£¬Ö±½Ó½øÈë´Ø-ÉÈÇø-×Ö½Ú½×¶Î
                znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer); //½«µ±Ç°ÉÈÇø¶ÁÈëÄÚ²¿»º³åÇø
              
                temp=pInit_Args->BytesPerSector-pfi->File_CurPos; //¼ÆËãµ±Ç°ÉÈÇøÖĞµÄÊ£ÓàÊı¾İÁ¿
                if(len<=temp)
                {
                 for(i=0;i<len;i++)
                 {
                Data_Redirect(znFAT_Buffer[i+(pfi->File_CurPos)]);
                 }
                 
                 //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı
                 if(temp==len) //Èç¹ûÕıºÃ¶Áµ½µ±Ç°ÉÈÇøµÄÄ©Î²
                 {
                  if(IS_END_SEC_OF_CLU(pfi->File_CurSec,pfi->File_CurClust))//Èç¹ûµ±Ç°ÉÈÇøÊÇµ±Ç°´ØµÄ×îºóÒ»¸öÉÈÇø        
             -             
                  {
                   if(!pfi->File_IsEOF) //Èç¹û²»ÊÇÎÄ¼şÄ©Î²
                 {
                  pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust); //¿ÉÄÜÓĞ¡°¾½´Ø¡± 
                 }
                   pfi->File_CurSec=SOC(pfi->File_CurClust);
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 20  

                  }
                  else
                  {
                   pfi->File_CurSec++;  
                  }
                  pfi->File_CurPos=0; 
                 }
                 else
                 {
                  pfi->File_CurPos+=(UINT16)len; 
                 }  
                 pfi->File_CurOffset+=len;
              
                 return len;
                }
                //===================================================================
                else
                {
                 temp=(pInit_Args->BytesPerSector-pfi->File_CurPos); //½«µ±Ç°ÉÈÇøµÄÊ£ÓàÊı¾İÁ¿¸³¸øÖĞ¼ä±äÁ¿temp
              
                 for(i=0;i<temp;i++)
                 {
                Data_Redirect(znFAT_Buffer[i+(pfi->File_CurPos)]);
                 }
                 
                 have_read+=temp;
                
                 if(!(IS_END_SEC_OF_CLU(pfi->File_CurSec,pfi->File_CurClust))) //Èç¹ûµ±Ç°ÉÈÇø²»ÊÇµ±Ç°´ØµÄ×îºóÒ»¸öÉÈÇø
                 {
                  pfi->File_CurSec++;
                  pfi->File_CurPos=0; 
              
                  temp2=(len-have_read); //¼ÆËãÊ£ÓàÊı¾İÁ¿
                  temp1=((LAST_SEC_OF_CLU(pfi->File_CurClust)-(pfi->File_CurSec-1))*(pInit_Args->BytesPerSector)); //Ê£Ó
             -àËùÓĞÉÈÇøÊı¾İÁ¿
                  if(temp2<=temp1) //Èç¹ûÒª¶ÁµÄÊ£ÓàÊı¾İÁ¿Ğ¡ÓÚµÈÓÚµ±Ç°´ØÊ£ÓàÊı¾İÁ¿ 
                  {
                 //ÕâËµÃ÷Òª¶ÁµÄÊı¾İÔÚµ±Ç°´ØÄÚ£¬Ã»ÓĞ¿çµ½ÏÂÒ»´Ø
                   
                   temp=temp2/(pInit_Args->BytesPerSector); //¼ÆËãÒª¶ÁÈ¡µÄÊ£ÓàÊı¾İ×ã¹»¼¸¸öÕûÉÈÇø 
              
                 for(iSec=0;iSec<temp;iSec++)
                 {
                  znFAT_Device_Read_Sector(pfi->File_CurSec+iSec,znFAT_Buffer);
                  for(i=0;i<(pInit_Args->BytesPerSector);i++)
                  {
                   Data_Redirect(znFAT_Buffer[i]);
                  }
                 }
                 
                 have_read+=temp*(pInit_Args->BytesPerSector);
              
                   if(temp2==temp1)
                   {
                    if(!pfi->File_IsEOF) //Èç¹û²»ÊÇÎÄ¼şÄ©Î²
                  {
                   pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust); //¿ÉÄÜÓĞ¡°¾½´Ø¡± 
                  }
                    pfi->File_CurSec=SOC(pfi->File_CurClust); 
                    pfi->File_CurPos=0;
                   }
                   else
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 21  

                   {
                    pfi->File_CurSec+=temp; 
                  temp=len-have_read;
              
                    znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer); //µ±Ç°ÉÈÇøÖĞ¿ÉÄÜ»¹ÓĞ²¿·ÖÊ£ÓàÊı¾İÒª¶Á
                    for(i=0;i<temp;i++)
                  {
                   Data_Redirect(znFAT_Buffer[i]);
                  }
                    //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı
                    pfi->File_CurPos=(UINT16)temp;
                    
                   }
                   pfi->File_CurOffset+=len; 
                  
                   return len;
                  }
                  else //Èç¹ûÊ£ÓàÊı¾İµÄÕûÉÈÇøÊı²»Ğ¡ÓÚµ±Ç°´ØµÄÊ£ÓàÉÈÇøÊı£¬¼´Òª¶ÁµÄÊı¾İ²»¹âÔÚµ±Ç°´ØÄÚ£¬ÒÑ¾­¿ç´ØÁË
                  {
                   temp=(LAST_SEC_OF_CLU(pfi->File_CurClust))-(pfi->File_CurSec)+1; //¼ÆËãµ±Ç°´Ø»¹ÓĞ¼¸¸öÕûÉÈÇø 
              
                 for(iSec=0;iSec<temp;iSec++)
                 {
                  znFAT_Device_Read_Sector(pfi->File_CurSec+iSec,znFAT_Buffer);
                  for(i=0;i<(pInit_Args->BytesPerSector);i++)
                  {
                   Data_Redirect(znFAT_Buffer[i]);
                  }
                 }
                 have_read+=temp*(pInit_Args->BytesPerSector);
                  }
                 }
                
                 //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı£¬´ËÊ±ÒÑ¾­¶ÁÍêµ±Ç°´ØµÄËùÓĞÊ£ÓàÊı¾İ£¬¿çµ½ÏÂÒ»´Ø
                 pfi->File_CurClust=Get_Next_Cluster(pfi->File_CurClust); //ÕâÀï²»»á²úÉú¡°¾½´Ø¡± 
                 pfi->File_CurSec=SOC(pfi->File_CurClust); 
                 pfi->File_CurPos=0;    
                }
               }
               //----------------------------ÒÔÉÏÊÇ´¦Àíµ±Ç°´ØÄÚµÄÊı¾İ-------------------------------------
               temp1=len-have_read;
               ncluster=temp1/Cluster_Size; //¼ÆËãÊ£ÓàÊı¾İµÄÕû´ØÊı
              
               if(ncluster>0) //Ê£ÓàÊı¾İÆğÂë×ã¹»Ò»¸ö´Ø
               {
                //ÒÔÏÂ¼ÆËãÁ¬Ğø´Ø¶Î£¬ÒÔ¾¡Á¿Ê¹ÓÃ¶àÉÈÇø¶ÁÈ¡Çı¶¯
                start_clu=end_clu=pfi->File_CurClust;
              
                for(iClu=1;iClu<ncluster;iClu++)
                {
                 next_clu=Get_Next_Cluster(end_clu);
                 if((next_clu-1)==end_clu)
                 {
                  end_clu=next_clu;
                 }
                 else
                 {
                  temp=((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust));
                  for(iSec=0;iSec<temp;iSec++)
                {
                 znFAT_Device_Read_Sector(SOC(start_clu)+iSec,znFAT_Buffer);
                 for(i=0;i<(pInit_Args->BytesPerSector);i++)
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 22  

                 {
                  Data_Redirect(znFAT_Buffer[i]);
                 }
                }
                  have_read+=temp*(pInit_Args->BytesPerSector);
                start_clu=end_clu=next_clu;
                 }
                }
              
                //----------------------------ÒÔÉÏÊÇ´¦ÀíÕû´ØÊı¾İ------------------------------------------  
                temp=temp1%Cluster_Size; //¼ÆËãÕû´Ø¶ÁÍêÖ®ºó£¬ÊÇ·ñ»¹ÓĞÊı¾İÒª¶Á
                if(temp>0) //Õû´ØÊı¾İºóÃæ»¹ÓĞÊı¾İÒª¶Á
                { 
                 temp=temp/(pInit_Args->BytesPerSector); //¼ÆËã×îÖÕ²»×ãÕû´ØµÄÊ£ÓàÊı¾İµÄÕûÉÈÇøÊı
                 next_clu=Get_Next_Cluster(end_clu);
                 if((next_clu-1)==end_clu) //Èç¹û×îºóÒ»¸ö´ØÈÔÈ»ÓëÇ°ÃæµÄÁ¬Ğø´Ø¶ÎÁ¬Ğø
                 {
                  temp2=((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)+temp);
                  for(iSec=0;iSec<temp2;iSec++)
                {
                 znFAT_Device_Read_Sector(SOC(start_clu)+iSec,znFAT_Buffer);
              
                 for(i=0;i<(pInit_Args->BytesPerSector);i++)
                 {
                  Data_Redirect(znFAT_Buffer[i]);
                 }
                }
                 }
                 else //Èç¹û×îºóÒ»¸ö´ØÓëÇ°ÃæµÄÁ¬Ğø´Ø¶Î²¢²»Á¬Ğø
                 {
                temp2=((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust));
                  for(iSec=0;iSec<temp2;iSec++)
                {
                 znFAT_Device_Read_Sector(SOC(start_clu)+iSec,znFAT_Buffer);
              
                 for(i=0;i<(pInit_Args->BytesPerSector);i++)
                 {
                  Data_Redirect(znFAT_Buffer[i]);
                 }
                }
              
                  for(iSec=0;iSec<temp;iSec++)
                {
                 znFAT_Device_Read_Sector(SOC(next_clu)+iSec,znFAT_Buffer);
              
                 for(i=0;i<(pInit_Args->BytesPerSector);i++)
                 {
                  Data_Redirect(znFAT_Buffer[i]);
                 }
                }
                 }
                 
                 have_read+=((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)+temp)*(pInit_Args->BytesPerSector);
              
                 pfi->File_CurClust=next_clu;
                 pfi->File_CurSec=(SOC(next_clu)+temp); 
              
                 //----------------------------ÒÔÉÏÊÇ´¦ÀíÕûÉÈÇøÊı¾İ----------------------------------------
                 temp=len-have_read;
                 if(temp>0)
                 {
                  znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer); //½«×îºóµÄ¿ÉÄÜ°üº¬Ò»²¿·ÖÒª¶ÁµÄÊı¾İµÄÉÈÇø¶Áµ½Ä
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 23  

             -Ú²¿»º³åÇø
                
                for(i=0;i<temp;i++)
                {
                 Data_Redirect(znFAT_Buffer[i]);
                }
              
                  //¸üĞÂµ±Ç°Î»ÖÃ²ÎÊı£¬´ËÊ±Êı¾İ¶ÁÈ¡²Ù×÷ÒÑ¾­½áÊø
                  pfi->File_CurPos=(UINT16)temp;    
                 }
                 //----------------------------ÒÔÉÏÊÇ´¦Àí×îºóÉÈÇøÄÚµÄÊ£Óà×Ö½Ú----------------------------------------
                }
                else //Õû´ØÊı¾İ¶ÁÍêÖ®ºóÔÙÎŞÊı¾İÒª¶Á
                {
                 temp2=((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust));
                 for(iSec=0;iSec<temp2;iSec++)
                 {
                znFAT_Device_Read_Sector(SOC(start_clu)+iSec,znFAT_Buffer);
                for(i=0;i<(pInit_Args->BytesPerSector);i++)
                {
                 Data_Redirect(znFAT_Buffer[i]);
                }
                 }
              
                 pfi->File_CurClust=end_clu;
                 if(!pfi->File_IsEOF) 
                 {
                  pfi->File_CurClust=Get_Next_Cluster(end_clu);
                 }
                 pfi->File_CurSec=SOC(pfi->File_CurClust); 
                }
               }
               else //Ê£ÓàµÄÊı¾İ²»×ãÒ»¸ö´Ø
               {
                temp=temp1/(pInit_Args->BytesPerSector); //¼ÆËãÊ£ÓàµÄÊı¾İ×ã¹»¼¸¸öÉÈÇø
                for(iSec=0;iSec<temp;iSec++)
                {
                 znFAT_Device_Read_Sector(SOC(pfi->File_CurClust)+iSec,znFAT_Buffer);
                 for(i=0;i<(pInit_Args->BytesPerSector);i++)
                 {
                Data_Redirect(znFAT_Buffer[i]);
                 }
                }
              
                pfi->File_CurSec+=temp;
                
                temp=temp1%(pInit_Args->BytesPerSector); //¼ÆËã×îÖÕµÄ²»×ãÒ»ÉÈÇøµÄÊı¾İÁ¿
                if(temp>0) //Èç¹û×îºó»¹ÓĞÊı¾İ
                {
                 znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer);
                 for(i=0;i<temp;i++)
                 {
                Data_Redirect(znFAT_Buffer[i]);
                 }
              
                 pfi->File_CurPos=temp;
                }
               }
              
               //----------------------------------------------------------------------------------------
               pfi->File_CurOffset+=len;
              
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 24  

               return len;
              }
              #endif
1394          
1395          //----------------------------ÒÔÏÂº¯ÊıÓÃÓÚ¼ìÑéÎÄ¼şÃûµÄºÏ·¨ĞÔ----------------------------------
1396          
1397          /******************************************************************************************
1398           ¹¦ÄÜ£º¼ì²éÎÄ¼şÃûÖĞÊÇ·ñº¬ÓĞ·Ç·¨×Ö·û£¬·Ç·¨×Ö·ûÓĞ \/:"<>| 
1399           ĞÎ²Î£ºpfn:Ö¸ÕëÎÄ¼şÃûµÄÖ¸Õë
1400           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»òÊ§°Ü  ³É¹¦£ºÎÄ¼şÃûÖĞÎŞ·Ç·¨×Ö·û£¬·´Ö®ÔòÓĞ 
1401           Ïê½â£º¶ÔÓÚÎÄ¼şÃûÖĞ·Ç·¨×Ö·ûµÄ¼ì²é£¬ÆäÊµ»¹ÓĞÁ½¸ö×Ö·û*?£¬µ«ÊÇznFATÊÇÖ§³ÖÎÄ¼şÃûµÄÍ¨ÅäµÄ£¬Òò´Ë
1402                 ÕâÀï²»ÏŞÖÆ*Óë?£¬ÔÚ´ò¿ªÎÄ¼şºÍÄ¿Â¼µÄÊ±ºòËùÊ¹ÓÃµÄÎÄ¼şÃûÖĞÊÇ´øÓĞ*Óë?£¬µ«´´½¨ÎÄ¼şºÍÄ¿Â¼Ê±
1403                 ÎÄ¼şÃûÖĞÔò²»¿ÉÓĞ*Óë?£¬ÇëÊ¹ÓÃÕß×¢Òâ£¡
1404          ******************************************************************************************/
1405          #ifdef CHECK_ILLEGAL_CHAR
1406          UINT8 Check_Illegal_Char(INT8 *pfn) 
1407          {
1408   1       UINT32 i=0;
1409   1       while(pfn[i])
1410   1       {
1411   2        if(('\\'==pfn[i]) || ('/'==pfn[i]) || (':'==pfn[i])  
1412   2         || /*('*'==pfn[i]) || ('?'==pfn[i]) ||*/ ('"'==pfn[i])  
1413   2         || ('<'==pfn[i]) || ('>'==pfn[i]) || ('|'==pfn[i]))
1414   2        return ERR_FAIL;
1415   2        i++;
1416   2       }
1417   1       return ERR_SUCC;
1418   1      }
1419          #endif
1420          
1421          /******************************************************************************************
1422           ¹¦ÄÜ£º¼ì²éÎÄ¼şÃûÖĞÊÇ·ñº¬ÓĞÌØÊâ×Ö·û£¬+[],;=space
1423           ĞÎ²Î£ºpfn:Ö¸ÕëÎÄ¼şÃûµÄÖ¸Õë
1424           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»òÊ§°Ü  ³É¹¦£ºÎÄ¼şÃûÖĞÎŞÌØÊâ×Ö·û£¬·´Ö®ÔòÓĞ 
1425           Ïê½â£º¶ÔÓÚ8.3¸ñÊ½µÄÎÄ¼şÃû£¬Èç¹ûÆäÖĞ°üº¬ÁËÌØÊâ×Ö·û£¬ÔòÆä±»ÊÓÎª³¤ÎÄ¼şÃû£¬¶ø·Ç¶ÌÃû¡£ÒòÎª¶ÌÃû
1426                 Óë³¤ÃûÔÚ´¦Àí·½·¨ÊÇ²»Í¬µÄ£¬Òò´Ë¶ÔËüÃÇÇø·Ö¿ªÀ´¡£SFNÊÇShort FileNameµÄËõĞ´£¬´øÓĞSFNµÄº¯
1427                 ÊÇÕë¶Ô¶ÌÃûµÄ¼ì²é
1428          ******************************************************************************************/
1429          #ifdef CHECK_SFN_SPECIAL_CHAR
1430          UINT8 Check_SFN_Special_Char(INT8 *pfn) 
1431          {
1432   1       UINT32 i=0;
1433   1       UINT32 pos=(StringLen(pfn)-1);
1434   1      
1435   1       while(' '==pfn[pos]) pos--;
1436   1       
1437   1       while(i<=pos)
1438   1       {
1439   2        if( ('+'==pfn[i]) || ('['==pfn[i]) 
1440   2         || (']'==pfn[i]) || (','==pfn[i])
1441   2         || (' '==pfn[i]) || (';'==pfn[i])
1442   2         || ('='==pfn[i]))
1443   2        return ERR_FAIL;
1444   2        i++;
1445   2       }
1446   1      
1447   1       return ERR_SUCC;
1448   1      }
1449          #endif
1450          
1451          /******************************************************************************************
1452           ¹¦ÄÜ£º¼ì²éÎÄ¼şÃûÖĞµÄ.ÊÇ·ñ·ûºÏSFNÒªÇó
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 25  

1453           ĞÎ²Î£ºpfn:Ö¸ÕëÎÄ¼şÃûµÄÖ¸Õë
1454           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»òÊ§°Ü
1455           Ïê½â£ºSFNÖĞµÄ.²»µÃ¶àÓÚ1¸ö£¬ÈçA..A.TXT¡¢A.A.A¡¢AA.A..AµÈ¾ù·ÇSFN£¬ÎÄ¼şÃû²»µÃÒÔ.¿ªÊ¼
1456                 Èô¸É¸ö.Èç¹ûÔÚÄ©Î²Ôò¾ù±»ºöÂÔ
1457          ******************************************************************************************/
1458          #ifdef CHECK_SFN_DOT
1459          UINT8 Check_SFN_Dot(INT8 *pfn) 
1460          {
1461   1       UINT32 pos=(StringLen(pfn)-1);
1462   1       UINT32 dot_counter=0;
1463   1      
1464   1       if('.'==pfn[0]) return ERR_FAIL;
1465   1      
1466   1       while(pos>0) 
1467   1       {
1468   2        if('.'==pfn[pos])
1469   2        {
1470   3         dot_counter++;
1471   3        }
1472   2        pos--;
1473   2       }
1474   1      
1475   1       if(dot_counter>1) return ERR_FAIL;
1476   1       else return ERR_SUCC;
1477   1      }
1478          #endif
1479          
1480          /******************************************************************************************
1481           ¹¦ÄÜ£º¼ì²éÎÄ¼şÃûµÄ´óĞ¡Ğ´ÊÇ·ñ·ûºÏSFNÒªÇó
1482           ĞÎ²Î£ºpfn:Ö¸ÕëÎÄ¼şÃûµÄÖ¸Õë
1483           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»òÊ§°Ü
1484           Ïê½â£ºSFNÖĞÊÇ²»¿ÉÄÜÓĞ´óĞ¡Ğ´»ìÅÅµÄ£¬±ÈÈçAabcC.txt ABC.Txt AbCdef.TXT¶¼²»ÊÇSFN£¬¶øÊÇ³¤Ãû
1485                 ¼òÑÔÖ®£¬SFNµÄÖ÷ÎÄ¼şÃûºÍÀ©Õ¹Ãû±ØĞë¾ùÊÇ´óĞ´»òĞ¡Ğ´£¬±ÈÈçaaa.TXT AAA.txt aaa.txt AA.TXT
1486                 ¾ùÊÇSFN
1487          ******************************************************************************************/
1488          #ifdef CHECK_SFN_ILLEGAL_LOWER
1489          UINT8 Check_SFN_Illegal_Lower(INT8 *pfn)
1490          {
1491   1       UINT32 i=(StringLen(pfn)-1);
1492   1       UINT8 flag1=2,flag2=2; 
1493   1      
1494   1       while('.'!=pfn[i] && i>0)
1495   1       {
1496   2        if(pfn[i]>='a' && pfn[i]<='z') 
1497   2        {
1498   3         if(0==flag1)
1499   3         {
1500   4        return (UINT8)-1;
1501   4         }
1502   3         flag1=1;
1503   3        }
1504   2      
1505   2        if(pfn[i]>='A' && pfn[i]<='Z') 
1506   2        {
1507   3         if(1==flag1)
1508   3         {
1509   4        return (UINT8)-1;
1510   4         }
1511   3         flag1=0;
1512   3        }
1513   2      
1514   2        i--;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 26  

1515   2       }
1516   1      
1517   1       if(0==i) //Èç¹ûÃ»ÓĞ.ËµÃ÷Ã»ÓĞÀ©Õ¹Ãû
1518   1       { 
1519   2        if(pfn[0]>='a' && pfn[0]<='z') 
1520   2        {
1521   3         if(0==flag1)
1522   3         {
1523   4        return (UINT8)-1;
1524   4         }
1525   3         flag1=1;
1526   3        }
1527   2      
1528   2        flag2=flag1; 
1529   2        flag1=0;
1530   2       }
1531   1      
1532   1       if('.'==pfn[i])
1533   1       {
1534   2        i--;
1535   2       }
1536   1      
1537   1       while(i>0)
1538   1       {
1539   2        if(pfn[i]>='a' && pfn[i]<='z') 
1540   2        {
1541   3         if(0==flag2)
1542   3         {
1543   4        return (UINT8)-1;
1544   4         }
1545   3         flag2=1;
1546   3        }
1547   2      
1548   2        if(pfn[i]>='A' && pfn[i]<='Z') 
1549   2        {
1550   3         if(1==flag2)
1551   3         {
1552   4        return (UINT8)-1;
1553   4         }
1554   3         flag2=0;
1555   3        }
1556   2      
1557   2        i--;  
1558   2       }
1559   1      
1560   1       if(2==flag2)
1561   1       {
1562   2        if(pfn[0]>='a' && pfn[0]<='z') 
1563   2        {
1564   3         flag2=1;
1565   3        }
1566   2        if(pfn[0]>='A' && pfn[0]<='Z')
1567   2        {
1568   3         flag2=0;
1569   3        }
1570   2       }
1571   1       
1572   1       return (UINT8)((flag1<<4)|(flag2));
1573   1      }
1574          #endif
1575          
1576          /******************************************************************************************
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 27  

1577           ¹¦ÄÜ£º¼ì²éÎÄ¼şÃûµÄ³¤¶ÈÊÇ·ñ·ûºÏSFNÒªÇó
1578           ĞÎ²Î£ºpfn:Ö¸ÕëÎÄ¼şÃûµÄÖ¸Õë
1579           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»òÊ§°Ü
1580           Ïê½â£º8.3¸ñÊ½µÄSFN£¬ÒªÇóÖ÷ÎÄ¼şÃûµÄ³¤¶È0<len<=8 À©Õ¹Ãû³¤¶È0<=len<=3£¬²»·ûºÏÕâÒ»ÒªÇóµÄ¾ùÎª³¤
1581                 Ãû
1582          ******************************************************************************************/
1583          #ifdef CHECK_SFN_ILLEGAL_LENGTH
1584          UINT8 Check_SFN_Illegal_Length(INT8 *pfn)
1585          {
1586   1       UINT8 dot_pos=0,have_dot=0,i=0;
1587   1       UINT8 mainfn_len=0,extfn_len=0;
1588   1       UINT32 fn_len=StringLen(pfn);
1589   1      
1590   1       while(' '==pfn[fn_len-1]) fn_len--;
1591   1      
1592   1       if(fn_len>12) return ERR_FAIL; //fn is longer than 8.3
1593   1      
1594   1       for(i=(UINT8)(fn_len-1);i>0;i--) //·´ÏòÑ°ÕÒ. µÚÒ»¸ö.ÊÇÖ÷ÎÄ¼şÓëÀ©Õ¹ÃûµÄ·Ö½ç
1595   1       {
1596   2        if('.'==pfn[i]) 
1597   2        {
1598   3         dot_pos=i;
1599   3         have_dot=1;
1600   3         break;
1601   3        }
1602   2       }
1603   1       
1604   1       if(0==have_dot) //Ã»ÓĞµã
1605   1       {
1606   2        mainfn_len=(UINT8)fn_len;
1607   2        extfn_len=0;
1608   2      
1609   2        if((mainfn_len>0 && mainfn_len<=8))
1610   2        {
1611   3         return ERR_SUCC;
1612   3        }
1613   2        else
1614   2        {
1615   3         return ERR_FAIL;
1616   3        }
1617   2       }
1618   1       else //ÓĞµã
1619   1       {
1620   2        mainfn_len=dot_pos;
1621   2        extfn_len=(UINT8)(((UINT8)fn_len)-(UINT8)(dot_pos+1));
1622   2      
1623   2        if(( mainfn_len>0  && mainfn_len<=8) 
1624   2         && (/*extfn_len>=0  && */extfn_len <=3))
1625   2        {
1626   3         return ERR_SUCC;
1627   3        }
1628   2        else
1629   2        {
1630   3         return ERR_FAIL;
1631   3        }
1632   2       }  
1633   1      }
1634          #endif
1635          //--------------------------------ÒÔÉÏº¯ÊıÓÃÓÚ¼ìÑéSFNµÄºÏ·¨ĞÔ----------------------------------
1636          
1637          /******************************************************************************************
1638           ¹¦ÄÜ£º½«Ò»¸öÎÄ¼şÄ¿Â¼ÏîÖĞµÄÇ°11¸ö×Ö½Ú£¨ÓÃÓÚ¼ÇÂ¼8.3¶ÌÎÄ¼şÃû£©×ªÎªÎÄ¼şÃû
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 28  

1639           ĞÎ²Î£ºname_in_fdi:Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÖĞÓÃÓÚ¼ÇÂ¼ÎÄ¼şÃûµÄ×Ö½ÚĞòÁĞµÄÖ¸Õë pfilename:ÓÃÓÚ¼ÇÂ¼×ª»»ºóµÄ
1640                 ÎÄ¼şÃûµÄÊı×éµÄÖ¸Õë
1641           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»òÊ§°Ü
1642           Ïê½â£ºÔÚ´ò¿ªÎÄ¼şºÍÄ¿Â¼µÈº¯ÊıÖĞ£¬°ÑÎÄ¼şÄ¿Â¼ÏîÖĞµÄÎÄ¼şÃû×Ö¶Î×ªÎªÎÄ¼şÃû£¬ÒÔ·½±ãÓëÄ¿±êÎÄ¼ş½øĞĞ
1643                 Æ¥ÅäºÍ±È¶Ô¡£±ÈÈçÒª´ò¿ªABC.TXT ËüËù¶ÔÓ¦µÄÎÄ¼şÄ¿Â¼Ïî¼ÇÂ¼µÄĞÎÊ½ÎªABC     TXT£¬¶şÕßÊÇ²»ÄÜ
1644                 Ö±½Ó½øĞĞ±È½ÏµÄ£¬ÒªÏÈ½«ABC     TXT×ªÎªABC.TXT£¬È»ºóÔÙ±È½Ï¡£
1645          ******************************************************************************************/
1646          #ifdef TO_FILE_NAME
1647          UINT8 To_File_Name(INT8 *name_in_fdi,INT8 *pfileName)
1648          {
1649   1       UINT8 i=0,n=7,m=10;
1650   1      
1651   1       while(' '==name_in_fdi[n])
1652   1       {
1653   2        n--;
1654   2       }
1655   1       n++;
1656   1      
1657   1       while(' '==name_in_fdi[m] && m>=8)
1658   1       {
1659   2        m--;
1660   2       }
1661   1       m-=7;
1662   1      
1663   1       for(i=0;i<n;i++)
1664   1       {
1665   2        pfileName[i]=name_in_fdi[i];
1666   2       }
1667   1       pfileName[i]='.';
1668   1      
1669   1       for(i=0;i<m;i++)
1670   1       {
1671   2        pfileName[n+i+1]=name_in_fdi[8+i];
1672   2       }
1673   1      
1674   1       if('.'==pfileName[n+m]) pfileName[n+m]=0;
1675   1       else pfileName[n+m+1]=0;
1676   1      
1677   1       return 0;
1678   1      }
1679          #endif
1680          
1681          /******************************************************************************************
1682           ¹¦ÄÜ£º½âÎöÒ»¸öÎÄ¼şÄ¿Â¼Ïî£¬½«½âÎöµÃµ½µÄ²ÎÊı×°Èëµ½ÎÄ¼şĞÅÏ¢¼¯ºÏÖĞ
1683           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë pFDI:Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîµÄÖ¸Õë
1684           ·µ»Ø£º0
1685           Ïê½â£º´Ëº¯Êı±»´ò¿ªÎÄ¼şµÄº¯Êıµ÷ÓÃ£¬¶Ô·ûºÏÆ¥ÅäÌõ¼şµÄÎÄ¼şÄ¿Â¼Ïî½øĞĞ½âÎö£¬²¢½«²ÎÊı×°Èëµ½ÎÄ¼şĞÅ
1686                 Ï¢¼¯ºÏÖĞ£¬ÒÔ±ã¶ÔÎÄ¼ş½øĞĞ½øÒ»²½µÄ²Ù×÷Ê±Ê¹ÓÃ¡£
1687          ******************************************************************************************/
1688          #ifdef ANALYSE_FDI
1689          UINT8 Analyse_FDI(struct FileInfo *pfi,struct FDI *pFDI)
1690          {
1691   1       UINT32 temp=0,i=0;
1692   1      
1693   1       //==========================================================
1694   1      
1695   1       just_file=pfi;
1696   1      
1697   1       To_File_Name((INT8 *)pFDI,pfi->File_Name);
1698   1       
1699   1       temp=(StringLen(pfi->File_Name)-1);
1700   1       while('.'!=(pfi->File_Name)[temp] && temp>0)
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 29  

1701   1       {
1702   2        if(((pFDI->LowerCase)&0x10)!=0) 
1703   2        {
1704   3         (pfi->File_Name)[temp]=(INT8)Upper2Low((pfi->File_Name)[temp]);
1705   3        }
1706   2        temp--;
1707   2       }
1708   1       if(((pFDI->LowerCase)&0x08)!=0) 
1709   1       {
1710   2        for(i=0;i<temp;i++)
1711   2        {
1712   3         (pfi->File_Name)[i]=(INT8)Upper2Low((pfi->File_Name)[i]);   
1713   3        }
1714   2       }
1715   1      
1716   1       temp=(StringLen(pfi->File_Name)-1); 
1717   1       if(CHK_ATTR_DIR(pFDI->Attributes)) //Èç¹ûÊÇÄ¿Â¼Ôò½«×îºóµÄ.È¥µô
1718   1       {
1719   2        (pfi->File_Name)[temp+1]='\0';
1720   2       }
1721   1       //==ÒÔÉÏÊÇ°´ÕÕLowerCase×Ö½Ú¶ÔÖ÷ÎÄ¼şÃûÓëÀ©Õ¹ÎÄ¼şÃû½øĞĞĞ¡Ğ´»¯
1722   1      
1723   1       pfi->File_Attr=pFDI->Attributes; //ÎÄ¼şÊôĞÔ
1724   1       pfi->File_StartClust=Bytes2Value(pFDI->LowClust,2)+Bytes2Value(pFDI->HighClust,2)*65536;
1725   1       pfi->File_Size=Bytes2Value(pFDI->FileSize,4);
1726   1        
1727   1       //½âÎöÎÄ¼ş´´½¨Ê±¼äÓëÈÕÆÚ
1728   1       temp=Bytes2Value(pFDI->CTime,2);
1729   1       pfi->File_CTime.sec=(UINT8)((temp&TIME_SEC_MARK)*2); temp>>=TIME_SEC_NBITS;  //´´½¨Ê±¼äµÄ2ÃëÎ»
1730   1       pfi->File_CTime.min=(UINT8)(temp&TIME_MIN_MARK);   temp>>=TIME_MIN_NBITS; //´´½¨Ê±¼äµÄ·ÖÎ»
1731   1       pfi->File_CTime.hour=(UINT8)(temp&TIME_HOUR_MARK); //´´½¨Ê±¼äµÄÊ±Î»
1732   1       pfi->File_CTime.sec+=(UINT8)((UINT16)(pFDI->CTime10ms)/100); //ÔÚÃëÉÏ¼ÓÉÏ10ºÁÃëÎ»
1733   1      
1734   1       temp=Bytes2Value(pFDI->CDate,2);
1735   1       pfi->File_CDate.day=(UINT8)(temp&DATE_DAY_MARK);     temp>>=DATE_DAY_NBITS;   //´´½¨ÈÕÆÚµÄÈÕÎ»
1736   1       pfi->File_CDate.month=(UINT8)(temp&DATE_MONTH_MARK); temp>>=DATE_MONTH_NBITS; //´´½¨ÈÕÆÚµÄÔÂÎ»
1737   1       pfi->File_CDate.year=(UINT16)((temp&DATE_YEAR_MARK)+DATE_YEAR_BASE); //´´½¨ÈÕÆÚµÄÄêÎ»£¨¼ÓÉÏÄê·İ»ùÊı£©
1738   1      
1739   1       //½âÎöÎÄ¼şĞŞ¸ÄÊ±¼äÓëÈÕÆÚ
1740   1       //temp=Bytes2Value(pFDI->MTime,2);
1741   1       //pfi->File_MTime.sec=(UINT8)((temp&TIME_SEC_MARK)*2); temp>>=TIME_SEC_NBITS;  //´´½¨Ê±¼äµÄ2ÃëÎ»
1742   1       //pfi->File_MTime.min=(UINT8)(temp&TIME_MIN_MARK);   temp>>=TIME_MIN_NBITS; //´´½¨Ê±¼äµÄ·ÖÎ»
1743   1       //pfi->File_MTime.hour=(UINT8)(temp&TIME_HOUR_MARK); //´´½¨Ê±¼äµÄÊ±Î»
1744   1       //ÎÄ¼şµÄĞŞ¸ÄÊ±¼äÃ»ÓĞ10ºÁÃëÎ»£¬ËùÒÔËüÖ»ÄÜ±í´ïÅ¼ÊıÃë
1745   1      
1746   1       //temp=Bytes2Value(pFDI->MDate,2);
1747   1       //pfi->File_MDate.day=(UINT8)(temp&DATE_DAY_MARK);     temp>>=DATE_DAY_NBITS;   //´´½¨ÈÕÆÚµÄÈÕÎ»
1748   1       //pfi->File_MDate.month=(UINT8)(temp&DATE_MONTH_MARK); temp>>=DATE_MONTH_NBITS; //´´½¨ÈÕÆÚµÄÔÂÎ»
1749   1       //pfi->File_MDate.year=(UINT8)((temp&DATE_YEAR_MARK)+DATE_YEAR_BASE); //´´½¨ÈÕÆÚµÄÄêÎ»
1750   1      
1751   1       //½âÎöÎÄ¼ş·ÃÎÊÈÕÆÚ
1752   1       //temp=Bytes2Value(pFDI->ADate,2);
1753   1       //pfi->File_ADate.day=(UINT8)(temp&DATE_DAY_MARK);     temp>>=DATE_DAY_NBITS;   //´´½¨ÈÕÆÚµÄÈÕÎ»
1754   1       //pfi->File_ADate.month=(UINT8)(temp&DATE_MONTH_MARK); temp>>=DATE_MONTH_NBITS; //´´½¨ÈÕÆÚµÄÔÂÎ»
1755   1       //pfi->File_ADate.year=(UINT8)((temp&DATE_YEAR_MARK)+DATE_YEAR_BASE); //´´½¨ÈÕÆÚµÄÄêÎ»
1756   1      
1757   1       pfi->File_CurClust=pfi->File_StartClust;
1758   1       pfi->File_CurSec=(pfi->File_CurClust)?SOC(pfi->File_CurClust):0;
1759   1       pfi->File_CurPos=0;
1760   1       pfi->File_CurOffset=0;
1761   1       pfi->File_IsEOF=(UINT8)((pfi->File_StartClust)?BOOL_FALSE:BOOL_TRUE);
1762   1      
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 30  

1763   1       return 0;
1764   1      }
1765          #endif
1766          
1767          /******************************************************************************************
1768           ¹¦ÄÜ£º¼ì²éÎÄ¼şÃûÊÇ·ñÊÇÍ¨ÅäÃû£¬Í¨ÅäÃûÖĞº¬ÓĞ*Óë?
1769           ĞÎ²Î£ºpfn:Ö¸ÏòÎÄ¼şÃûµÄÖ¸Õë
1770           ·µ»Ø£ºÔËĞĞ½á¹û ÊÇ»ò·ñ
1771           Ïê½â£ºznFATÊÇÖ§³ÖÍ¨ÅäÃûµÄ£¬¶ÔÓÚÍ¨ÅäÃûznFATÖĞÊÇ²»¶ÔÆä½øĞĞÎÄ¼şÃûºÏ·¨ĞÔ¼ì²éµÄ¡£ÇëÊ¹ÓÃÕß×ÔĞĞ
1772                 ×¢Òâ¡£
1773          ******************************************************************************************/
1774          #ifdef IS_WILDFILENAME
1775          UINT8 Is_WildFileName(INT8 *pfn)
1776          { 
1777   1       UINT8 i=0;
1778   1       while('\0'!=pfn[i])
1779   1       {
1780   2        if('*'==pfn[i] || '?'==pfn[i])
1781   2        {
1782   3         return 1;
1783   3        }
1784   2        i++;
1785   2       }
1786   1       return 0;
1787   1      }
1788          #endif
1789          
1790          /******************************************************************************************
1791           ¹¦ÄÜ£ºÔÚÒ»¸ö×Ö·û´®ÖĞ²éÕÒÒ»¸ö×Ó´®
1792           ĞÎ²Î£ºstr:×Ö·û´® substr:×Ó´® pos:´Ó×Ö·û´®µÄposÎ»ÖÃ¿ªÊ¼²éÕÒ×Ó´®
1793           ·µ»Ø£º×Ó´®ÔÚ×Ö·û´®ÖĞµÄ¿ªÊ¼Î»ÖÃ
1794           Ïê½â£º
1795          ******************************************************************************************/
1796          #ifdef FINDSUBSTR
1797          UINT8 FindSubStr(INT8 *str,INT8 *substr,UINT8 pos)
1798          {
1799   1       UINT8 i=pos,j=0,lens=(UINT8)StringLen(str),lent=(UINT8)StringLen(substr);
1800   1      
1801   1       while(i<lens && j<lent)
1802   1       {
1803   2        if(str[i]==substr[j] || '?'==substr[j])
1804   2        {
1805   3         i++;
1806   3         j++;
1807   3        }
1808   2        else
1809   2        {
1810   3         i=(UINT8)(i-j+1);
1811   3         j=0;
1812   3        }
1813   2       }
1814   1       if(j==lent) return (UINT8)(i-lent); 
1815   1       else return (UINT8)0XFF;
1816   1      }
1817          #endif
1818          
1819          /*********************************************************************************************
1820           ¹¦ÄÜ£ºÎÄ¼şÃûÆ¥Åä£¬Ö§³Ö*Óë?Í¨Åä
1821           ĞÎ²Î£ºt:Ä£°åÎÄ¼şÃû£¬¼´Ê¹ÓÃÕßÊäÈëµÄÎÄ¼şÃû s:Ä¿±êÎÄ¼şÃû  ÀıÈçtÎªa*b.txt sÎªaxxb.txt£¬ËüÃÇÊÇÆ¥ÅäµÄ
1822                 ÔÙÈçtÎªa???x.t* sÎªaxyzx.txt£¬ËüÃÇÊÇÆ¥ÅäµÄ¡£
1823           ·µ»Ø£ºÔËĞĞ½á¹û ÊÇ»ò·ñ
1824           Ïê½â£ºÕâÒ»Æ¥ÅäËã·¨»ùÓÚ×Ó´®Æ¥Åä£¬²¢²»±£Ö¤Âú×ãÒ»ÇĞÇé¿ö¡£ÆäËã·¨Ç¿¶È²»¿ÉÓëDOSÉÏµÄÍ¨ÅäÏàÌá²¢ÂÛ¡£
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 31  

1825          **********************************************************************************************/
1826          #ifdef SFN_MATCH
1827          UINT8 SFN_Match(INT8 *t,INT8 *s)
1828          {
1829   1       UINT8 i=0,j=0,lens=(UINT8)StringLen(s);
1830   1       UINT8 lent=(UINT8)StringLen(t);
1831   1       INT8 buf[20];
1832   1       UINT8 bufp=0;
1833   1      
1834   1       //======================================================
1835   1       
1836   1       while(j<lent && '*'!=t[j])
1837   1       {
1838   2        buf[bufp]=(INT8)Lower2Up(t[j]);
1839   2        bufp++;
1840   2        j++;
1841   2       }
1842   1      
1843   1       if('\0'==t[j] && (lent!=lens)) return ERR_FAIL;
1844   1      
1845   1       buf[bufp]='\0';
1846   1       
1847   1       if(FindSubStr(s,buf,0)!=0) return ERR_FAIL;
1848   1       i=bufp;
1849   1       
1850   1       while(1)
1851   1       {
1852   2        while(j<lent && '*'==t[j]) j++;
1853   2        if(j==lent) return ERR_SUCC;
1854   2        bufp=0;
1855   2      
1856   2        while(j<lent && '*'!=t[j])
1857   2        {
1858   3         buf[bufp]=(INT8)Lower2Up(t[j]);
1859   3         bufp++;
1860   3         j++;
1861   3        }
1862   2        buf[bufp]='\0';
1863   2        
1864   2        if(j==lent)
1865   2        {
1866   3         if(FindSubStr(s,buf,i)!=(lens-bufp)) return ERR_FAIL;
1867   3         return ERR_SUCC;
1868   3        }
1869   2      
1870   2        i=FindSubStr(s,buf,i);
1871   2        if(0XFF==i) return ERR_FAIL;
1872   2        i+=bufp;
1873   2       }
1874   1      }
1875          #endif
1876          
1877          /*********************************************************************************************
1878           ¹¦ÄÜ£ºĞŞ¸ÄFAT±íµÄÄ³¸ö±íÏî
1879           ĞÎ²Î£ºcluster:ÒªĞŞ¸ÄµÄ´ØÏîºÅ next_cluster:ÒªÏò´ØÏîÖĞĞ´ÈëµÄÖµ 
1880           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»òÊ§°Ü
1881           Ïê½â£º´Ëº¯ÊıÊ¹clusterÁ´Ïònext_cluster Èç¹ûclusterÎª0»ò1Ôò·ÅÆú²Ù×÷£¬ÒòÎªÓĞĞ§µÄ´ØºÅÊÇ´Ó2¿ªÊ¼µÄ
1882          **********************************************************************************************/
1883          #ifdef MODIFY_FAT
              UINT8 Modify_FAT(UINT32 cluster,UINT32 next_cluster) //¹¹ÔìFAT´ØÁ´
              {
               UINT32 temp1=0,temp2=0;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 32  

              
               if(0==cluster || 1==cluster) return ERR_FAIL; //´ØÏî0Óë1ÊÇ²»ÄÜ¸ü¸ÄµÄ
              
               temp1=pInit_Args->FirstFATSector+(cluster*4/pInit_Args->BytesPerSector);
               temp2=((cluster*4)%pInit_Args->BytesPerSector);
              
               znFAT_Device_Read_Sector(temp1,znFAT_Buffer);
               znFAT_Buffer[temp2+0]=(UINT8)( next_cluster&0x000000ff)     ;
               znFAT_Buffer[temp2+1]=(UINT8)((next_cluster&0x0000ff00)>>8 );
               znFAT_Buffer[temp2+2]=(UINT8)((next_cluster&0x00ff0000)>>16);
               znFAT_Buffer[temp2+3]=(UINT8)((next_cluster&0xff000000)>>24);
               znFAT_Device_Write_Sector(temp1,znFAT_Buffer);
               
               znFAT_Device_Read_Sector(temp1+pInit_Args->FATsectors,znFAT_Buffer);
               znFAT_Buffer[temp2+0]=(UINT8)( next_cluster&0x000000ff)     ;
               znFAT_Buffer[temp2+1]=(UINT8)((next_cluster&0x0000ff00)>>8 );
               znFAT_Buffer[temp2+2]=(UINT8)((next_cluster&0x00ff0000)>>16);
               znFAT_Buffer[temp2+3]=(UINT8)((next_cluster&0xff000000)>>24);
               znFAT_Device_Write_Sector(temp1+pInit_Args->FATsectors,znFAT_Buffer);
              
               return ERR_SUCC;
              }
              #endif
1910          
1911          /********************************************************************************************
1912           ¹¦ÄÜ£º¶Ôcluster´Ø½øĞĞÇå0
1913           ĞÎ²Î£ºcluster:Òª½øĞĞÇå0²Ù×÷µÄ´Ø
1914           ·µ»Ø£º0
1915           Ïê½â£ºÔÚÄ³¸öÄ¿Â¼ÏÂ´´½¨ÎÄ¼ş»òÄ¿Â¼Ê±£¬´ËÄ¿Â¼µÄÏÖÓĞ´ØÒÑÎŞ¿ÕÏĞ¿Õ¼äÀ´Ğ´ÈëÎÄ¼şÄ¿Â¼ÏîÊ±£¬ĞèÒªÀ©Õ¹¿Õ
1916                 ´Ø£¬¼´½«¿Õ´ØÁ´µ½Ä¿Â¼µÄ´ØÁ´ÉÏ£¬½ø¶ø¼ÌĞøĞ´ÈëÎÄ¼şÄ¿Â¼Ïî£¬À´Íê³ÉÎÄ¼ş»òÄ¿Â¼µÄ´´½¨¡£ÔÚÏò¿Õ´Ø
1917                 Ğ´ÈëÎÄ¼şÄ¿Â¼ÏîÒÔÇ°±ØĞë°ÑÕâ¸ö¿Õ´ØÇå¿ÕÎª0¡£ÒòÎªÏòÄ¿Â¼µÄ´ØÖĞĞ´ÈëÎÄ¼şÄ¿Â¼Ïî£¬ÊÇÒÔ0À´ÅĞ¶ÏÊÇ
1918                 ·ñÓĞ¿ÕÏĞµÄÎ»ÖÃ¡£
1919          ********************************************************************************************/
1920          #ifdef CLEAR_CLUSTER
              UINT8 Clear_Cluster(UINT32 cluster)
              {
               znFAT_Device_Clear_nSector((pInit_Args->SectorsPerClust),SOC(cluster));
              
               return 0;
              }
              #endif
1928          
1929          /********************************************************************************************
1930           ¹¦ÄÜ£º¸üĞÂÏÂÒ»¿Õ´Ø²Î¿¼Öµ ¼´znFATÖĞÎÄ¼şÏµÍ³³õÊ¼»¯²ÎÊı¼¯ºÏÖĞµÄNext_Free_Cluster
1931           ĞÎ²Î£ºÎŞ
1932           ·µ»Ø£ºÔËĞĞ½á¹û 
1933           Ïê½â£ºÔÚÃ¿´ÎĞèÒªÊ¹ÓÃ¿Õ´ØµÄÊ±ºò£¬ÎÒÃÇ¶¼¿ÉÒÔÖ±½ÓÈ¥È¡pInit_Args->Next_Free_Cluster£¬µ«ÊÇÓÃÍêÖ®
1934                 Òª¼°Ê±¸üĞÂÆäÖµ£¬ÒÔÎªÏÂÒ»´ÎÊ¹ÓÃ¿Õ´Ø×÷ºÃ×¼±¸¡£
1935          ********************************************************************************************/
1936          #ifdef UPDATE_NEXT_FREE_CLUSTER
              UINT8 Update_Next_Free_Cluster(void)
              {
               UINT32 clu_sec,iItem,iSec;
               struct FAT_Sec *pFAT_Sec;
              
               if(0!=pInit_Args->Free_nCluster) //´ÅÅÌÈÔÓĞ¿Õ¼ä
               {
                pInit_Args->Free_nCluster--; //¿ÕÏĞ´ØÊı¼õ1
              
                clu_sec=(pInit_Args->Next_Free_Cluster/NITEMSINFATSEC); //Ö¸¶¨´ØµÄ´ØÏîËùÔÚµÄÉÈÇøÎªÆäFATÇøÄÚµÄÆ«ÒÆÁ¿     
             -                                                                            //FATµÄÊ×ÉÈÇø                               
             -                          
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 33  

                znFAT_Device_Read_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer); //½«´ØÏîËùÔÚµÄÉÈÇøÊı¾İ¶ÁÈë»
             -º³åÇø
                pFAT_Sec=(struct FAT_Sec *)znFAT_Buffer; //½«Êı¾İ»º³åÇøÊ×µØÖ·Ç¿×ªÎªFAT_Sec½á¹¹ÌåµÄÖ¸ÕëÀàĞÍ
              
                for(iItem=((pInit_Args->Next_Free_Cluster)%NITEMSINFATSEC)+1;iItem<NITEMSINFATSEC;iItem++) //¼ì²âÔÚµ±Ç°F
             -ATÉÈÇøÄÚµ±Ç°´ØÏîÖ®ºóÊÇ·ñÓĞ¿Õ´Ø
                {
                 if(0==(((pFAT_Sec->items)[iItem]).Item)[0]
                 && 0==(((pFAT_Sec->items)[iItem]).Item)[1]
                 && 0==(((pFAT_Sec->items)[iItem]).Item)[2]
                 && 0==(((pFAT_Sec->items)[iItem]).Item)[3])
                 {
                  pInit_Args->Next_Free_Cluster=(clu_sec*NITEMSINFATSEC)+iItem;
                  #ifdef RT_UPDATE_FSINFO
                  Update_FSINFO();
                  #endif
                return ERR_SUCC;
                 }
                }
              
                for(iSec=(clu_sec+1);iSec<(pInit_Args->FATsectors);iSec++) //ÔÚºóÃæµÄFATÉÈÇøÖĞ¼ÌĞø²éÕÒ
                {
                 znFAT_Device_Read_Sector(iSec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                 pFAT_Sec=(struct FAT_Sec *)znFAT_Buffer;
                 for(iItem=0;iItem<NITEMSINFATSEC;iItem++) //¼ì²âÔÚµ±Ç°FATÉÈÇøÄÚµ±Ç°´ØÏîÖ®ºóÊÇ·ñÓĞ¿Õ´Ø
                 {
                  if(0==(((pFAT_Sec->items)[iItem]).Item)[0]
                  && 0==(((pFAT_Sec->items)[iItem]).Item)[1]
                  && 0==(((pFAT_Sec->items)[iItem]).Item)[2]
                  && 0==(((pFAT_Sec->items)[iItem]).Item)[3])
                  {
                   pInit_Args->Next_Free_Cluster=(iSec*NITEMSINFATSEC)+iItem;
                   #ifdef RT_UPDATE_FSINFO
                   Update_FSINFO();
                   #endif
                 return ERR_SUCC;
                  }
                 }
                }
               }
               pInit_Args->Next_Free_Cluster=2; //Èç¹ûÒÑÎŞ¿Õ¼ä£¬¼´nFreeClusterÎª0£¬Ôò½«ÏÂÒ»¿Õ´ØÉèÎª2
                                                //WINDOWS¾ÍÊÇÕâÑù×÷µÄ
               return ERR_NO_SPACE;
              }
              #endif
1990          
1991          //=================for LFN=====ÒÔÏÂ´úÂëÓÃÓÚÊµÏÖ³¤ÎÄ¼şÃû===ÒªÊ¹ÓÃ³¤Ãû¹¦ÄÜ ĞèÒª¶ÔUSE_LFNÕâ¸öºê½øĞĞ¶¨Òå===
1992          
1993          /********************************************************************************************
1994           ¹¦ÄÜ£ºÅĞ¶ÏÒ»¸öÎÄ¼şÃûÊÇ·ñÊÇ³¤ÎÄ¼şÃû
1995           ĞÎ²Î£ºfilename:Ö¸ÏòÎÄ¼şÃûµÄÖ¸Õë
1996           ·µ»Ø£ºÔËĞĞ½á¹û£¬ÊÇ»ò·ñ
1997           Ïê½â£ºÅĞ¶ÏÒ»¸öÎÄ¼şÃûÊÇ·ñ³¤ÎÄ¼şÃû£¬·Ç³£ÖØÒª¡£FAT32ÖĞ¶Ô³¤ÃûµÄ¶¨Òå±È½ÏÁãËé¶ø¸´ÔÓ£¬Ò»Ğ©¿´ËÆ¶ÌÃû
1998                 µÄÎÄ¼şÃûÊµÎª³¤Ãû¡£ÕâÀïÖ»Ê¹ÓÃ³¤ÃûÅĞ¶ÏµÄÖ÷ÒªÌõ¼ş£¬½¨ÒéÔÚÊ¹ÓÃ³¤ÃûÊ±£¬Ê¹ÓÃÕßÒÔÃ÷È·µÄĞÎÊ½
1999                 ¸ø³ö³¤Ãû¡£
2000          ********************************************************************************************/
2001          #ifdef IS_LFN
              UINT8 Is_LFN(INT8 *filename)
              {
               UINT8 is_lfn=BOOL_FALSE;
              
               if(Check_SFN_Illegal_Length(filename)) is_lfn=BOOL_TRUE;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 34  

               if(Check_SFN_Dot(filename))            is_lfn=BOOL_TRUE;
               if(Check_SFN_Special_Char(filename))   is_lfn=BOOL_TRUE;
               if(((UINT8)(-1))==Check_SFN_Illegal_Lower(filename)) is_lfn=BOOL_TRUE;
              
               return is_lfn;
              }
              #endif
2014          
2015          /***********************************************************************************************
2016           ¹¦ÄÜ£º´Ó³¤ÃûÏîÖĞÌáÈ¡ÆäÖĞËùº¬µÄ²¿·Ö³¤ÃûµÄUNIÂë£¬´Ëº¯ÊıÍ¨¹ı¶à´Îµ÷ÓÃ£¬ÊµÏÖÁË¶ÔÕû¸ö³¤ÃûUNIÂëµÄÆ´½Ó
2017           ĞÎ²Î£ºlfn_buf:Ö¸ÏòÓÃÓÚ×°ÔØ³¤ÃûUNIÂëµÄ»º³åÇø plfndi:Ö¸Ïò³¤ÃûÏîµÄÖ¸Õë n:ËµÃ÷ÕâÊÇ³¤ÃûµÄµÚn²¿·Ö
2018           ·µ»Ø£ºÔËĞĞ½á¹û
2019           Ïê½â£ºFAT32ÖĞµÄ³¤ÃûÊÇÓÉ¶à¸ö³¤ÃûÏî¹²Í¬±í´ïµÄ£¬Ã¿¸ö³¤ÃûÏî¼ÇÂ¼×Å³¤ÃûµÄÄ³Ò»¶Î£¬´Ëº¯Êı¾ÍÊÇ½«³¤ÃûÏîÖĞ
2020                 µÄ³¤ÃûUNIÂëÌáÈ¡³öÀ´£¬·Åµ½»º³åÇøµÄÏàÓ¦Î»ÖÃÉÏ¡£¾­¹ı¶à´Îµ÷ÓÃ´Ëº¯Êı£¬×îÖÕ¿ÉÒÔÆ´½ÓµÃµ½³¤Ãû¡£
2021          ************************************************************************************************/
2022          #ifdef GET_PART_NAME
              UINT8 Get_Part_Name(UINT16 *lfn_buf,struct LFN_FDI *plfndi,UINT8 n)
              {
               UINT8 i=0;
               UINT16 temp=0;
              
               if((plfndi->AttrByte[0])&0X40) Memory_Set(((UINT8 *)lfn_buf),2*(MAX_LFN_LEN+1),0); //Èç¹ûÊÇ×îºóÒ»¸ö³¤ÃûÏî
             -£¬ÔòÇå¿Õlfn_buf
              
               for(i=0;i<5;i++) //µÚÒ»²¿·Ö³¤Ãû
               {
                if(n>=MAX_LFN_LEN) return ERR_LFN_BUF_OUT;
                temp=(((UINT16)(((plfndi->Name1)+i*2)[0]))&0X00FF)|((((UINT16)(((plfndi->Name1)+i*2)[1]))&0X00FF)<<8);
                if(0==temp)
                {
                 lfn_buf[n]=0;
                 return 0;
                }
                else
                {
                 lfn_buf[n]=temp;n++;
                }
               }
              
               for(i=0;i<6;i++) //µÚ¶ş²¿·Ö³¤Ãû
               {
                if(n>=MAX_LFN_LEN) return ERR_LFN_BUF_OUT;  
                temp=(((UINT16)(((plfndi->Name2)+i*2)[0]))&0X00FF)|((((UINT16)(((plfndi->Name2)+i*2)[1]))&0X00FF)<<8);
                if(0==temp)
                {
                 lfn_buf[n]=0;
                 return 0;
                }
                else
                {
                 lfn_buf[n]=temp;n++;
                }
               }
              
               for(i=0;i<2;i++) //µÚÈı²¿·Ö³¤Ãû
               {
                if(n>=MAX_LFN_LEN) return ERR_LFN_BUF_OUT;  
                temp=(((UINT16)(((plfndi->Name3)+i*2)[0]))&0X00FF)|((((UINT16)(((plfndi->Name3)+i*2)[1]))&0X00FF)<<8);
                if(0==temp)
                {
                 lfn_buf[n]=0;
                 return 0;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 35  

                }
                else
                {
                 lfn_buf[n]=temp;n++;
                }
               }
              
               n--;
               if((plfndi->AttrByte[0])&0X40)
               {
                while(((UINT16)(0XFFFF))==lfn_buf[n]) n--;
                lfn_buf[n+1]=0;
               }
              
               return 0;
              }
              #endif
2085          
2086          /***********************************************************************************************
2087           ¹¦ÄÜ£º½«OEMÂë£¨¶ÔÓÚºº×ÖÀ´Ëµ£¬OEMÂë¾ÍÊÇGB2312£©×ªÎªUNICODEÂë
2088           ĞÎ²Î£ºoem_code:OEMÂë uni_code:Ö¸ÏòÓÃÓÚ¼ÇÂ¼oem_codeËù¶ÔÓ¦µÄUNICODE±àÂëµÄ±äÁ¿µÄÖ¸Õë
2089           ·µ»Ø£ºÔËĞĞ½á¹û  ³É¹¦»òÊ§°Ü
2090           Ïê½â£ºOEMÂëÊÇ¸÷µØÇøµÄ¼ÆËã»úÉú²úÉÌÔÚ¼ÆËã»ú¹Ì»¯µÄ±¾µØÎÄ×Ö±àÂë£¬±ÈÈçÔÚÖĞ¹úOEMÂë¾ÍÊÇGB2312Âë£¬¼´Çø
2091                 Î»Âë£¬µ«ÊÇFAT32µÄ³¤ÎÄ¼şÃûÊÇÒÔUNICODEÀ´±àÂëµÄ£¬Òò´ËĞèÒªÒ»¸ö±àÂë×ª»»µÄ¹ı³Ì¡£±¾º¯ÊıµÄÊµÏÖ»ùÓÚ
2092                 ¶ş·ÖËÑË÷£¬¿É¿ìËÙ²éÕÒµ½OEMÂë¶ÔÓ¦µÄUNICODE±àÂë¡£
2093          ************************************************************************************************/
2094          #ifdef OEMTOUNI
              UINT8 OEM2UNI(UINT16 oem_code,UINT16 *uni_code) //Í¨¹ı¶ş·Ö·¨²é±í½«OEMÂë×ªÎªUNIÂë
              {  
               UINT32 low=0,high=MAX_UNI_INDEX-1,mid;//ÖÃµ±Ç°²éÕÒÇø¼äÉÏÏÂ½çµÄ³õÖµ 
               
               if(oem_code<GET_PGM_WORD(&(oem_uni[0][1]))) return ERR_FAIL;
               if(oem_code>GET_PGM_WORD(&(oem_uni[MAX_UNI_INDEX-1][1]))) return ERR_FAIL; //Èç¹ûÊäÈëµÄoem_code²»ÊÇ±íµÄ·¶
             -Î§ÄÚ£¬ÔòÖ±½Ó·µ»Ø
              
               while(low<=high) //µ±Ç°²éÕÒÇø¼ä[low..high]·Ç¿Õ
               {
                mid=low+(high-low)/2;
              
                if(oem_code==GET_PGM_WORD(&(oem_uni[mid][1])))
                {
                 *uni_code=GET_PGM_WORD(&(oem_uni[mid][0]));
              
                 return ERR_SUCC; //²éÕÒ³É¹¦·µ»Ø
                }
              
                if(GET_PGM_WORD(&(oem_uni[mid][1]))>oem_code)
                {
                 high=mid-1;  //¼ÌĞøÔÚ[low..mid-1]ÖĞ²éÕÒ
                }
                else
                {
                 low=mid+1; //¼ÌĞøÔÚ[mid+1..high]ÖĞ²éÕÒ
                }
               }                      
              
               return ERR_FAIL; //µ±low>highÊ±±íÊ¾²éÕÒÇø¼äÎª¿Õ£¬²éÕÒÊ§°Ü
              }
              #endif
2126          
2127          /***********************************************************************************************
2128           ¹¦ÄÜ£º½«OEM±àÂëµÄ×Ö·û´®×ªÎªÓÉUNICODE±àÂëµÄ×Ö·û´®
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 36  

2129           ĞÎ²Î£ºoemstr:Ö¸Ïòoem±àÂëµÄ×Ö·û´®  unistr:Ö¸ÏòUNICODE±àÂëµÄ×Ö·û´®
2130           ·µ»Ø£ºÔËĞĞ½á¹û  ³É¹¦ ×Ö·û¼¯²»ÍêÕû »ò ³¤Ãû»º³åÒç³ö
2131           Ïê½â£ºÒıÈë³¤ÎÄ¼şÃûÖ®ºó£¬Éæ¼°µ½³¤ÎÄ¼şÃûµÄ±È¶ÔºÍÆ¥Åä£¬Òò´Ë±ØÈ»Òª½«oem±àÂëµÄ×Ö·û´®×ªÎªUNICODE±àÂë
2132                 µÄ×Ö·û´®£¬ÒÔ±ãÓëÓÉ³¤ÃûÏîÖĞÌáÈ¡Æ´½Ó¶ø³ÉµÄUNICODE×Ö·û´®½øĞĞ±È¶Ô¡£
2133          ************************************************************************************************/
2134          #ifdef OEMSTRTOUNISTR
              UINT8 oemstr2unistr(INT8 *oemstr,UINT16 *unistr)
              {
               UINT32 len=StringLen(oemstr);
               UINT32 i=0,pos=0;
               UINT8 res=0;
               UINT16 temp=0;
              
               for(i=0;i<len;i++)
               {
                if(IS_ASC(oemstr[i])) //¼ì²éÊÇ·ñÊÇASCIIÂë£¬ASCIIÂëµÄÊıÖµ·¶Î§Îª0X00~0X7F£¬OEM±àÂëÖµ²»ÔÚ´Ë·¶Î§£¬ÒÔ´ËÇø·ÖÊÇ
             -ASCII»¹ÊÇOEM
                {
                 unistr[pos]=(UINT16)(((UINT16)oemstr[i])&0X00FF);
                 pos++;
                }
                #ifdef USE_OEM_CHAR
                else //²»ÊÇASCIIÂë£¬¶øÊÇOEM±àÂë
                {
                 temp=((((UINT16)oemstr[i])<<8)&0xff00);
                 temp|=(((UINT16)oemstr[i+1])&0x00ff);
                 res=OEM2UNI(temp,unistr+pos);
                 if(res) 
                 {
                  unistr[0]=0;
                  return ERR_OEM_CHAR_NOT_COMPLETE;
                 }
                 pos++;i++;
                }
                #endif
              
                if(pos>MAX_LFN_LEN) 
                {
                 unistr[0]=0;
                 return ERR_LFN_BUF_OUT; 
                }
               }
              
               unistr[pos]=0;
              
               return ERR_SUCC;
              }
              #endif
2176          
2177          /***********************************************************************************************
2178           ¹¦ÄÜ£º¶Ô¿í×Ö·û´®£¨¼´Ã¿¸ö×Ö·û¾ùÕ¼ÓÃÁ½¸ö×Ö½Ú£¬ÈçUNICODE£©½øĞĞ×Ó´®²éÕÒ
2179           ĞÎ²Î£ºstr:Ö¸Ïò¿í×Ö·û´®µÄÖ¸Õë  substr:Ö¸Ïò×Ó´®µÄÖ¸Õë  pos:Òª²éÕÒµÄÆğÊ¼Î»ÖÃ
2180           ·µ»Ø£º×Ó´®ÔÚ¿í×Ö·û´®ÖĞµÄÆğÊ¼Î»ÖÃ£¬Èç¹ûÎ´ÕÒµ½£¬Ôò·µ»Ø-1
2181           Ïê½â£º´Ëº¯Êı»ù±¾ÓëÇ°ÃæSFNµÄÆ¥ÅäÖĞµÄ²éÕÒ×Ó´®µÄº¯ÊıÍ¬Àí£¬Ö»²»¹ı×Ö·û´®±»À©Õ¹ÎªÁË¿í×Ö·û´®
2182          ************************************************************************************************/
2183          #ifdef WFINDSUBSTR
              UINT32 WFindSubStr(UINT16 *str,UINT16 *substr,UINT32 pos)
              {
               UINT32 i=pos,j=0,lens=WStringLen(str),lent=WStringLen(substr);
              
               while(i<lens && j<lent)
               {
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 37  

                if(WLower2Up(str[i])==substr[j] || (UINT16)'?'==substr[j])
                {
                 i++;
                 j++;
                }
                else
                {
                 i=i-j+1;
                 j=0;
                }
               }
              
               if(j==lent) return i-lent; 
               else return (UINT32)-1;
              }
              #endif
2206          
2207          /***********************************************************************************************
2208           ¹¦ÄÜ£º¶ÔÁ½¸ö¿í×Ö·û´®½øĞĞÆ¥Åä£¬ÊµÎª³¤ÎÄ¼şÃûµÄÍ¨Åä±È¶Ô
2209           ĞÎ²Î£ºt:Ö¸ÏòÄ£°æ¿í×Ö·û´®µÄÖ¸Õë  s:Ö¸Ä¿±ê×Ö·û´®µÄÖ¸Õë  Àıt:ÕñÄÏ*ÎŞÏŞ.txt s:ÕñÄÏµç×ÓÔ­´´ÎŞÏŞ.txt
2210                 ËüÃÇÊÇÆ¥ÅäµÄ¡£
2211           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»òÊ§°Ü
2212           Ïê½â£º´Ëº¯Êı»ù±¾ÓëÇ°ÃæSFNµÄÆ¥Åäº¯ÊıSFN_MatchÍ¬Àí¡£
2213          ************************************************************************************************/
2214          #ifdef LFN_MATCH
              UINT8 LFN_Match(UINT16 *t,UINT16 *s)
              {
               UINT32 i=0,j=0,lens=WStringLen(s),lent=WStringLen(t);
               UINT16 bufp=0;
              
               UINT16 buf[MAX_LFN_LEN+1];
              
               //======================================================
               
               while(j<lent && (UINT16)'*'!=t[j])
               {
                buf[bufp]=WLower2Up(t[j]);
                bufp++;
                j++;
               }
              
               if(0==t[j] && (lent!=lens)) return ERR_FAIL;
              
               buf[bufp]=0;
               
               if(WFindSubStr(s,buf,0)!=0) return ERR_FAIL;
               i=bufp;
               
               while(1)
               {
                while(j<lent && (UINT16)'*'==t[j]) j++;
                if(j==lent) return ERR_SUCC;
                bufp=0;
              
                while(j<lent && (UINT16)'*'!=t[j])
                {
                 buf[bufp]=(UINT16)WLower2Up(t[j]);
                 bufp++;
                 j++;
                }
                buf[bufp]=0;
                
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 38  

                if(j==lent)
                {
                 if(WFindSubStr(s,buf,i)!=(lens-bufp)) return ERR_FAIL;
                 return 0;
                }
              
                i=WFindSubStr(s,buf,i);
                if(((UINT32)(-1))==i) return ERR_FAIL;
                i+=bufp;
               }
              }
              #endif
2264          
2265          /***********************************************************************************************
2266           ¹¦ÄÜ£º´Ó¶ÌÃûÎÄ¼şÄ¿Â¼ÏîÖĞ»ñÈ¡°ó¶¨Ğ£ÑéºÍ
2267           ĞÎ²Î£ºpdi:Ö¸Ïò¶ÌÃûÎÄ¼şÄ¿Â¼ÏîµÄÖ¸Õë 
2268           ·µ»Ø£º°ó¶¨Ğ£ÑéºÍµÄÖµ
2269           Ïê½â£º´Ëº¯ÊıËùÊ¹ÓÃµÄĞ£ÑéËã·¨À´×ÔÓÚÎ¢ÈíµÄFAT32Ïà¹ØÎÄµµ¡£Ò»¸öÎÄ¼şµÄÎÄ¼şÃûÈç¹ûÎª³¤ÎÄ¼şÃû£¬ÔòËü½«ÓĞ
2270                 Èô¸É¸ö³¤ÃûÏîÀ´¹²Í¬±í´ï³¤Ãû£¬Í¬Ê±»¹ÓĞÓëÖ®¶ÔÓ¦µÄ¶ÌÃûÏî¡£±ÈÈç ABCDEFGHI.RMVB ÓĞ2¸ö³¤ÃûÏî£¨Ã¿
2271                 ¸ö³¤ÃûÏî¿É¼ÇÂ¼13¸öUNICODEÂë£©£¬ÓëÖ®¶ÔÓ¦µÄ¶ÌÃû¿ÉÄÜÎªABCDEF~1.RMV¡£Í¨³£Çé¿öÏÂ£¬¶ÌÃû½ô½ô¸úÔÚ
2272                 ³¤ÃûÏîºóÃæ£¬µ«ËüÃÇÖ®¼ä²¢²»¹â¿¿Î»ÖÃ¹ØÏµÀ´±£Ö¤ÆäÁªÏµ£¬»¹ÓĞÒ»ÖÖ°ó¶¨Ğ£ÑéºÍËã·¨£ºÍ¨¹ı¶ÌÃû¿ÉÒÔ
2273                 ¼ÆËãµÃµ½Ò»¸öÖµ£¬³¤ÃûÏîÖĞÓĞ×¨ÃÅµÄ×Ö¶ÎÒ²¼ÇÂ¼ÁËÕâ¸öÖµ£¬Èç¹ûÕâÁ½¸öÖµÏàµÈ£¬ÔòÈÏÎª³¤ÃûÏîÓë¶ÌÃû
2274                 ÏîÊÇÓĞ¹ØÁªµÄ£¬Åä¶Ô³É¹¦¡£
2275          ************************************************************************************************/
2276          #ifdef GET_BINDING_SUMCHK
              UINT8 Get_Binding_SumChk(struct FDI *pdi)
              {
               UINT8 i=0,c=0;
              
               for(i=0;i<11;i++)
               {
                c=(UINT8)(((c&0X01)?0X80:0)+(c>>1)+((pdi->Name)[i]));
               }
              
               return c;
              }
              #endif
2289          
2290          /***********************************************************************************************
2291           ¹¦ÄÜ£ºELF¹şÏ£Ëã·¨£¬ÓÃÓÚÓÉÒ»¸ö×Ö·û´®¼ÆËãµÃµ½Ò»¸öÖµ£¬Õâ¸öÖµÓë×Ö·û´®ÊÇÎ¨Ò»¶ÔÓ¦µÄ
2292           ĞÎ²Î£ºstr:Ö¸Ïò×Ö·û´®µÄÖ¸Õë
2293           ·µ»Ø£º¼ÆËãµÃµ½µÄ¹şÏ£Öµ
2294           Ïê½â£ºÔÚ´´½¨ÎÄ¼şºÍÄ¿Â¼Ê±£¬Èç¹ûÊÇ³¤Ãû£¬ÔÚÏòÄ¿Â¼´ØÖĞĞ´Èë³¤ÃûÏîµÄÍ¬Ê±£¬Ò²ÒªĞ´ÈëÆä¶ÔÓ¦µÄ¶ÌÃûÏî£¬¶ø
2295                 ¶ÌÃûÈçºÎÈ·¶¨£¨FAT32ÖĞÊ¹ÓÃ¼ÓÊı×Öºó×ºµÄ·½·¨£¬ÈçXXXXXX~n.YYY£¬µ«n<=5£¬n>5µÄÊ±ºò¾ÍĞèÒªÒ»ÖÖËã
2296                 ·¨ÓÉ³¤ÃûÖ±½Ó¼ÆËãµÃµ½Ò»¸öÎ¨Ò»ÓëÖ®¶ÔÓ¦µÄ¶ÌÎÄ¼şÃû£¬´ËËã·¨¼´¿ÉÓÉHASHËã·¨À´ÊµÏÖ£©¡£ELF¹şÏ£ÊÇ
2297                 ÖÚ¶à¹şÏ£Ëã·¨ÖĞÓÃµÃ±È½Ï¹ã·ºµÄ£¬Ëü¸ßĞ§¶øÇÒ±£Ö¤ÁË¹şÏ£ÖµÓë×Ö·û´®µÄÎ¨Ò»¶ÔÓ¦£¨²»Í¬µÄ×Ö·û´®ÓµÓĞ
2298                 ÏàÍ¬µÄ¹şÏ£ÖµµÄ¸ÅÂÊÊÇ¼«Ğ¡µÄ£©¡£»ùÓÚÕâ¸öÎ¨Ò»µÄ¹şÏ£ÖµÎÒÃÇ¿ÉÒÔ¿ìËÙ¹¹Ôì³ö³¤Ãû¶ÔÓ¦µÄ¶ÌÃû¡£
2299          ************************************************************************************************/
2300          #ifdef  ELFHASH
              UINT32 ELFHash(INT8 *str)
              {
               UINT32 hash=0;
               UINT32 x=0;
              
               while(*str)
               {
                hash=(hash<<4)+(*str++); //hash×óÒÆ4Î»£¬µ±Ç°×Ö·ûASCII´æÈëhashµÍËÄÎ»¡£ 
                x=hash&0xF0000000;
                if(0!=x)
                { //Èç¹û×î¸ßµÄËÄÎ»²»Îª0£¬ÔòËµÃ÷×Ö·û¶àÓà7¸ö£¬Èç¹û²»´¦Àí£¬ÔÙ¼ÓµÚ¾Å¸ö×Ö·ûÊ±£¬µÚÒ»¸ö×Ö·û»á±»ÒÆ³ö£¬Òò´ËÒªÓĞÈç
             -ÏÂ´¦Àí¡£
                  //¸Ã´¦Àí£¬Èç¹û¶ÔÓÚ×Ö·û´®(a-z »òÕßA-Z)¾Í»á½ö½öÓ°Ïì5-8Î»£¬·ñÔò»áÓ°Ïì5-31Î»£¬ÒòÎªCÓïÑÔÊ¹ÓÃµÄËãÊıÒÆÎ»
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 39  

                 hash ^= (x >> 24);
                 //Çå¿Õ28-31Î»¡£
                 hash &= ~x;
                }
               }
              
               //·µ»ØÒ»¸ö·ûºÅÎ»Îª0µÄÊı£¬¼´¶ªÆú×î¸ßÎ»£¬ÒÔÃâº¯ÊıÍâ²úÉúÓ°Ïì¡£(ÎÒÃÇ¿ÉÒÔ¿¼ÂÇ£¬Èç¹ûÖ»ÓĞ×Ö·û£¬·ûºÅÎ»²»¿ÉÄÜÎª¸º)
               return (hash&0X7FFFFFFF);
              }
              #endif
2323          
2324          /***********************************************************************************************
2325           ¹¦ÄÜ£º½«Ò»¸ö32Î»µÄÕûĞÎÖµ×ªÎª16½øÖÆ×Ö·û´® Àı£º0X12345678×ªÎª"12345678"
2326           ĞÎ²Î£ºhex:Ò»¸ö32Î»µÄÕûĞÎÊı str:Ö¸Ïò×Ö·û´®µÄÖ¸Õë
2327           ·µ»Ø£º0
2328           Ïê½â£º´Ëº¯ÊıÓÃÓÚ½«ÉÏÃæµÄ¹şÏ£º¯Êı¼ÆËãµÃµ½µÄ32Î»µÄ¹şÏ£Öµ×ªÎª×Ö·û´®£¬ÒÔ±ã½øĞĞ¶ÌÎÄ¼şÃûµÄ¹¹Ôì¡£
2329          ************************************************************************************************/
2330          #ifdef HEX2STR_32B
              UINT8 Hex2Str_32b(UINT32 hex,INT8 *str)
              {
               UINT8 i=0,temp=0;
               for(i=0;i<8;i++)
               {
                temp=((unsigned char)((hex&(0X0000000F<<(i*4)))>>(i*4)));
                str[7-i]=(INT8)((temp>=10)?('A'+temp-10):(temp+0X30));  
               }
               str[i]=0;
               
               return 0;
              }
              #endif
2344          
2345          /***********************************************
2346           ¹¦ÄÜ£ºÓÉ³¤Ãû¹¹ÔìÆä¶ÔÓ¦µÄ¶ÌÃû
2347           ĞÎ²Î£ºpfn:Ö¸ÕëÏò³¤ÃûµÄÖ¸Õë psfn:Ö¸Ïò¶ÌÃûµÄÖ¸Õë
2348           ·µ»Ø£º0
2349           Ïê½â£º´Ëº¯Êı»¹ĞèÒª½øÒ»²½ĞŞ¸Ä£¬µ«Ôİ¿ÉÓÃ¡£
2350          ************************************************/
2351          #ifdef MAKE_SHORT_NAME
              UINT8 Make_Short_Name(char *pfn,char *psfn) //´Ëº¯ÊıÓÃÓÚÉú³É³¤Ãû¶ÔÓ¦µÄ¶ÌÃû£¬Ê¹ÓÃÁËELFHASHËã·¨ÓÃÓÚÉú³ÉÎ¨Ò»µ
             -Ä¶ÌÃû
              {
               //psfn[0]=Lower2Up(pfn[0]);
               //psfn[1]='~';
               UINT32 temp=ELFHash(pfn);
               Hex2Str_32b(temp,psfn);
               //psfn[0]='*';
               psfn[8]='.';
               psfn[9]=psfn[10]=psfn[11]='A';
               psfn[12]=0;
              
               return 0;
              }
              #endif
2366          
2367          /******************************************************************************
2368           ¹¦ÄÜ£º¹¹ÔìµÚn¸ö³¤ÃûÏî
2369           ĞÎ²Î£ºunifn:Ö¸ÏòUNICODE±àÂëµÄ³¤ÎÄ¼şÃû plfni:Ö¸ÏòÓÃÓÚ´æ´¢¹¹ÔìµÄ³¤ÃûÏîµÄ±äÁ¿Ö¸Õë 
2370                 ChkSum:ÓÉ¶ÌÃûÏî¼ÆËãµÃµ½µÄ°ó¶¨Ğ£ÑéºÍ n:Ö¸Ê¾ÊÇµÚ¼¸¸ö³¤ÃûÏî
2371           ·µ»Ø£º0
2372           Ïê½â£º¹¹Ôì³¤ÃûÏîÊÇznFATÖĞÊµÏÖ³¤ÎÄ¼şÃûµÄÒ»¸ö¹Ø¼ü¹¦ÄÜº¯Êı
2373          *******************************************************************************/
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 40  

2374          #ifdef FILL_LFN_FDI
              UINT8 Fill_LFN_FDI(UINT16 *unifn,struct LFN_FDI *plfni,UINT8 ChkSum,UINT8 n)
              {
               UINT8 temp=(UINT8)(n*13),i=0,j=0;
               UINT16 len=(UINT16)WStringLen(unifn+temp);
              
               (plfni->AttrByte[0])=(UINT8)(n+1); //³¤ÃûÏîµÄĞòºÅ×Ö½Ú
               if(len<=13) (plfni->AttrByte[0])|=0X40; //Èç¹û·¢ÏÖ´Óµ±Ç°Î»ÖÃ¿ªÊ¼µÄUNI´®³¤¶ÈĞ¡ÓÚµÈÓÚ13£¬ÔòËµÃ÷ÊéÕâÊÇ×îºóÒ»
             -¸ö³¤ÃûÏî
              
               (plfni->ChkVal[0])=ChkSum; //Ğ´ÈëÓëSFNµÄ°ó¶¨Ğ£ÑéÖµ
               (plfni->LFNSign[0])=0X0F; //³¤ÃûÏîµÄ±êÖ¾
              
               (plfni->Resv[0])=(plfni->StartClu[0])=(plfni->StartClu[1])=0;
              
               for(i=0;i<10;i++) (plfni->Name1)[i]=0XFF; 
               for(i=0;i<12;i++) (plfni->Name2)[i]=0XFF;
               for(i=0;i<4;i++)  (plfni->Name3)[i]=0XFF; //ÏÈ°Ñ³¤ÃûUNIµÄ×Ö¶ÎÓÃ0XFFÌî³ä
               
               for(i=0;i<5;i++)
               {
                (plfni->Name1)[2*i]=(UINT8)(unifn[j+temp]&0X00FF);
                (plfni->Name1)[2*i+1]=(UINT8)((unifn[j+temp]&0XFF00)>>8);
                j++;
                if(j>=len) 
                {
                 if(4==i) 
                 {
                  (plfni->Name2)[0]=(plfni->Name2)[1]=0;
                 }
                 else
                 {
                i++;
                  (plfni->Name1)[2*i]=(plfni->Name1)[2*i+1]=0;
                 }
                 return ERR_SUCC; 
                }
               }
              
               for(i=0;i<6;i++)
               {
                (plfni->Name2)[2*i]=(UINT8)(unifn[j+temp]&0X00FF);
                (plfni->Name2)[2*i+1]=(UINT8)((unifn[j+temp]&0XFF00)>>8);
                j++;
                if(j>=len)
                {
                 if(5==i) 
                 {
                  (plfni->Name3)[0]=(plfni->Name3)[1]=0;
                 }
                 else
                 {
                i++;
                  (plfni->Name2)[2*i]=(plfni->Name2)[2*i+1]=0;
                 }
                 return ERR_SUCC; 
                }
               }
              
               for(i=0;i<2;i++)
               {
                (plfni->Name3)[2*i]=(UINT8)(unifn[j+temp]&0X00FF);
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 41  

                (plfni->Name3)[2*i+1]=(UINT8)((unifn[j+temp]&0XFF00)>>8);
                j++;
                if(j>=len)
                {
                 if(1!=i) 
                 {
                i++;
                  (plfni->Name3)[2*i]=(plfni->Name3)[2*i+1]=0;
                 }
                 return ERR_SUCC; 
                }
               }
               
               return ERR_SUCC;
              }
              #endif
2451          
2452          /********************************************************************************
2453           ¹¦ÄÜ£ºÏòÄ¿Â¼´ØÖĞ×¢²á³¤ÃûÏî¼°Æä¶ÔÓ¦µÄ¶ÌÃûÏî£¬²¢·µ»Ø¶ÌÃûÏîËùÔÚµÄÉÈÇøÓëÉÈÇøÄÚµÄÎ»ÖÃ
2454           ĞÎ²Î£ºcluster:Òª´´½¨µÄÎÄ¼ş»òÄ¿Â¼ËùÔÚµÄÄ¿Â¼µÄÊ×´Ø pfdi:Ö¸Ïò¶ÌÃûÏîµÄÖ¸Õë 
2455                 unifn:Ö¸ÏòUNICODE±àÂëµÄ³¤ÃûµÄÖ¸Õë psec:Ö¸ÏòÓÃÓÚ´æ´¢¶ÌÃûÏîËùÔÚÉÈÇøµÄ±äÁ¿Ö¸Õë
2456                 pn:Ö¸ÏòÓÃÓÚ¼ÇÂ¼¶ÌÃûÏîÔÚÆäËùÔÚÉÈÇøÖĞµÄÎ»ÖÃµÄ±äÁ¿µÄÖ¸Õë
2457           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»ò´íÎóºÅ
2458           Ïê½â£ºÒòÎª³¤ÃûÊÇÓÉ¶à¸ö³¤ÃûÏîºÍÒ»¸ö¶ÌÃûÏîËù¹²Í¬À´½øĞĞ±í´ïµÄ£¬Òò´Ë´´½¨³¤ÃûµÄÎÄ¼ş»ò
2459                 Ä¿Â¼£¬ÆäºËĞÄ²Ù×÷¾ÍÊÇ¿ÉÒÔÒ»´ÎĞÔÏòÄ¿Â¼´ØÖĞ×¢²á¶à¸öÎÄ¼şÄ¿Â¼Ïî¡£´Ëº¯Êı»ù±¾ÉÏÊÇ
2460                 ¶ÔRefigster_FDI£¨ËüÓÃÓÚÊµÏÖÎª¶ÌÃû×¢²áÎÄ¼şÄ¿Â¼Ïî£©µÄÀ©Õ¹¡£
2461          *********************************************************************************/
2462          #ifdef REGISTER_LFN_FDI
              UINT8 Register_LFN_FDI(UINT32 cluster,struct FDI *pfdi,UINT16 *unifn,UINT32 *psec,UINT8 *pn)
              {
               UINT32 temp_sec=0,old_cluster=0;
               UINT8 iClu=0,iSec=0,iFDI=0,res=0;
               struct FDIesInSEC *pitems;
               struct FDI *pitem;
              
               struct LFN_FDI *plfni;
              
               UINT8 have_lfn=0; //ÔÚÎÄ¼şÄ¿Â¼ÏîÉ¨Ãè¹ı³ÌÖÖ£¬ÓÃÓÚ±ê¼ÇÊÇ·ñÓĞ³¤Ãû
               UINT8 is_lfn_buf_err=0,cur_binding_sumchk=0,flag=0,chksum=Get_Binding_SumChk(pfdi);
               UINT16 lfn_buf[MAX_LFN_LEN+1]; //ÓÃÓÚ×°ÔØ³¤ÃûUNIÂëµÄ»º³å
               struct LFN_FDI temp_lfni; //ÓÃÓÚ¹¹Ôì³¤ÃûÏîµÄÁÙÊ±½á¹¹Ìå±äÁ¿
              
               UINT16 len=(UINT16)WStringLen(unifn),xlen=0; //¼ÆËãUNI´®³¤¶È
               UINT8 nclu=0,nsec=0,nlfni=(UINT8)(len/13);
               if(len%13) nlfni++; //¼ÆËãUNI´®»á·ÖÎª¶àÉÙ¸ö³¤ÃûÏî
              
               //===========================================================================================
              
               if(0==pInit_Args->Free_nCluster) return ERR_NO_SPACE; //Èç¹ûÃ»ÓĞ¿Õ¼ä£¬ÔòÖ±½Ó·µ»Ø
               
               //ÒÔÏÂ´úÂë¼ì²éÊÇ·ñÒÑ¾­´æÔÚÖØ¸´µÄÎÄ¼ş»òÄ¿Â¼£¬ÒÔ¼°²éÑ¯¿ÕÎ»²¢ÌîÈëÄ¿Â¼Ïî
               do
               {
                temp_sec=SOC(cluster);
                for(iSec=0;iSec<(pInit_Args->SectorsPerClust);iSec++)
                {
                 znFAT_Device_Read_Sector(temp_sec+(UINT32)iSec,znFAT_Buffer);
                 pitems=((struct FDIesInSEC *)znFAT_Buffer);
              
                 for(iFDI=0;iFDI<NFDI_PER_SEC;iFDI++)
                 {
                pitem=&(pitems->FDIes[iFDI]); //Ö¸ÏòÒ»¸öÎÄ¼şÄ¿Â¼ÏîÊı¾İ
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 42  

              
                if((0X08!=pitem->Attributes) && (0X0F!=pitem->Attributes)  //²»ÊÇ¾í±ê¡¢²»ÊÇ³¤ÃûÏî¡¢Ã»ÓĞÉ¾³ı¡¢²»ÊÇ.Óë..
                     && (0XE5!=pitem->Name[0]) && ('.'!=pitem->Name[0])) //¼´Óöµ½Ò»¸öºÏ·¨µÄSFNÏî
                {
                 if(have_lfn && !is_lfn_buf_err) //Óöµ½SFNÏîºó£¬ËüÇ°Ãæ¿ÉÄÜÓĞ³¤ÃûÏî£¬Èç¹ûÓĞÔòÓëÊäÈëµÄUNI´®±È¶Ô£¬ÒÔÈ·¶¨ÊÇ·ñ
             -ÓĞÍ¬ÃûÎÄ¼ş»òÄ¿Â¼
                 {                               //¶øÇÒÃ»ÓĞ·¢Éúlfn_bufµÄÒç³ö´íÎó
                    if(cur_binding_sumchk==Get_Binding_SumChk(pitem)) //Èç¹ûLFNÓëSFNÄ¿Â¼Ïî°ó¶¨Ğ£ÑéºÍÏàµÈ£¬ÔòÈÏÎª³¤ÃûÓĞĞ§
                  { 
                   xlen=(UINT16)WStringLen(lfn_buf); //¼ÆËã´Ó¸÷³¤ÃûÏîºÏ³ÉºóµÄUNI´®µÄ³¤¶È
                   if(xlen==len && Memory_Compare(((UINT8 *)unifn),((UINT8 *)lfn_buf),2*((UINT32)len))) //¶ÔUNI´®½øĞĞ±È¶Ô
             -£¬³¤¶ÈºÍÄÚÈİÒªÏàµÈ
                   {
                          *psec=temp_sec+(UINT32)iSec;
                          *pn=iFDI; //¼ÇÂ¼ÖØÃûÎÄ¼şÄ¿Â¼ÏîµÄÎ»ÖÃ£¬ÒÔ±ã¶ÔÆä½øĞĞ½âÎö
                    return ERR_FDI_ALREADY_EXISTING; //ÒÑÓĞÍ¬ÃûÎÄ¼ş»òÄ¿Â¼
                   }
                  }
                 }
                       if(is_lfn_buf_err) is_lfn_buf_err=0; //»Ö¸´³¤ÃûÏîUNIÌáÈ¡µÄ´íÎó±ê¼Ç
                }
              
                  if(CHK_ATTR_LFN(pitem->Attributes) && (0XE5!=pitem->Name[0])) //ÊÇ³¤ÃûÏî£¬¶øÇÒÃ»ÓĞ±»É¾³ı
                {
                 have_lfn=1;
                 
                 plfni=(struct LFN_FDI *)pitem;
              
                   cur_binding_sumchk=(plfni->ChkVal)[0]; //»ñÈ¡³¤ÃûÏîµÄ°ó¶¨Ğ£ÑéºÍ
              
                   res=Get_Part_Name(lfn_buf,plfni,(UINT8)((((plfni->AttrByte[0])&0XBF)-1)*13)); //½«µ±Ç°LFNÏîÖĞµÄÎÄ¼şÃû
             -UNICODEÂëÆ´ÈëÁÙÊ±»º³å
                                                                                    //´ËÁÙÊ±»º³å³¤¶ÈÎªMAX_LFN_LEN£¬Èç¹ûÔ
             -½½ç£¬Ôò
                                                                                  //²»ÔÙ×°Èë£¬×îÖÕÔì³ÉLFNµÄ½Ø¶Ï¡£
                 if(res) is_lfn_buf_err=1; //·¢ÉúLFN_BUFÒç³ö´íÎó
                }
                else
                {
                 have_lfn=0;
                }
              
                if(0==(pitem->Name)[0])
                {
                   flag=1; //±ê¼Ç´ËÉÈÇøÒÑ¾­±»ĞŞ¸Ä
              
                 if(nlfni>0)
                 {
                  Fill_LFN_FDI(unifn,&temp_lfni,chksum,(UINT8)(nlfni-1));
                    Memory_Copy(((UINT8 *)pitem),((UINT8 *)(&temp_lfni)),FDI_NBYTES); //½«ºÏ³ÉµÄ³¤ÃûÏî¿½±´µ½ÉÈÇøÊı¾İÖĞ
                  nlfni--;
                 }
                 else
                 {
                  *psec=temp_sec+(UINT32)iSec;
                  *pn=iFDI; //¼ÇÂ¼¿ÕÎ»µÄÎ»ÖÃ
                  Memory_Copy(((UINT8 *)pitem),((UINT8 *)pfdi),FDI_NBYTES); //½«¶ÌÃûÏî¿½±´µ½ÉÈÇøÊı¾İÖĞ
                  znFAT_Device_Write_Sector(temp_sec+(UINT32)iSec,znFAT_Buffer);
                  return ERR_SUCC;
                 }   
                }
                 }
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 43  

              
                 if(flag) 
                 {
                znFAT_Device_Write_Sector(temp_sec+(UINT32)iSec,znFAT_Buffer);
                flag=0;
                 }
                }
                old_cluster=cluster;
                cluster=Get_Next_Cluster(cluster);
               }while(!IS_END_CLU(cluster)); //Èç¹û²»ÊÇ×îºóÒ»¸ö´Ø£¬Ôò¼ÌĞøÑ­»·
               //===========================================================
               //Èç¹ûÔËĞĞµ½ÕâÀï£¬ÔòËµÃ÷µ±Ç°´ØÖĞÒÑÎŞ¿ÕÎ»
               if(0!=pInit_Args->Free_nCluster) //Èç¹ûÊ£Óà¿Õ´ØÊıÎª0£¬ÔòËµÃ÷´ÅÅÌÒÑÎŞ¿Õ¼ä
               {
                nsec=(UINT8)((nlfni+1)/NFDI_PER_SEC); //Ê£ÓàµÄ³¤ÃûÏî»¹ĞèÒª¶àÉÙ¸öÉÈÇø,+1ÊÇÒòÎª×îºó»¹ÓĞÒ»¸ö¶ÌÃûÏî
                if((nlfni+1)%NFDI_PER_SEC) nsec++; 
              
                nclu=(UINT8)(nsec/(pInit_Args->SectorsPerClust));
                if(nsec%(pInit_Args->SectorsPerClust)) nclu++;
              
                for(iClu=0;iClu<nclu;iClu++)
                {
                 Modify_FAT(old_cluster,pInit_Args->Next_Free_Cluster);
                 Modify_FAT(pInit_Args->Next_Free_Cluster,0X0FFFFFFF); //¹¹ÔìFAT´ØÁ´
                 Clear_Cluster(pInit_Args->Next_Free_Cluster); //Çå¿Õ¿ÕÏĞ´Ø
              
                 temp_sec=SOC(pInit_Args->Next_Free_Cluster);
              
                 old_cluster=pInit_Args->Next_Free_Cluster;
                 Update_Next_Free_Cluster();
              
                 for(iSec=0;iSec<(pInit_Args->SectorsPerClust);iSec++)
                 {
                  znFAT_Device_Read_Sector(temp_sec+(UINT32)iSec,znFAT_Buffer);
                pitems=((struct FDIesInSEC *)znFAT_Buffer);
                  
                for(iFDI=0;iFDI<NFDI_PER_SEC;iFDI++)
                {
                 pitem=&(pitems->FDIes[iFDI]); //Ö¸ÏòÒ»¸öÎÄ¼şÄ¿Â¼ÏîÊı¾İ
              
                 if(nlfni>0)
                 {
                  Fill_LFN_FDI(unifn,&temp_lfni,chksum,(UINT8)(nlfni-1));
                    Memory_Copy(((UINT8 *)pitem),((UINT8 *)(&temp_lfni)),FDI_NBYTES); //½«ºÏ³ÉµÄ³¤ÃûÏî¿½±´µ½ÉÈÇøÊı¾İÖĞ
                  nlfni--;
                 }
                 else
                 {
                  *psec=temp_sec+(UINT32)iSec;
                  *pn=iFDI; //¼ÇÂ¼¿ÕÎ»µÄÎ»ÖÃ
                  Memory_Copy(((UINT8 *)pitem),((UINT8 *)pfdi),FDI_NBYTES); //½«¶ÌÃûÏî¿½±´µ½ÉÈÇøÊı¾İÖĞ
                  znFAT_Device_Write_Sector(temp_sec+(UINT32)iSec,znFAT_Buffer);
                  return ERR_SUCC;
                 }
                }
                znFAT_Device_Write_Sector(temp_sec+(UINT32)iSec,znFAT_Buffer);
                 }   
                }
                return ERR_SUCC;  
               }
               else
               {
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 44  

                return ERR_NO_SPACE;
               } 
              }
              #endif
2621          
2622          //===================ÒÔÉÏ´úÂëÓÃÓÚÊµÏÖ³¤ÎÄ¼şÃû¹¦ÄÜ===for LFN=======================================
2623          
2624          /************************************************************************************
2625           ¹¦ÄÜ£º´ò¿ªÎÄ¼ş
2626           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë filepath:ÎÄ¼şµÄÂ·¾¶ n:ĞòºÅ is_file:Òª´ò¿ªÊÇ·ñÊÇÎÄ¼ş
2627           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦ »ò ´íÎóÂë
2628           Ïê½â£º´Ëº¯ÊıµÄ¹¦ÄÜ±È½Ï¶àÑùĞÔ£¬ÎÄ¼şµÄÂ·¾¶Ö§³ÖÎŞÏŞÉî²ãÄ¿Â¼ Èç /a/b/c/d/e/f/g/..../a.txt
2629                 Â·¾¶ÖĞµÄÄ¿Â¼·Ö¸ô·û¿ÉÒÔÎª/»ò\£¨ÔÚCÖĞ×Ö·û´®ÖĞ±í´ï\ÒªÕâÑùĞ´\\£©£¬ÎÄ¼şÃûÖĞÖ§³ÖÄÜÅä
2630                 ·û£¬Èç/a/b/c/d/.../a*.txt /??abc.txt £¬ÎÄ¼şÃûÖ§³Ö³¤ÎÄ¼şÃû£¬¶øÇÒÎŞÂÛ³¤Ãû¶ÌÃû¾ùÖ§
2631                 ³ÖÍ¨Åä£¬ÔÚÊ¹ÓÃÍ¨ÅäÎÄ¼şÃûÊ±£¬ÓëÖ®Æ¥ÅäµÄÎÄ¼ş¿ÉÄÜ»áÓĞ¶à¸ö£¬nÓÃÒÔÖ¸¶¨Òª´ò¿ªµÄÊÇµÚ¼¸
2632                 ¸öÎÄ¼ş£¬´Ëº¯ÊıÒà¿É´ò¿ªÄ¿Â¼£¬ÎÄ¼ş»òÄ¿Â¼´ò¿ªºó£¬ÆäĞÅÏ¢½«±»×°Èëµ½pfiËùÖ¸ÏòµÄÎÄ¼ş
2633                 ĞÅÏ¢¼¯ºÏÖĞ¡£×¢£º¶ÔÓÚÄ¿Â¼ËäÈ»´æ´¢ĞÎÊ½ÉÏÓëÎÄ¼şÏàËÆ£¬¶¼ÊÇÒÔÎÄ¼şÄ¿Â¼ÏîÀ´´æ´¢£¬µ«Ëü
2634                 Ã»ÓĞÎÄ¼ş´óĞ¡µÈ×Ö¶Î£¨ºã¶¨Îª0£©¡£
2635               is_file: Çø±ğÒª´ò¿ªµÄÊÇÎÄ¼ş²»ÊÇÄ¿Â¼   1£º´ò¿ªµÄÊÇÎÄ¼ş  0£º´ò¿ªµÄÊÇÄ¿Â¼
2636               
2637               ·µ»ØÖµ£º0£º³É¹¦   1£ºÎÄ¼ş²»´æÔÚ   2£ºÄ¿Â¼²»´æÔÚ
2638          *************************************************************************************/
2639          #ifdef ZNFAT_OPEN_FILE 
2640          UINT8 znFAT_Open_File(struct FileInfo *pfi,INT8 *filepath,UINT32 n,UINT8 is_file)
2641          {
2642   1       UINT8 result=0,flag=0;
2643   1       UINT32 sec_temp=0,Cur_Cluster=0,fn_pos=0,item=0;
2644   1       UINT32 iSec=0,iFDI=0;
2645   1      
2646   1       //===========for LFN=======
2647   1       #ifdef USE_LFN
               struct LFN_FDI *plfni;
              
               UINT8 cur_binding_sumchk=0;
               UINT8 is_wfn=0;
               UINT16 temp_lfn[MAX_LFN_LEN+1]; //ÓÃÓÚ×°ÔØ³¤ÃûUNICODEÂëµÄÁÙÊ±»º³å
               UINT8 is_lfn=0; //ÊäÈëµÄÎÄ¼şÃûÊÇ·ñÊÇ³¤Ãû
               UINT8 is_lfn_buf_err=0; //²úÉú³¤Ãû»º³åÒç³ö´íÎó£¬´Ë±ê¼ÇÎª1ÔòÖ±½ÓÌø¹ı³¤Ãû±È¶Ô
               #endif
2656   1       //===========for LFN=======
2657   1      
2658   1       INT8 temp_filename[13];
2659   1       INT8 *filename;
2660   1      
2661   1       struct FDIesInSEC *pitems; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÉÈÇøÊı¾İµÄÖ¸Õë
2662   1       struct FDI *pitem; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÊı¾İµÄÖ¸Õë
2663   1      
2664   1       #ifdef USE_LFN
               pfi->have_lfn=BOOL_FALSE; //ÏÈÉè¶¨ÎÄ¼şÎŞ³¤Ãû
               #endif
2667   1      
2668   1       just_file=pfi;
2669   1      
2670   1       #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=0;
               #ifdef USE_ALONE_CCCB
               CCCB_To_Alone();
               Memory_Set((UINT8 *)pcccb_buf,sizeof(UINT32)*CCCB_LEN,0);
               #endif
               #endif
2677   1      
2678   1       #ifdef USE_EXCHANGE_BUFFER
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 45  

               #ifdef USE_ALONE_EXB
               //Memory_Set(just_file->exb_buf,512,0);
               just_file->exb_cursec=0;
               #endif
               #endif
2684   1      
2685   1       result=znFAT_Enter_Dir(filepath,&Cur_Cluster,&fn_pos); //»ñÈ¡Â·¾¶×îºóÒ»¼¶Ä¿Â¼µÄ¿ªÊ¼´Ø
2686   1       if(result) return result;
2687   1      
2688   1       filename=filepath+fn_pos; //filenameÖ¸ÏòfilepathÖĞµÄÎÄ¼şÃû
2689   1                                 //×¢£ºÈç¹û´ò¿ªµÄÊÇÄ¿Â¼£¬ÔòÂ·¾¶filepath²»ÒÔ/»ò\½áÊø£¬Èç´ò¿ªÄ¿Â¼\a\b\c 
2690   1                                 //²»ÒªĞ´³É\a\b\c\£¬ÕâÑù»áÔì³É´ò¿ªÊ§°Ü
2691   1                                 //znFATÈÏÎªÄãÒª´ò¿ªcÄ¿Â¼ÏÂµÄÒ»¸öÃû×ÖÎª¿ÕµÄÄ¿Â¼
2692   1                                 //´ò¿ªÄ¿Â¼Óë½øÈëÄ¿Â¼²»Í¬£¬½øÈëÄ¿Â¼½ö»ñÈ¡Ä¿Â¼Ê×´Ø£¬¶ø´ò¿ªÄ¿Â¼
2693   1                                 //Ôò¶ÔÄ¿Â¼½øĞĞ½âÎö£¬½«ÎÄ¼şÏà¹Ø²ÎÊıÌîÈëÎÄ¼şĞÅÏ¢¼¯ºÏ£¬ÈçÄ¿Â¼´´½¨Ê±¼äµÈ
2694   1      
2695   1       if(Check_Illegal_Char(filename)) return ERR_ILL_CHAR; //¼ì²éÎÄ¼şÃûÖĞÊÇ·ñÓĞ·Ç·¨×Ö·û£¬ÎŞÂÛ³¤Ãû»¹ÊÇ¶ÌÃû£¬»òÊ
             -ÇÍ¨ÅäÃû 
2696   1      
2697   1       //ÕâÀïÖ÷ÒªÕë¶ÔÓÚLFN¡¢SFN¼°Í¨ÅäÃû½øĞĞÏà¹Ø¼ì²â
2698   1       if(!Is_WildFileName(filename)) //Èç¹û²»ÊÇÍ¨ÅäÎÄ¼şÃû£¬¼´È·¶¨Ãû£¬ÔòĞèÒª½øĞĞÎÄ¼şÃûºÏ·¨ĞÔ¼ì²â
2699   1       {
2700   2        #ifdef USE_LFN
                if(!Is_LFN(filename)) //Èç¹û²»ÊÇ³¤Ãû,¼´ÊÇ¶ÌÃû
                {
                #endif
2704   2         //¼ì²éSFNºÏ·¨ĞÔ£¬Èô·Ç·¨ÔòÖ±½Ó·µ»Ø£¬²»ÔÙ½øĞĞºóÃæµÄ´¦Àí(´Ë´¦¶ÔSFNµÄºÏ·¨ĞÔ¼ì²é±È½ÏÑÏ¸ñ)
2705   2         //ÊÂÏÈ¼ì²éSFNµÄºÏ·¨ĞÔ£¬¼õÉÙºóÃæ´¦ÀíÉÏµÄÂé·³
2706   2      
2707   2         if(Check_SFN_Illegal_Length(filename)) return ERR_SFN_ILL_LEN; //¼ì²éSFNÊÇ·ñ·ûºÏ8.3³¤¶È
2708   2         if(Check_SFN_Dot(filename)) return ERR_SFN_DOT; //¼ì²éSFNÖĞ.ÊÇ·ñºÏ·¨ 
2709   2         if(Check_SFN_Special_Char(filename)) return ERR_SFN_SPEC_CHAR; //¼ì²éSFNÖĞÊÇ·ñÓĞÌØÊâ×Ö·û
2710   2         if(((UINT8)(-1))==Check_SFN_Illegal_Lower(filename)) return ERR_SFN_ILL_LOWER; //¼ì²éSFNÖĞÊÇ·ñÓĞ·Ç·¨µÄ´
             -óĞ¡Ğ´
2711   2      
2712   2        #ifdef USE_LFN
                }
                else //Èç¹ûÊÇ³¤Ãû
                {
                 is_lfn=1; //±ê¼ÇÊäÈëµÄÎÄ¼şÃûÎª³¤Ãû
                 result=oemstr2unistr(filename,temp_lfn);//°Ñfilename×ªÎªUNICODEÂë£¬´æÔÚtemp_lfnÀï£¬ÒÔ±ãºóÃæ½øĞĞÎÄ¼şÃû±È
             -¶Ô
              
                if(result) return result;
                }
                #endif
2722   2       }
2723   1       else //Èç¹ûÊÇÍ¨ÅäÃû£¬¼´º¬ÓĞ*»ò?
2724   1       {
2725   2        #ifdef USE_LFN
                is_wfn=1; //±êÖ¾ÊäÈëµÄÎÄ¼şÃûÎªÍ¨ÅäÃû
                is_lfn=1; //ÔÚÕâÖÖÇé¿öÏÂ£¬Ò²ÈÏÎªÊÇ³¤Ãû£¬Í¨ÅäÃûÒ²ÒªÓëLFNÏà±È¶Ô
                result=oemstr2unistr(filename,temp_lfn); //×ªÎª´øÍ¨Åä·ûµÄUNI´®
                if(result) return result; //OEM×Ö·û¼¯²»ÍêÈ«£¬OEM->UNI×ª»»ÖĞÓĞ×Ö·ûÕÒ²»µ½ »ò LFN»º³åÒç³ö
                #endif
2731   2       }
2732   1      
2733   1       //================================================
2734   1       do
2735   1       {
2736   2        sec_temp=SOC(Cur_Cluster); //µ±Ç°´ØÊ×ÉÈÇø
2737   2        for(iSec=0;iSec<(pInit_Args->SectorsPerClust);iSec++) 
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 46  

2738   2        {
2739   3         znFAT_Device_Read_Sector(sec_temp+(UINT32)iSec,znFAT_Buffer);
2740   3         pitems=(struct FDIesInSEC *)znFAT_Buffer; 
2741   3      
2742   3         for(iFDI=0;iFDI<NFDI_PER_SEC;iFDI++) //·ÃÎÊÉÈÇøÖĞ¸÷ÎÄ¼şÄ¿Â¼Ïî
2743   3         {
2744   4          pitem=&(pitems->FDIes[iFDI]); //Ö¸ÏòÒ»¸öÎÄ¼şÄ¿Â¼ÏîÊı¾İ
2745   4           
2746   4          if((is_file?CHK_ATTR_FILE(pitem->Attributes):CHK_ATTR_DIR(pitem->Attributes)) 
2747   4          && (0XE5!=pitem->Name[0]) && ('.'!=pitem->Name[0])) //ÒÀis_file¼ì²éÊôĞÔ£¬ÇÒÃ»ÓĞ±»É¾³ı
2748   4                                                              //²»ÊÇ.Óë..
2749   4          {
2750   5           To_File_Name((INT8 *)(pitem->Name),temp_filename); //½«FDIÖĞµÄÎÄ¼şÃû×Ö¶Î×ªÎª8.3ÎÄ¼şÃû
2751   5      
2752   5         #ifdef USE_LFN 
                   if(!is_lfn || is_wfn) //Èç¹ûÊäÈëµÄÎÄ¼şÃû²»ÊÇ³¤ÎÄ¼şÃû£¬¼´Îª¶ÌÎÄ¼şÃû£¬»òÕßÊÇÅäÍ¨Ãû£¬ÔòÒª½øĞĞSFN±È¶Ô
                 #endif                //Ö÷ÒªÊÇÎªÁË·ÀÖ¹¶àÓàµÄ²Ù×÷£¬Èç¹ûÊäÈëÎÄ¼şÃûÎª³¤ÎÄ¼şÃû£¬Ôò¸ù±¾²»ÓÃSFN±È¶Ô£¬¾Í
2755   5                             //Ëã±È¶Ô£¬½á¹ûÒ²Ò»¶¨ÊÇ²»Æ¥ÅäµÄ
2756   5           {
2757   6            if(!SFN_Match(filename,temp_filename)) //¶ÌÎÄ¼şÃûÍ¨Åä
2758   6          {
2759   7           if(n==item)
2760   7           {
2761   8              Analyse_FDI(pfi,pitem); //½âÎöÆ¥ÅäµÄÎÄ¼şÄ¿Â¼Ïî
2762   8            pfi->FDI_Sec=sec_temp+iSec; //ÎÄ¼şÄ¿Â¼ÏîËùÔÚµÄÉÈÇø
2763   8            pfi->nFDI=(UINT8)iFDI; //ÎÄ¼şÄ¿Â¼ÏîÔÚÉÈÇøÖĞµÄË÷Òı
2764   8      
2765   8              #ifdef USE_LFN
                    if(!pfi->have_lfn) (pfi->longname)[0]=0;
              /////////
                  file_Open_unistr2oemstr(pfi->longname);
                      #endif
2770   8      
2771   8            return ERR_SUCC;
2772   8           } 
2773   7           flag=1;
2774   7          }
2775   6         }
2776   5      
2777   5           #ifdef USE_LFN
                   if(is_lfn && (pfi->have_lfn) && !is_lfn_buf_err) //Èç¹ûÊäÈëµÄÎÄ¼şÃûÎª³¤Ãû£¬¶øÇÒÒ²·¢ÏÖÁË³¤Ãû
                 {
                  if(cur_binding_sumchk==Get_Binding_SumChk(pitem)) //Èç¹ûLFNÓëSFNÄ¿Â¼Ïî°ó¶¨Ğ£ÑéºÍÏàµÈ£¬ÔòÈÏÎª
                  {                                                 //³¤ÃûÓĞĞ§
                     if(!LFN_Match(temp_lfn,(pfi->longname))) //³¤ÎÄ¼şÃûÍ¨Åä
                   {
                    if(n==item)
                  {
                       Analyse_FDI(pfi,pitem); //½âÎöÆ¥ÅäµÄÎÄ¼şÄ¿Â¼Ïî
                     pfi->FDI_Sec=sec_temp+iSec; //ÎÄ¼şÄ¿Â¼ÏîËùÔÚµÄÉÈÇø
                     pfi->nFDI=(UINT8)iFDI; //ÎÄ¼şÄ¿Â¼ÏîÔÚÉÈÇøÖĞµÄË÷Òı
              /////////
                   file_Open_unistr2oemstr(pfi->longname);
                     return ERR_SUCC;
                  }
                    flag=1;
                   }  
                  }
                 }
              
                 if(is_lfn_buf_err) is_lfn_buf_err=0;
                   #endif
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 47  

2800   5      
2801   5         if(flag) {item++;flag=0;} //Èç¹ûLFN£¨Èç¹ûÓÃÁËLFNµÄ»°£©ÓëSFNÓĞÒ»Ïî±È¶Ô³É¹¦£¬µ«item²»Æ¥Åä£¬Ôòitem++
2802   5        }
2803   4      
2804   4          #ifdef USE_LFN
                  if((CHK_ATTR_DIR(pitem->Attributes))||(CHK_ATTR_FILE(pitem->Attributes))) //Èç¹ûÓöµ½¶ÌÃûÏî»Ö¸´³¤¶È´íÎó±ê
             -¼Ç
                    if(is_lfn_buf_err) is_lfn_buf_err=0;
              
                  if(CHK_ATTR_LFN(pitem->Attributes) && (0XE5!=pitem->Name[0]) && is_lfn) //ÊÇ³¤ÃûÏî£¬¶øÇÒÃ»ÓĞ±»É¾³ı£¬²¢
             -ÇÒÊäÈëµÄÎÄ¼şÃûÊÇ³¤Ãû
                {                                                                       //ÒòÎªÈç¹ûÎÒÃÇÊäÈëµÄÎÄ¼şÃû±¾Éí¾Í²
             -»ÊÇ³¤Ãû£¬ÄÇÎÒÃÇ¾ÍÃ»±ØÒªÈ¥¹ØĞÄ³¤ÃûÏî
                   pfi->have_lfn=1;
                 
                 plfni=(struct LFN_FDI *)pitem;
              
                 cur_binding_sumchk=(plfni->ChkVal)[0]; //»ñÈ¡³¤ÃûÏîµÄ°ó¶¨Ğ£ÑéºÍ
                  
                   result=Get_Part_Name(pfi->longname,plfni,(UINT8)((((plfni->AttrByte[0])&0XBF)-1)*13)); //½«µ±Ç°LFNÏîÖ
             -ĞµÄÎÄ¼şÃûUNICODEÂëÆ´ÈëÁÙÊ±»º³å
                                                                                    //´ËÁÙÊ±»º³å³¤¶ÈÎªMAX_LFN_LEN£¬Èç¹ûÔ
             -½½ç£¬Ôò
                                                                                  //²»ÔÙ×°Èë£¬×îÖÕÔì³ÉLFNµÄ½Ø¶Ï¡£
                 if(result) is_lfn_buf_err=1; //·¢ÉúLFN_BUFÒç³ö´íÎó
                }
                else
                {
                 pfi->have_lfn=0;
                }
                  #endif
2826   4      
2827   4         }
2828   3        }
2829   2      
2830   2        Cur_Cluster=Get_Next_Cluster(Cur_Cluster); //»ñÈ¡ÏÂÒ»´Ø
2831   2       }while(!IS_END_CLU(Cur_Cluster)); //Èç¹û²»ÊÇ×îºóÒ»¸ö´Ø£¬Ôò¼ÌĞøÑ­»·
2832   1      
2833   1       return ERR_NO_FILE;
2834   1      }
2835          #endif
2836          
2837          /************************************************************************************
2838           ¹¦ÄÜ£º»ñÈ¡Ò»¸öÄ¿Â¼µÄ¿ªÊ¼´Ø
2839           ĞÎ²Î£ºdir_name:Ä¿Â¼Ãû pCluster:Ö¸ÏòÓÃÓÚ´æ´¢´ØºÅµÄ±äÁ¿µÄÖ¸Õë ×¢£º´ËÖ¸Õë²»¹âÓÃÓÚ½«Ä¿Â¼
2840                 ËùÔÚµÄÄ¿Â¼´ØºÅ´«Èë£¬Í¬Ê±ÓÖ½ÓÊÕÄ¿Â¼µÄ¿ªÊ¼´Ø¡£±ÈÈç£ºÎÒÃÇÒª»ñÈ¡ /a/b/c cÄ¿Â¼µÄ¿ª
2841                 ´Ø£¬pClusterÊ×ÏÈ´«ÈëbµÄ¿ªÊ¼´Ø£¬È»ºó³ÌĞò»áÔÚÕâ¸ö¿ªÊ¼´Ø¼°Æäºó¼Ì´ØÖĞÑ°ÕÒÎªÃûdir_n
2842                 ameµÄÄ¿Â¼Ïî£¬ÕÒµ½ºó£¬½«Æä¿ªÊ¼Í¨¹ıpCluster´«»Ø£¬¼´pClusterËùÖ¸ÏòµÄ±äÁ¿·¢ÉúÁË¸Ä
2843                 ±ä¡£
2844           ·µ»Ø£ºÔËĞĞ½á¹û   ³É¹¦»ò´íÎóºÅ
2845           Ïê½â£º´Ëº¯ÊıµÄÊµÏÖ¹ı³ÌÓë´ò¿ªÎÄ¼ş²î²»¶à£¬¶øÇÒ±ÈËü»¹¼òµ¥Ğ©¡£dir_nameÍ¬ÑùÖ§³Ö³¤ÎÄ¼şÃû¼°
2846                 Í¨Åä¡£
2847          *************************************************************************************/
2848          #ifdef GET_DIR_START_CLUSTER
2849          UINT8 Get_Dir_Start_Cluster(INT8 *dir_name,UINT32 *pCluster) //»ñÈ¡Ä¿Â¼ÏÂÃûÎªdir_nameµÄ×ÓÄ¿Â¼µÄ¿ªÊ¼´Ø
2850          {                                                            //Ä¿Â¼µÄÊ×´Ø´æÈëpClusterËùÖ¸ÈëµÄ±äÁ¿
2851   1       UINT32 sec_temp=0;
2852   1       UINT8 iSec=0,iFDI=0;
2853   1       UINT32 Cur_Clust=*pCluster;
2854   1      
2855   1       //===========for LFN=======
2856   1       #ifdef USE_LFN
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 48  

               struct LFN_FDI *plfni;
              
               UINT8 cur_binding_sumchk=0,result=0;
               UINT16 temp_lfn[MAX_LFN_LEN+1]; //ÓÃÓÚ×°ÔØ³¤ÃûUNICODEÂëµÄÁÙÊ±»º³å
               UINT16 lfn_buf[MAX_LFN_LEN+1]; //´Ó³¤ÃûÏîÖĞÌáÈ¡µÄUNIÂë×°µ½Õâ¸ö»º³åÖĞ
               UINT8 is_lfn=0; //ÊäÈëµÄÎÄ¼şÃûÊÇ·ñÊÇ³¤Ãû
               UINT8 have_lfn=0; //ÔÚËÑË÷Ä¿Â¼ÏîÊ±·¢ÏÖÁË³¤ÃûÏî
               UINT8 is_lfn_buf_err=0; //²úÉú³¤Ãû»º³åÒç³ö´íÎó£¬´Ë±ê¼ÇÎª1ÔòÖ±½ÓÌø¹ı³¤Ãû±È¶Ô
               #endif
2866   1      
2867   1       //===========for LFN=======
2868   1      
2869   1       INT8 temp_dirname[13];
2870   1      
2871   1       struct FDIesInSEC *pitems; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÉÈÇøÊı¾İµÄÖ¸Õë
2872   1       struct FDI *pitem; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÊı¾İµÄÖ¸Õë
2873   1      
2874   1       #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=0;
               #endif
2877   1      
2878   1       if(Check_Illegal_Char(dir_name)) return ERR_ILL_CHAR; //¼ì²éÎÄ¼şÃûÖĞÊÇ·ñÓĞ·Ç·¨×Ö·û
2879   1      
2880   1       #ifdef USE_LFN
               if(!Is_LFN(dir_name)) //Èç¹û²»ÊÇ³¤Ãû,¼´ÊÇ¶ÌÃû
               {
               #endif
2884   1        //¼ì²é¶ÌÎÄ¼şÃûºÏ·¨ĞÔ£¬Èô·Ç·¨ÔòÖ±½Ó·µ»Ø£¬²»ÔÙ½øĞĞºóÃæµÄ´¦Àí(´Ë´¦¶ÔSFNµÄºÏ·¨ĞÔ¼ì²é·Ç³£ÑÏ¸ñ)
2885   1        //ÊÂÏÈ¼ì²éSFNµÄºÏ·¨ĞÔ£¬¼õÉÙºóÃæ´¦ÀíÉÏµÄÂé·³
2886   1        if(Check_SFN_Illegal_Length(dir_name)) return ERR_SFN_ILL_LEN; //¼ì²éSFNÊÇ·ñ·ûºÏ8.3³¤¶È
2887   1        if(Check_SFN_Dot(dir_name)) return ERR_SFN_DOT; //¼ì²éSFNÖĞ.ÊÇ·ñºÏ·¨  
2888   1        if(Check_SFN_Special_Char(dir_name)) return ERR_SFN_SPEC_CHAR; //¼ì²éSFNÖĞÊÇ·ñÓĞÌØÊâ×Ö·û
2889   1        if(((UINT8)(-1))==Check_SFN_Illegal_Lower(dir_name)) return ERR_SFN_ILL_LOWER; //¼ì²éSFNÖĞÊÇ·ñÓĞ·Ç·¨µÄ´ó
             -Ğ¡Ğ´
2890   1       #ifdef USE_LFN
               }
               else //Èç¹ûÊÇ³¤Ãû
               {
                is_lfn=1; //±ê¼ÇÊäÈëµÄÎÄ¼şÃûÎª³¤Ãû
                result=oemstr2unistr(dir_name,temp_lfn);//°Ñfilename×ªÎªUNICODEÂë£¬´æÔÚtemp_lfnÀï£¬ÒÔ±ãºóÃæ½øĞĞÎÄ¼şÃû±È¶
             -Ô
                if(result) return result;
               }
               #endif
2899   1      
2900   1       //================================================
2901   1       do
2902   1       {
2903   2        sec_temp=SOC(Cur_Clust); //µ±Ç°´ØÊ×ÉÈÇø
2904   2        for(iSec=0;iSec<(pInit_Args->SectorsPerClust);iSec++) 
2905   2        {
2906   3         znFAT_Device_Read_Sector(sec_temp+(UINT32)iSec,znFAT_Buffer);
2907   3         pitems=(struct FDIesInSEC *)znFAT_Buffer; 
2908   3      
2909   3         for(iFDI=0;iFDI<NFDI_PER_SEC;iFDI++) //·ÃÎÊÉÈÇøÖĞ¸÷ÎÄ¼şÄ¿Â¼Ïî
2910   3         {
2911   4          pitem=&(pitems->FDIes[iFDI]); //Ö¸ÏòÒ»¸öÎÄ¼şÄ¿Â¼ÏîÊı¾İ
2912   4           
2913   4          if((CHK_ATTR_DIR(pitem->Attributes)) && (0XE5!=pitem->Name[0])) //ÎÄ¼şÊôĞÔÎªÄ¿Â¼£¬ÇÒÃ»ÓĞ±»É¾³ı
2914   4          {
2915   5           To_File_Name((INT8 *)(pitem->Name),temp_dirname); //½«FDIÖĞµÄÄ¿Â¼Ãû×Ö¶Î×ªÎª8.3ÎÄ¼şÃû
2916   5           #ifdef USE_LFN
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 49  

                   if(!is_lfn)
                   #endif
2919   5         {
2920   6            if(!SFN_Match(dir_name,temp_dirname)) //Ä¿Â¼ÃûÆ¥Åä
2921   6          {
2922   7           //»ñÈ¡Ä¿Â¼µÄ¿ªÊ¼´Ø 
2923   7           *pCluster=(Bytes2Value(pitem->LowClust,2))|(Bytes2Value(pitem->HighClust,2)<<16); 
2924   7           return ERR_SUCC;
2925   7          }
2926   6         }
2927   5      
2928   5           #ifdef USE_LFN
                   if(is_lfn && have_lfn && !is_lfn_buf_err) //Èç¹ûÊäÈëµÄÎÄ¼şÃûÎª³¤Ãû£¬¶øÇÒÒ²·¢ÏÖÁË³¤Ãû
                 {                                         //Í¬Ê±ÓÖÃ»ÓĞ·¢Éú³¤Ãû»º³åÒç³ö´íÎó
                  if(cur_binding_sumchk==Get_Binding_SumChk(pitem)) //Èç¹ûLFNÓëSFNÄ¿Â¼Ïî°ó¶¨Ğ£ÑéºÍÏàµÈ£¬ÔòÈÏÎª
                  {                                                 //³¤ÃûÓĞĞ§
                     if(!LFN_Match(temp_lfn,lfn_buf)) //³¤ÎÄ¼şÃûÍ¨Åä
                   {
                    //»ñÈ¡Ä¿Â¼µÄ¿ªÊ¼´Ø 
                    *pCluster=(Bytes2Value(pitem->LowClust,2))|(Bytes2Value(pitem->HighClust,2)<<16); 
                  return ERR_SUCC;
                   }  
                  }
                 }
                   #endif
2942   5      
2943   5          }
2944   4      
2945   4          #ifdef USE_LFN
                if((CHK_ATTR_DIR(pitem->Attributes))||(CHK_ATTR_FILE(pitem->Attributes))) //Èç¹ûÓöµ½¶ÌÃûÏî»Ö¸´³¤¶È´íÎó±ê¼
             -Ç
                    if(is_lfn_buf_err) is_lfn_buf_err=0;
              
                  if(CHK_ATTR_LFN(pitem->Attributes) && (0XE5!=pitem->Name[0]) && is_lfn) //ÊÇ³¤ÃûÏî£¬¶øÇÒÃ»ÓĞ±»É¾³ı,ÊäÈ
             -ëµÄÃû×ÓÎª³¤Ãû
                {
                   have_lfn=1;
                 
                 plfni=(struct LFN_FDI *)pitem;
              
                 cur_binding_sumchk=(plfni->ChkVal)[0]; //»ñÈ¡³¤ÃûÏîµÄ°ó¶¨Ğ£ÑéºÍ
                  
                   result=Get_Part_Name(lfn_buf,plfni,(UINT8)((((plfni->AttrByte[0])&0XBF)-1)*13)); //½«µ±Ç°LFNÏîÖĞµÄÎÄ¼
             -şÃûUNICODEÂëÆ´ÈëÁÙÊ±»º³å
                                                                                    //´ËÁÙÊ±»º³å³¤¶ÈÎªMAX_LFN_LEN£¬Èç¹ûÔ
             -½½ç£¬Ôò
                                                                                  //²»ÔÙ×°Èë£¬×îÖÕÔì³ÉLFNµÄ½Ø¶Ï¡£
                 if(result) is_lfn_buf_err=1; //Èç¹û·¢ÉúLFN_BUFÒç³ö´íÎó
                }
                  #endif
2963   4         }
2964   3        }
2965   2      
2966   2        Cur_Clust=Get_Next_Cluster(Cur_Clust); //»ñÈ¡ÏÂÒ»´Ø
2967   2       }while(!IS_END_CLU(Cur_Clust)); //Èç¹û²»ÊÇ×îºóÒ»¸ö´Ø£¬Ôò¼ÌĞøÑ­»·
2968   1      
2969   1       return ERR_NO_DIR; 
2970   1      }
2971          #endif
2972          
2973          /************************************************************************************
2974           ¹¦ÄÜ£º½øÈëÒ»¸öÄ¿Â¼£¬ÊµÎª»ñÈ¡Ä¿Â¼µÄ¿ªÊ¼´Ø
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 50  

2975           ĞÎ²Î£ºdirpath:Ä¿Â¼µÄÂ·¾¶ pCluster:Ö¸ÏòÓÃÓÚ¼ÇÂ¼´ØºÅµÄ±äÁ¿µÄÖ¸Õë pos:Â·¾¶ÖĞÎÄ¼şÃûµÄÎ»ÖÃ
2976           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»ò´íÎóÂë
2977           Ïê½â£º´Ëº¯ÊıËäÈ»Ê¹ÓÃÕß¿É¼û£¬µ«ÓÃ´¦²»´ó¡£Ëü·µ»ØÄ¿Â¼µÄ¿ªÊ¼´Ø¡£dirpath¿ÉÒÔ´øÓĞÎÄ¼şÃû£¬Èç
2978                 /a/b/c/d/e/test.txt º¯ÊıÔËĞĞÖ®ºóposËùÖ¸ÏòµÄ±äÁ¿µÄÖµÎªtest.txtÔÚÂ·¾¶ÖĞµÄÎ»ÖÃ¡£Ö÷
2979                 ÒªÊÇ¿¼ÂÇµ½´Ëº¯ÊıÓë´ò¿ªÎÄ¼ş»òÄ¿Â¼µÄº¯ÊıÏàÅäºÏ£¬¿ÉÒÔºÜ·½±ãµÄ´ÓÂ·¾¶ÖĞÌáÈ¡ÖĞÎÄ¼şÃû
2980          *************************************************************************************/
2981          #ifdef ZNFAT_ENTER_DIR
2982          UINT8 znFAT_Enter_Dir(INT8 *dirpath,UINT32 *pCluster,UINT32 *pos) 
2983          {
2984   1       UINT8 index=0,res=0;
2985   1       UINT32 i=1;
2986   1      
2987   1       #ifndef USE_LFN
2988   1       INT8 dirname[13];
2989   1       #else
               INT8 dirname[MAX_LFN_LEN+1];
               #endif
2992   1      
2993   1       *pos=1;
2994   1       *pCluster=2;
2995   1      
2996   1       if(('\\'==dirpath[0] || '/'==dirpath[0]) && '\0'==dirpath[1]) //Èç¹ûÊÇ"\\"£¬ÔòÖ±½ÓÈ¡Ê×Ä¿Â¼´Ø£¬¼´µÚ2´Ø
2997   1       {
2998   2        return ERR_SUCC;
2999   2       }
3000   1      
3001   1       while('\0'!=dirpath[i])
3002   1       {
3003   2        if('\\'==dirpath[i] || '/'==dirpath[i])
3004   2        {
3005   3         dirname[index]='\0';
3006   3         index=0;
3007   3         
3008   3         res=Get_Dir_Start_Cluster(dirname,pCluster);
3009   3         if(res) 
3010   3         { 
3011   4        return res;  //·µ»Ø´íÎóÂë  
3012   4         }
3013   3         *pos=i+1;
3014   3        } 
3015   2        else
3016   2        {
3017   3         dirname[index]=dirpath[i];
3018   3         index++;
3019   3         #ifndef USE_LFN
3020   3         if(index>12) //Èç¹û²»Ê¹ÓÃ³¤Ãû£¬ÔòÄ¿Â¼ÃûÒÔ¼°ÎÄ¼şÃû×î³¤²»ÄÜ³¬¹ı8+1+3
3021   3         {
3022   4        return ERR_SFN_ILL_LEN; //Ä¿Â¼Ãû³¤ÓÚ8.3£¬Òà·ÀÖ¹dirnameÒç³ö
3023   4         }
3024   3         #else
                 if(index>MAX_LFN_LEN) //Èç¹ûÊ¹ÓÃ³¤Ãû£¬ÔòÄ¿Â¼ÃûÒÔ¼°ÎÄ¼şÃû×î³¤²»ÄÜ³¬¹ıÉè¶¨µÄ³¤Ãû×î³¤³¤¶È
                 {
                return ERR_LFN_BUF_OUT; //Ä¿Â¼Ãû³¤ÓÚMAX_LFN_LEN£¬Òà·ÀÖ¹dirnameÒç³ö
                 }   
                 #endif
3030   3        }
3031   2        i++;
3032   2       }
3033   1         
3034   1       return ERR_SUCC; //³É¹¦
3035   1      }
3036          #endif
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 51  

3037          
3038          /************************************************************************************
3039           ¹¦ÄÜ£ºÓÉ¸ø¶¨µÄ¶ÌÎÄ¼şÃû¼°Ê±¼äĞÅÏ¢£¬¹¹Ôì³öÒ»¸öÎÄ¼şÄ¿Â¼Ïî
3040           ĞÎ²Î£ºpfdi:Ö¸ÏòÓÃÓÚ×°ÔØÎÄ¼şÄ¿Â¼ÏîµÄ±äÁ¿µÄÖ¸Õë pfn:Ö¸ÏòÎÄ¼şÃû pdt:Ö¸ÏòÊ±¼äĞÅÏ¢ 
3041                 is_file:¹¹ÔìµÄÎÄ¼şÄ¿Â¼ÏîÓÃÓÚ±í´ïÎÄ¼ş»¹ÊÇÄ¿Â¼
3042           ·µ»Ø£º0
3043           Ïê½â£ºÔÚ¹¹ÔìÄ¿Â¼µÄÎÄ¼şÄ¿Â¼ÏîÊ±£¬ÒªÊÂÏÈÎªÆä·ÖÅäºÃ¿Õ´Ø£¬Òò´ËÒıÈëÁËis_fileÓÃÒÔÇø·Ö¡£
3044          *************************************************************************************/
3045          #ifdef FILL_FDI
              UINT8 Fill_FDI(struct FDI *pfdi,INT8 *pfn,struct DateTime *pdt,UINT8 is_file)
              {
               UINT8 dot_pos=0,have_dot=0,lowcase=0;
               UINT8 i=0,j=0,fn_len=(UINT8)StringLen(pfn);
               UINT16 time=0,date=0;
              
               Memory_Set(((UINT8 *)pfdi),FDI_NBYTES,0); //¶ÔÎÄ¼şÄ¿Â¼ÏîÇå0
              
               for(i=(UINT8)(fn_len-1);i>0;i--) //·´ÏòÑ°ÕÒ. µÚÒ»¸ö.ÊÇÖ÷ÎÄ¼şÓëÀ©Õ¹ÃûµÄ·Ö½ç
               {
                if('.'==pfn[i]) 
                {
                 dot_pos=i;
                 have_dot=1;
                 break;
                }
               } 
              
               if(have_dot) //Èç¹ûÓĞµã
               {
                //ÌîÈëÖ÷ÎÄ¼şÃû
                for(i=0;i<dot_pos;i++)
                {
                 (pfdi->Name)[i]=(INT8)Lower2Up(pfn[i]); //×ªÎª´óĞ´
                }
                for(;i<8;i++)
                {
                 (pfdi->Name)[i]=' '; //²»×ã8×Ö½Ú²¿·ÖÌîÈë¿Õ¸ñ
                }
              
                //ÌîÈëÀ©Õ¹Ãû
                for(i=(UINT8)(dot_pos+1);i<fn_len;i++)
                {
                 (pfdi->Extension)[j]=(UINT8)Lower2Up(pfn[i]); //×ªÎª´óĞ´
                 j++;
                }
                for(;j<3;j++)
                {
                 (pfdi->Extension)[j]=' '; //²»×ã8×Ö½Ú²¿·ÖÌîÈë¿Õ¸ñ
                }
               }
               else //Èç¹ûÃ»ÓĞµã
               {
                //ÌîÈëÖ÷ÎÄ¼şÃû
                for(i=0;i<fn_len;i++)
                {
                 (pfdi->Name)[i]=(UINT8)Lower2Up(pfn[i]); //×ªÎª´óĞ´
                }
                for(;i<8;i++)
                {
                 (pfdi->Name)[i]=' '; //²»×ã8×Ö½Ú²¿·ÖÌîÈë¿Õ¸ñ
                } 
                
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 52  

                //ÌîÈëÀ©Õ¹Ãû
                for(j=0;j<3;j++)
                {
                 (pfdi->Extension)[j]=' '; //À©Õ¹ÃûÌîÈë¿Õ¸ñ
                }
               }
               //=======================ÌîÈëÖ÷ÎÄ¼şÃûÓëÀ©Õ¹Ãû========
              
               pfdi->Attributes=(UINT8)(is_file?0X20:0X30); //ÉèÖÃÊôĞÔ
               //=======================ÌîÈëÊôĞÔ========
              
               lowcase=Check_SFN_Illegal_Lower(pfn); //»ñÈ¡Ö÷ÎÄ¼şÃûÓëÀ©Õ¹ÃûµÄ´óĞ¡Ğ´×´Ì¬
               if((lowcase&0X0F)==0X01) //Èç¹ûÖ÷ÎÄ¼şÃûÎªĞ¡Ğ´
               {
                pfdi->LowerCase|=0X08;
               }
               if((lowcase&0XF0)==0X10) //Èç¹ûÀ©Õ¹ÃûÎªĞ¡Ğ´
               {
                pfdi->LowerCase|=0X10;
               }
               //=======================ÌîÈë´óĞ¡Ğ´¿ØÖÆ×Ö============
              
               pfdi->CTime10ms=(UINT8)((((pdt->time).sec)%2)?0X78:0X00);
               //=======================ÌîÈë´´½¨Ê±¼ä10MSÎ»==========
              
               time=(UINT16)(MAKE_TIME((pdt->time).hour,(pdt->time).min,(pdt->time).sec));
               (pfdi->CTime)[0]=(UINT8)time;
               (pfdi->CTime)[1]=(UINT8)(time>>8);
               //=======================ÌîÈë´´½¨Ê±¼ä================
              
               date=(UINT16)(MAKE_DATE((pdt->date).year,(pdt->date).month,(pdt->date).day));
               (pfdi->CDate)[0]=(UINT8)date;
               (pfdi->CDate)[1]=(UINT8)(date>>8);
               //=======================ÌîÈë´´½¨ÈÕÆÚ================
              
               (pfdi->ADate)[0]=(UINT8)date;
               (pfdi->ADate)[1]=(UINT8)(date>>8);
               //=======================ÌîÈë·ÃÎÊÈÕÆÚ================
               
               (pfdi->MTime)[0]=(UINT8)time;
               (pfdi->MTime)[1]=(UINT8)(time>>8);
               //=======================ÌîÈëĞŞ¸ÄÊ±¼ä================ 
              
               (pfdi->MDate)[0]=(UINT8)date;
               (pfdi->MDate)[1]=(UINT8)(date>>8);
               //=======================ÌîÈëĞŞ¸ÄÈÕÆÚ================
              
               //Ìî³ä¿ªÊ¼´Ø
               if(!is_file) //Èç¹ûÊÇÄ¿Â¼£¬ÔòÔÚfdiÖĞÌî³ä¿Õ´Ø
               {
                pfdi->HighClust[0]=(UINT8)(((pInit_Args->Next_Free_Cluster)>>16)&0X000000FF);//Ä¿Â¼ÓëÎÄ¼ş²»Í¬£¬Ä¿Â¼ÔÚ´´½
             -¨Ö®³õ
                pfdi->HighClust[1]=(UINT8)(((pInit_Args->Next_Free_Cluster)>>24)&0X000000FF);//¾ÍÒªÎªÆä·ÖÅä¿Õ´Ø£¬ÎªµÄÊÇĞ
             -´Èë.Óë..
                pfdi->LowClust [0]=(UINT8)(((pInit_Args->Next_Free_Cluster)    )&0X000000FF);//ÕâÁ½¸öÌØÊâµÄÎÄ¼şÄ¿Â¼Ïî
                pfdi->LowClust [1]=(UINT8)(((pInit_Args->Next_Free_Cluster)>>8 )&0X000000FF);                           
             -                                                                                                                        
             -               
               }
              
               //ÎÄ¼ş´óĞ¡×Ö¶ÎÔİÖÃÎª0
               return 0;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 53  

              }
              #endif
3159          
3160          /************************************************************************************
3161           ¹¦ÄÜ£ºÏò¹¹ÔìºÃµÄÎÄ¼şÄ¿Â¼Ïî×¢²áµ½Ä¿Â¼´ØÖĞÈ¥
3162           ĞÎ²Î£ºcluster:Ä¿Â¼´Ø pfdi:Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîµÄÖ¸Õë psec:ÎÄ¼şÄ¿Â¼Ïî±»Ğ´µ½µÄÉÈÇøµØÖ· 
3163                 pn:ÎÄ¼şÄ¿Â¼ÏîÔÚÆäÉÈÇøÖĞµÄÎ»ÖÃ 
3164           ·µ»Ø£ºÔËĞĞ½á¹û£¬³É¹¦»ò´íÎóÎó
3165           Ïê½â£º´Ëº¯ÊıÊÇ´´½¨ÎÄ¼şºÍÄ¿Â¼µÄÖØÒªºËĞÄ²Ù×÷£¬ËüÊÇÕë¶Ô¶ÌÃûµÄ£¬ÓëRegister_LFN_FDIÏà¶ÔÓ¦
3166          *************************************************************************************/
3167          #ifdef REGISTER_FDI
              UINT8 Register_FDI(UINT32 cluster,struct FDI *pfdi,UINT32 *psec,UINT8 *pn)
              {
               UINT32 temp_sec=0,old_cluster=0;
               UINT8 iSec=0,iFDI=0;
               struct FDIesInSEC *pfdis;
              
               if(0==pInit_Args->Free_nCluster) return ERR_NO_SPACE; //Èç¹ûÃ»ÓĞ¿Õ¼ä£¬ÔòÖ±½Ó·µ»Ø
               
               //ÒÔÏÂ´úÂë¼ì²éÊÇ·ñÒÑ¾­´æÔÚÖØ¸´µÄÎÄ¼şÄ¿Â¼Ïî£¬ÒÔ¼°²éÑ¯¿ÕÎ»
               do
               {
                temp_sec=SOC(cluster);
                for(iSec=0;iSec<(pInit_Args->SectorsPerClust);iSec++)
                {
                 znFAT_Device_Read_Sector(temp_sec+(UINT32)iSec,znFAT_Buffer);
                 pfdis=((struct FDIesInSEC *)znFAT_Buffer);
                 for(iFDI=0;iFDI<NFDI_PER_SEC;iFDI++)
                 {
                  if(Memory_Compare((UINT8*)((pfdis->FDIes)+iFDI),(UINT8*)pfdi,11))  //±È½ÏÎÄ¼şÃû
                  {
                   *psec=temp_sec+(UINT32)iSec;
                   *pn=iFDI; //¼ÇÂ¼ÖØÃûÎÄ¼şÄ¿Â¼ÏîµÄÎ»ÖÃ£¬ÒÔ±ã¶ÔÆä½øĞĞ½âÎö
                   return ERR_FDI_ALREADY_EXISTING;
                  }
                  else
                  {
                 if(0==((((pfdis->FDIes)[iFDI]).Name)[0]))
                 {
                  *psec=temp_sec+(UINT32)iSec;
                  *pn=iFDI; //¼ÇÂ¼¿ÕÎ»µÄÎ»ÖÃ
              
                    znFAT_Device_Read_Sector(*psec,znFAT_Buffer);
                    Memory_Copy((UINT8*)((((struct FDIesInSEC *)znFAT_Buffer)->FDIes)+*pn),(UINT8 *)pfdi,FDI_NBYTES);
                    znFAT_Device_Write_Sector(*psec,znFAT_Buffer);
              
                  return ERR_SUCC;
                 }
                  }
                 }
                }
                old_cluster=cluster;
                cluster=Get_Next_Cluster(cluster);
               }while(!IS_END_CLU(cluster)); //Èç¹û²»ÊÇ×îºóÒ»¸ö´Ø£¬Ôò¼ÌĞøÑ­»·
               //===========================================================
               //Èç¹ûÔËĞĞµ½ÕâÀï£¬ÔòËµÃ÷µ±Ç°´ØÖĞÒÑÎŞ¿ÕÎ»
               if(0!=pInit_Args->Free_nCluster) //Èç¹ûÊ£Óà¿Õ´ØÊıÎª0£¬ÔòËµÃ÷´ÅÅÌÒÑÎŞ¿Õ¼ä
               {
                Modify_FAT(old_cluster,pInit_Args->Next_Free_Cluster);
                Modify_FAT(pInit_Args->Next_Free_Cluster,0X0FFFFFFF); //¹¹ÔìFAT´ØÁ´
                Clear_Cluster(pInit_Args->Next_Free_Cluster); //Çå¿Õ¿ÕÏĞ´Ø
              
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 54  

                *psec=SOC(pInit_Args->Next_Free_Cluster);
                *pn=0; //¼ÇÂ¼¿ÕÎ»µÄÎ»ÖÃ
              
                znFAT_Device_Read_Sector(*psec,znFAT_Buffer);
                Memory_Copy((UINT8*)((((struct FDIesInSEC *)znFAT_Buffer)->FDIes)),(UINT8 *)pfdi,FDI_NBYTES);
                znFAT_Device_Write_Sector(*psec,znFAT_Buffer);
              
                Update_Next_Free_Cluster();
              
                return ERR_SUCC;  
               }
               else
               {
                return ERR_NO_SPACE;
               } 
              }
              #endif
3236          
3237          /************************************************************************************
3238           ¹¦ÄÜ£ºÎÄ¼ş´´½¨
3239           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏÖ¸Õë pfn:Ö¸ÏòÎÄ¼şÂ·¾¶ pdt:Ö¸ÏòÊ±¼äĞÅÏ¢
3240           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»ò´íÎóÂë
3241           Ïê½â£º´Ëº¯Êı¿ÉÒÔÖ§³Ö¶ÌÃûÓë³¤Ãû£¬ÎŞÏŞÉî²ãÄ¿Â¼¡£ÎÄ¼ş´´½¨Íê³ÉÖ®ºó£¬ĞÂ½¨ÎÄ¼şµÄĞÅÏ¢½«±»
3242                 ×°ÈëÎÄ¼şĞÅÏ¢¼¯ºÏ£¬Ëæ¼´¿ÉÒÔ¶Ô´ËÎÄ¼ş½øĞĞ²Ù×÷£¬¶øÎŞĞè´ò´Îµ÷open_file´ò¿ªËü¡£Èç¹û
3243                 Òª´´½¨µÄÎÄ¼şÒÑ¾­ÓĞÖØÃû£¬Ôò·µ»ØÖØÃû´íÎó£¬²¢½«ÒÑ¾­´æÔÚµÄÎÄ¼şµÄĞÅÏ¢×°ÈëÎÄ¼şĞÅÏ¢
3244                 ¼¯ºÏ¡£Òò´ËËüÄ³Ğ©Çé¿öÏÂÒ²¿ÉÒÔÓÃÀ´³äµ±open_fileº¯Êı£ºÃ»ÓĞÖØÃûÎÄ¼ş¾Í´´½¨Ò»¸öĞÂµÄ£¬
3245                 Èç¹ûÓĞÖØÃûÎÄ¼şÔò´ò¿ª¡£
3246          *************************************************************************************/
3247          #ifdef ZNFAT_CREATE_FILE
              UINT8 znFAT_Create_File(struct FileInfo *pfi,INT8 *pfn,struct DateTime *pdt)
              {
               UINT32 Cur_Cluster=0,pos=0,sec=0;
               UINT8 res=0,n=0;
               struct FDI fdi;
               INT8 *filename;
              
               #ifdef USE_LFN
               UINT8 is_lfn=0;
               INT8 temp_filename[13];
               #endif
              
               just_file=pfi;
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=0;
               #ifdef USE_ALONE_CCCB
               CCCB_To_Alone();
               Memory_Set((UINT8 *)pcccb_buf,sizeof(UINT32)*CCCB_LEN,0);
               #endif
               #endif
              
               #ifdef USE_EXCHANGE_BUFFER
               #ifdef USE_ALONE_EXB
               //Memory_Set(just_file->exb_buf,512,0);
               just_file->exb_cursec=0;
               #endif
               #endif
              
               res=znFAT_Enter_Dir(pfn,&Cur_Cluster,&pos); //½øÈëÄ¿Â¼
               if(res)
               {
                return res;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 55  

               }
              
               filename=pfn+pos;
              
               if(Check_Illegal_Char(filename)) return ERR_ILL_CHAR; //¼ì²éÎÄ¼şÃûÖĞÊÇ·ñÓĞ·Ç·¨×Ö·û
               
               #ifdef USE_LFN
               if(!Is_LFN(filename))
               {
               #endif
                //¼ì²é¶ÌÎÄ¼şÃûºÏ·¨ĞÔ£¬Èô·Ç·¨ÔòÖ±½Ó·µ»Ø£¬²»ÔÙ½øĞĞºóÃæµÄ´¦Àí(´Ë´¦¶ÔSFNµÄºÏ·¨ĞÔ¼ì²é·Ç³£ÑÏ¸ñ)
                //ÊÂÏÈ¼ì²éSFNµÄºÏ·¨ĞÔ£¬¼õÉÙºóÃæ´¦ÀíÉÏµÄÂé·³
                if(Check_SFN_Illegal_Length(filename)) return ERR_SFN_ILL_LEN; //¼ì²éSFNÊÇ·ñ·ûºÏ8.3³¤¶È
                if(Check_SFN_Dot(filename)) return ERR_SFN_DOT; //¼ì²éSFNÖĞ.ÊÇ·ñºÏ·¨ 
                if(Check_SFN_Special_Char(filename)) return ERR_SFN_SPEC_CHAR; //¼ì²éSFNÖĞÊÇ·ñÓĞÌØÊâ×Ö·û
                if(((UINT8)(-1))==Check_SFN_Illegal_Lower(filename)) return ERR_SFN_ILL_LOWER; //¼ì²éSFNÖĞÊÇ·ñÓĞ·Ç·¨µÄ´ó
             -Ğ¡Ğ´
               #ifdef USE_LFN
               }
               else
               {
                is_lfn=1;
                res=oemstr2unistr(filename,pfi->longname); //Èç¹ûÊÇ³¤Ãû£¬Ôò½«filename×ªÎªUNI´®
                if(res) return res;
               }
              
               if(!is_lfn) //Èç¹û²»ÊÇ³¤Ãû
               {
               #endif
                Fill_FDI(&fdi,filename,pdt,BOOL_TRUE); //¹¹ÔìÎÄ¼şÄ¿Â¼Ïî
                res=Register_FDI(Cur_Cluster,&fdi,&sec,&n);//ÔÚµ±Ç°´ØÖĞ½øĞĞÎÄ¼şÄ¿Â¼ÏîµÄ"×¢²á"
              
               #ifdef USE_LFN
               }
               else //Èç¹ûÊÇ³¤Ãû
               {
                Make_Short_Name(filename,temp_filename);
                Fill_FDI(&fdi,temp_filename,pdt,BOOL_TRUE); //¹¹ÔìÎÄ¼şÄ¿Â¼Ïî
                res=Register_LFN_FDI(Cur_Cluster,&fdi,(pfi->longname),&sec,&n); //ÔÚµ±Ç°´ØÖĞ½øĞĞ³¤ÃûÏî¼°ÏàÓ¦¶ÌÃûÏî¡°×¢²á
             -¡±
               }
               #endif
               
               if(!res)
               {
                //½«ĞÂ½¨ÎÄ¼şµÄĞÅÏ¢×°ÈëÎÄ¼şĞÅÏ¢¼¯ºÏ
                #ifdef USE_LFN
                if(is_lfn)
                {
                 StringCopy(pfi->File_Name,temp_filename);
                 pfi->have_lfn=1;
                }
                else
                #endif
                {
                 StringCopy(pfi->File_Name,filename);
                }
                pfi->File_Attr=0X20;
                (pfi->File_CTime).hour=(pdt->time).hour;
                (pfi->File_CTime).min=(pdt->time).min;
                (pfi->File_CTime).sec=(pdt->time).sec;
                (pfi->File_CDate).year=(pdt->date).year;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 56  

                (pfi->File_CDate).month=(pdt->date).month;
                (pfi->File_CDate).day=(pdt->date).day;
                //(pfi->File_ADate).year=(pdt->date).year;
                //(pfi->File_ADate).month=(pdt->date).month;
                //(pfi->File_ADate).day=(pdt->date).day;
                //(pfi->File_MTime).hour=(pdt->time).hour;
                //(pfi->File_MTime).min=(pdt->time).min;
                //(pfi->File_MTime).sec=(pdt->time).sec;
                //(pfi->File_MDate).year=(pdt->date).year;
                //(pfi->File_MDate).month=(pdt->date).month;
                //(pfi->File_MDate).day=(pdt->date).day;
              
                pfi->File_StartClust=0;
                pfi->File_Size=0;
              
                pfi->File_CurClust=0;
                pfi->File_CurSec=0;
                pfi->File_CurPos=0;
              
                pfi->File_CurOffset=0;
                pfi->File_IsEOF=BOOL_TRUE;
              
                pfi->FDI_Sec=sec;
                pfi->nFDI=n;
              
                return ERR_SUCC;
               }
               else
               {
                if(res==ERR_FDI_ALREADY_EXISTING) //Èç¹ûÎÄ¼şÒÑ¾­´æÔÚ£¬ÔòÖ±½Ó½âÎöËü
                {
                 znFAT_Device_Read_Sector(sec,znFAT_Buffer); //Èç¹ûÖØÃûÎÄ¼şÄ¿Â¼ÏîËùÔÚµÄÉÈÇø
                 Analyse_FDI(pfi,(((struct FDIesInSEC *)znFAT_Buffer)->FDIes)+n); //½âÎöÆ¥ÅäµÄÎÄ¼şÄ¿Â¼Ïî
                 pfi->FDI_Sec=sec;
                 pfi->nFDI=n;
                 
                 #ifdef USE_LFN
                 if(is_lfn)
                 {
                  pfi->have_lfn=1;
                 }
                 else
                 {
                  pfi->have_lfn=0;
                 }
                 #endif 
                }
                return res;
               }
              }
              #endif
3392          
3393          /************************************************************************************
3394           ¹¦ÄÜ£ºÔÚÒ»¸öÄ¿Â¼ÖĞ´´½¨Ò»¸öÄ¿Â¼
3395           ĞÎ²Î£ºcluster:Ä¿Â¼´Ø pdn:Ö¸ÏòÄ¿Â¼Ãû pdt:Ö¸ÏòÊ±¼äĞÅÏ¢
3396           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»ò´íÎóÂë
3397           Ïê½â£ºÖ§³Ö³¤Ä¿Â¼Ãû´´½¨ cluster×îÖÕ»á·µ»ØĞÂ´´½¨µÄÄ¿Â¼µÄ¿ªÊ¼´Ø
3398                 ´Ëº¯ÊıÊÇznFATÊµÏÖ¶à¼¶Ä¿Â¼´´½¨µÄÖØÒªº¯Êı
3399          *************************************************************************************/
3400          #ifdef CREATE_DIR_IN_CLUSTER
              UINT8 Create_Dir_In_Cluster(UINT32 *cluster,INT8 *pdn,struct DateTime *pdt)
              {
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 57  

               UINT8 res=0,i=0;
               UINT32 dummy=0;
               struct FDI fdi;
              
               #ifdef USE_LFN
               UINT8 is_lfn=0; //±ê¼ÇÊäÈëµÄÄ¿Â¼ÃûÊÇ·ñ³¤Ãû
               UINT16 temp_lfn_buf[MAX_LFN_LEN+1]; //ÓÃÓÚ×°ÔØ³¤ÃûUNI´®µÄÁÙÊ±»º³å
               INT8 temp_dirname[13];
               #endif
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=0;
               #endif
              
               if(Check_Illegal_Char(pdn)) return ERR_ILL_CHAR; //¼ì²éÄ¿Â¼ÃûÖĞÊÇ·ñÓĞ·Ç·¨×Ö·û
               
               #ifdef USE_LFN
               if(!Is_LFN(pdn))
               {
               #endif
                //¼ì²é¶ÌÎÄ¼şÃûºÏ·¨ĞÔ£¬Èô·Ç·¨ÔòÖ±½Ó·µ»Ø£¬²»ÔÙ½øĞĞºóÃæµÄ´¦Àí(´Ë´¦¶ÔSFNµÄºÏ·¨ĞÔ¼ì²é·Ç³£ÑÏ¸ñ)
                //ÊÂÏÈ¼ì²éSFNµÄºÏ·¨ĞÔ£¬¼õÉÙºóÃæ´¦ÀíÉÏµÄÂé·³
                if(Check_SFN_Illegal_Length(pdn)) return ERR_SFN_ILL_LEN; //¼ì²éSFNÊÇ·ñ·ûºÏ8.3³¤¶È
                if(Check_SFN_Dot(pdn)) return ERR_SFN_DOT; //¼ì²éSFNÖĞ.ÊÇ·ñºÏ·¨ 
                if(Check_SFN_Special_Char(pdn)) return ERR_SFN_SPEC_CHAR; //¼ì²éSFNÖĞÊÇ·ñÓĞÌØÊâ×Ö·û
                if(((UINT8)(-1))==Check_SFN_Illegal_Lower(pdn)) return ERR_SFN_ILL_LOWER; //¼ì²éSFNÖĞÊÇ·ñÓĞ·Ç·¨µÄ´óĞ¡Ğ´
               #ifdef USE_LFN
               }
               else
               {
                is_lfn=1;
                res=oemstr2unistr(pdn,temp_lfn_buf); //Èç¹ûÊÇ³¤Ãû£¬Ôò½«pdn×ªÎªUNI´®
                if(res) return res;
               }
              
               if(!is_lfn) //Èç¹û²»ÊÇ³¤Ãû
               {
               #endif
                Fill_FDI(&fdi,pdn,pdt,BOOL_FALSE); //¹¹ÔìÄ¿Â¼Ïî
                res=Register_FDI(*cluster,&fdi,&dummy,&i);//ÔÚµ±Ç°´ØÖĞ½øĞĞÎÄ¼şÄ¿Â¼ÏîµÄ"×¢²á"
              
               #ifdef USE_LFN
               }
               else //Èç¹ûÊÇ³¤Ãû
               {
                Make_Short_Name(pdn,temp_dirname);
                Fill_FDI(&fdi,temp_dirname,pdt,BOOL_FALSE); //¹¹ÔìÎÄ¼şÄ¿Â¼Ïî
                res=Register_LFN_FDI(*cluster,&fdi,temp_lfn_buf,&dummy,&i); //ÔÚµ±Ç°´ØÖĞ½øĞĞ³¤ÃûÏî¼°ÏàÓ¦¶ÌÃûÏî¡°×¢²á¡±
               }
               #endif
              
               if(res)
               {
                return res;
               }
              
               //====================================================================================
              
               //ÏòÄ¿Â¼´ØÖĞĞ´Èë.Óë..
               Modify_FAT(pInit_Args->Next_Free_Cluster,0X0FFFFFFF); //¹¹ÔìFAT´ØÁ´
               Clear_Cluster(pInit_Args->Next_Free_Cluster); //Çå¿Õ¿ÕÏĞ´Ø 
              
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 58  

               //°ÑfdiÖĞµÄÃû×ÖÌæ»»Îª. ÃûÎª.µÄÄ¿Â¼Ö¸ÏòÁËÏàÇ°´Ø
               fdi.Name[0]='.';
               for(i=1;i<11;i++)
               {
                fdi.Name[i]=' '; //.ºóÃæÈ«²¿Ìî³ä¿Õ¸ñ
               }
              
               Memory_Copy(znFAT_Buffer,((UINT8 *)(&fdi)),FDI_NBYTES); //½«ÎÄ¼şÄ¿Â¼Ïî.×°Èëµ½ÄÚ²¿»º³åÇøÖĞ
              
               //°ÑfdiÖĞµÄÃû×ÖÌæ»»Îª.. ÃûÎª..µÄÄ¿Â¼Ö¸ÏòÁËÉÏÒ»´Ø(DOSÖĞÊ¹ÓÃCD..¿ÉÒÔ»Øµ½ÉÏÒ»¼¶Ä¿Â¼¾ÍÊÇÕâ¸öµÀÀí)
               fdi.Name[1]='.';
               
               //°ÑfdiÖĞµÄ´ØÖµ¸ÄÎªÉÏÒ»¼¶Ä¿Â¼µÄÊ×´Ø 
               if(2!=(*cluster)) //Èç¹ûÉÏÒ»¼¶Ä¿Â¼Ê×´Ø²»ÊÇ"¸ùÄ¿Â¼"(Ê×Ä¿Â¼)
               {
                fdi.HighClust[0]=(UINT8)(((*cluster)>>16)&0X000000FF);
                fdi.HighClust[1]=(UINT8)(((*cluster)>>24)&0X000000FF);
                fdi.LowClust [0]=(UINT8)(((*cluster)    )&0X000000FF);
                fdi.LowClust [1]=(UINT8)(((*cluster)>>8 )&0X000000FF); 
               }
               else
               {
                fdi.HighClust[0]=fdi.HighClust[1]=fdi.LowClust[0]=fdi.LowClust[1]=0;
               }
              
               Memory_Copy(znFAT_Buffer+FDI_NBYTES,((UINT8 *)(&fdi)),FDI_NBYTES); //½«ÎÄ¼şÄ¿Â¼Ïî..×°Èëµ½ÄÚ²¿»º³åÇøÖĞ
              
               znFAT_Device_Write_Sector(SOC(pInit_Args->Next_Free_Cluster),znFAT_Buffer);
              
               *cluster=(pInit_Args->Next_Free_Cluster); //·µ»ØĞÂ´´½¨µÄÄ¿Â¼Ê×´Ø
              
               Update_Next_Free_Cluster();
              
               return ERR_SUCC;
              }
              #endif
3501          
3502          /************************************************************************************
3503           ¹¦ÄÜ£º´´½¨Ä¿Â¼
3504           ĞÎ²Î£ºpdp:Ö¸ÏòÄ¿Â¼Â·¾¶ pdt:Ö¸ÏòÊ±¼äĞÅÏ¢ 
3505           ·µ»Ø£ºÔËĞĞ½á¹û  ³É¹¦»ò´íÎóÂë
3506           Ïê½â£ºÖ§³ÖÎŞÏŞÉîÄ¿Â¼´´½¨ Èç Ä¿Â¼Â·¾¶¿ÉÒÔÊÇ /a/b/c/d/e/f/g/h/ ×¢Òâ×îÖÕÒ»¶¨ÒªÒÔ/»ò"\\"
3507                 ½áÊø¡£·ñÔòznFAT»áÈÏÎª×îºóÒ»¼¶Ä¿Â¼ÃûÊÇÎÄ¼şÃû£¬¶ø²»ÓèÒÔ´´½¨¡£Ö§³Ö³¤Ä¿Â¼Ãû
3508          *************************************************************************************/
3509          #ifdef ZNFAT_CREATE_DIR
              UINT8 znFAT_Create_Dir(INT8 *pdp,struct DateTime *pdt)
              {
               UINT32 Cur_Cluster=0,i=0;
               UINT8 index=0,res=0;
              
               #ifndef USE_LFN
               UINT8 dirname[13];
               #else
               UINT8 dirname[MAX_LFN_LEN+1];
               #endif
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=0;
               #endif
              
               if(znFAT_Enter_Dir(pdp,&Cur_Cluster,&i)) //½øÈëÄ¿Â¼£¬Èç¹ûÖĞÍ¾·¢Éú´íÎó
               {                                        //±ÈÈçÄ³Ò»¼¶Ä¿Â¼Ãû²»ºÏ·¨£¬»ò
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 59  

                while('\0'!=pdp[i])                     //Ä¿Â¼²»´æÔÚ£¬Ôò½«×î½üµÄÒ»²ã
                {                                       //Ä¿Â¼µÄÊ×´Ø¼ÇÂ¼ÔÚCur_ClusterÀï
                 if('\\'==pdp[i] || '/'==pdp[i])                       //¶ø½«Ê§°ÜµÄÄÇÒ»¼¶Ä¿Â¼ÃûµÄµÚÒ»
                 {                                      //×Ö·ûµÄÎ»ÖÃ¼ÇÂ¼ÔÚiÖĞ
                  dirname[index]='\0';                  //±ÈÈç\a1\b2\c3\e4\f5\£¬Ä¿Â¼c3²»´æÔÚ
                  index=0;                              //ÔòCur_ClusterÎªÄ¿Â¼b2µÄÊ×´Ø£¬i¼ÇÂ¼µÄÊÇ'c'µÄÎ»ÖÃ¼´7
                 
                  res=Create_Dir_In_Cluster(&Cur_Cluster,(INT8 *)dirname,pdt); //ÔÚ´ØCur_ClusterÖĞ´´½¨Ä¿Â¼
                  if(res) 
                  { 
                 return res;  //·µ»Ø´íÎóÂë  
                  }
                 }
                 else
                 {
                  dirname[index]=pdp[i];
                  index++;
                  #ifndef USE_LFN
                  if(index>12) //Èç¹û²»Ê¹ÓÃ³¤Ãû£¬ÔòÄ¿Â¼ÃûÒÔ¼°ÎÄ¼şÃû×î³¤²»ÄÜ³¬¹ı8+1+3
                  {
                 return ERR_SFN_ILL_LEN; //Ä¿Â¼Ãû³¤ÓÚ8.3£¬Òà·ÀÖ¹dirnameÒç³ö
                  }
                  #else
                  if(index>MAX_LFN_LEN) //Èç¹ûÊ¹ÓÃ³¤Ãû£¬ÔòÄ¿Â¼ÃûÒÔ¼°ÎÄ¼şÃû×î³¤²»ÄÜ³¬¹ıÉè¶¨µÄ³¤Ãû×î³¤³¤¶È
                  {
                 return ERR_LFN_BUF_OUT; //Ä¿Â¼Ãû³¤ÓÚMAX_LFN_LEN£¬Òà·ÀÖ¹dirnameÒç³ö
                  }   
                  #endif
                 }
                 i++;
                }
                
                return ERR_SUCC; //³É¹¦  
               }
               else
               {
                return ERR_DIR_ALREADY_EXISTING; //Òª´´½¨µÄÄ¿Â¼ÒÑ¾­´æÔÚÁË
               }
              }
              #endif
3567          
3568          //========================ÒÔÏÂ´úÂë³¢ÊÔÊµÏÖÄ¿Â¼É¾³ı¹¦ÄÜ=====================
3569          
3570          /************************************************************************************
3571           ¹¦ÄÜ£ºÏú»ÙÒ»¸öFAT´ØÁ´
3572           ĞÎ²Î£ºcluster:´ØÁ´µÄ¿ªÊ¼´ØºÅ
3573           ·µ»Ø£º0
3574           Ïê½â£ºÕñÄÏÔ­À´Ê¹ÓÃModify_FAT+Ñ­»·À´ÊµÏÖ´Ëº¯Êı£¬Ğ§ÂÊ¼«µÍ£¬ËÙ¶ÈºÜÂı£¬ÏÖÔÚ½øĞĞÁË¸Ä½ø£¬
3575                 Ğ§ÂÊ½Ï¸ß¡£
3576          *************************************************************************************/
3577          #ifdef DESTROY_FAT_CHAIN
              UINT8 Destroy_FAT_Chain(UINT32 cluster)
              {
               UINT32 clu_sec=0,temp1=0,temp2=0,old_clu=0,nclu=1;
              
               struct FAT_Sec *pFAT_Sec;
              
               if(cluster<(pInit_Args->Next_Free_Cluster)) //Èç¹ûÒªÏú»ÙµÄ´ØÁ´Í·´Ø±ÈÏÂÒ»¿Õ´ØÖµĞ¡£¬Ôò½«ÏÂÒ»¿Õ´ØÖµÖÃÎªËü
               {
                pInit_Args->Next_Free_Cluster=cluster;
               }
              
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 60  

               old_clu=cluster;
              
               znFAT_Device_Read_Sector((old_clu/NITEMSINFATSEC)+(pInit_Args->FirstFATSector),znFAT_Buffer);
              
               pFAT_Sec=(struct FAT_Sec *)znFAT_Buffer;
              
               cluster=Bytes2Value(((pFAT_Sec->items)[cluster%NITEMSINFATSEC]).Item,4);
              
               while(!IS_END_CLU(cluster))
               {
                nclu++;
              
                clu_sec=cluster/NITEMSINFATSEC;
              
                temp1=old_clu%NITEMSINFATSEC;
                temp2=old_clu/NITEMSINFATSEC;
              
                ((pFAT_Sec->items)[temp1]).Item[0]=0;
                ((pFAT_Sec->items)[temp1]).Item[1]=0;
                ((pFAT_Sec->items)[temp1]).Item[2]=0;
                ((pFAT_Sec->items)[temp1]).Item[3]=0;
              
                if(temp2!=clu_sec)
                {     
                 znFAT_Device_Write_Sector(temp2+(pInit_Args->FirstFATSector),znFAT_Buffer);
                 znFAT_Device_Write_Sector(temp2+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
              
                 znFAT_Device_Read_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                }
              
                old_clu=cluster;
                cluster=Bytes2Value(((pFAT_Sec->items)[cluster%NITEMSINFATSEC]).Item,4);
               }
              
               temp1=old_clu%NITEMSINFATSEC;
               temp2=old_clu/NITEMSINFATSEC;
              
               ((pFAT_Sec->items)[temp1]).Item[0]=0;
               ((pFAT_Sec->items)[temp1]).Item[1]=0;
               ((pFAT_Sec->items)[temp1]).Item[2]=0;
               ((pFAT_Sec->items)[temp1]).Item[3]=0;
              
               znFAT_Device_Write_Sector(temp2+(pInit_Args->FirstFATSector),znFAT_Buffer);
               znFAT_Device_Write_Sector(temp2+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
              
               pInit_Args->Free_nCluster+=nclu; //¸üĞÂÊ£Óà¿Õ´ØÊı
              
               return ERR_SUCC;
              }
              #endif
3639          
3640          /************************************************************************************
3641           ¹¦ÄÜ£ºÏú»ÙÒ»¸öÎÄ¼şÄ¿Â¼ÏîËù¶ÔÓ¦µÄÕûÌõ´ØÁ´
3642           ĞÎ²Î£ºpitem:Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîµÄÖ¸Õë
3643           ·µ»Ø£º0
3644           Ïê½â£ºÖ÷ÒªÊÇÓÃÓÚÎÄ¼şºÍÄ¿Â¼µÄÉ¾³ı
3645          *************************************************************************************/
3646          #ifdef DESTROY_FDI
              UINT8 Destroy_FDI(struct FDI *pitem)
              {
               UINT32 start_cluster=Bytes2Value(pitem->LowClust,2)+Bytes2Value(pitem->HighClust,2)*65536;
              
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 61  

               if(0==start_cluster) return ERR_SUCC;
              
               Destroy_FAT_Chain(start_cluster); //Ïú»Ù´ØÁ´
              
               return ERR_SUCC;
              } 
              #endif
3658          
3659          /************************************************************************************
3660           ¹¦ÄÜ£º¶ÔÄ³¸öÄ¿Â¼´Ø½øĞĞËÑË÷£¬¿´ÆäÖĞÊÇ·ñÓĞÄ¿Â¼Ïî£¬¼´¸ÃÄ¿Â¼ÏÂÓĞ×ÓÄ¿Â¼£¬ËÑË÷¹ı³ÌÖĞÓöµ½µÄ
3661                 ÎÄ¼şÏî½«È«²¿Ïú»Ù¡£
3662           ĞÎ²Î£ºcluster:Òª½øĞĞËÑË÷µÄÄ¿Â¼¿ªÊ¼´ØºÅ 
3663                 for_del_dir:ÔÚÓöµ½Ä¿Â¼ÏîÖ®ºó£¬ÊÇ·µ»ØÆä¿ªÊ¼´Ø£¬»¹ÊÇ½«ÆäÖ±½ÓÏú»Ù
3664           ·µ»Ø£ºÔËĞĞ½á¹û ÕÒµ½×ÓÄ¿Â¼»òÎ´ÕÒµ½ ×¢£ºÈç¹ûÔÚÄ¿Â¼ÖĞÎ´ÕÒµ½×ÓÄ¿Â¼£¬Ôò´ËÄ¿Â¼ÖĞµÄËùÓĞÎÄ¼ş
3665                 ½«±»È«²¿Ïú»Ù£¬ÔÚÕâÖÖÇé¿öÏÂ£¬Õâ¸öÄ¿Â¼Ëæ¼´Ò²»á±»Ïú»Ù£¬È»ºó½øĞĞÄ¿Â¼»ØËİ.....
3666           Ïê½â£ºÄ¿Â¼É¾³ıµÄÏà¹ØËã·¨¾ù½ÏÎª¸´ÔÓ£¬µ«Èç¹ûÁìÎò£¬Ôò»á¾õµÃ±È½Ï¼òµ¥¡£Ä¿Â¼ÒòÎªÓĞ×ÓÄ¿Â¼
3667                 ¶øÇÒÊÇÒ»ÖÖÊ÷ĞÎµÄ½á¹¹£¬Òò´ËÉ¾³ıÄ¿Â¼µÄ¹ı³ÌÆäÊµÊÇÒ»¸ö¡°µİ¹é»ØËİ¡±µÄ¹ı³Ì£¬Ö±µ½»Øµ½
3668                 ¶¥²ãÄ¿Â¼¡£
3669          *************************************************************************************/
3670          #ifdef HAVE_ANY_SUBDIR_WITH_DEL_FOREFILE
              UINT8 Have_Any_SubDir_With_Del_ForeFile(UINT32 *cluster,UINT8 for_del_dir)
              {
               UINT8 iSec=0,iFDI=0;
               UINT32 sec_temp=0;
               UINT32 temp=*cluster;
              
               struct FDIesInSEC *pitems; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÉÈÇøÊı¾İµÄÖ¸Õë
               struct FDI *pitem; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÊı¾İµÄÖ¸Õë
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=0;
               #endif
              
               do
               {
                sec_temp=SOC(temp); //µ±Ç°´ØÊ×ÉÈÇø
                for(iSec=0;iSec<(pInit_Args->SectorsPerClust);iSec++) 
                {
                 znFAT_Device_Read_Sector(sec_temp+(UINT32)iSec,znFAT_Buffer);
                 pitems=(struct FDIesInSEC *)znFAT_Buffer; 
              
                 for(iFDI=0;iFDI<NFDI_PER_SEC;iFDI++) //·ÃÎÊÉÈÇøÖĞ¸÷ÎÄ¼şÄ¿Â¼Ïî
                 {
                  pitem=&(pitems->FDIes[iFDI]); //Ö¸ÏòÒ»¸öÎÄ¼şÄ¿Â¼ÏîÊı¾İ
              
                if((CHK_ATTR_FILE(pitem->Attributes)) && (0XE5!=pitem->Name[0])) //ÎÄ¼şÊôĞÔÎªÎÄ¼ş£¬ÇÒÃ»ÓĞ±»É¾³ı
                  {
                   Destroy_FDI(pitem); //Ïú»ÙÎÄ¼şÄ¿Â¼Ïî¼°Æä¶ÔÓ¦µÄ´ØÁ´ ×¢£ºÄÚ²¿»º³åÇøÊı¾İ±»±ä¸ü
                 znFAT_Device_Read_Sector(sec_temp+(UINT32)iSec,znFAT_Buffer); //ÖØĞÂ¶ÁÈ¡ÉÈÇøÊı¾İ£¬»Ö¸´ÄÚ²¿»º³åÇøµÄÊı¾İ
              
                 pitem->Name[0]=0XE5; //¸øÎÄ¼şÄ¿Â¼Ïî´òÉÏ"ÒÑÉ¾³ı"µÄ±ê¼Ç
                   pitem->HighClust[0]=pitem->HighClust[1]=0; //¿ªÊ¼´ØµÄ¸ß×ÖÇå0
              
                   znFAT_Device_Write_Sector(sec_temp+(UINT32)iSec,znFAT_Buffer); //Èç¹ûÓĞÏú»Ù²Ù×÷£¬Ôò»ØĞ´ÉÈÇø
                }
              
                  if((CHK_ATTR_DIR(pitem->Attributes)) && (0XE5!=pitem->Name[0]) //ÎÄ¼şÊôĞÔÎªÄ¿Â¼£¬ÇÒÃ»ÓĞ±»É¾³ı
                   && ('.'!=pitem->Name[0]))                          //²»ÊÇ.Óë..
                  { 
                 if(!for_del_dir) //²»ÊÇÎªÁË°Ñ×ÓÄ¿Â¼±¾ÉíÉ¾³ı£¬¶øÊÇÎªÁË»ñÈ¡ÆäÊ×´Ø£¬½ø¶ø½øÈë¸üÉî×ÓÄ¿Â¼
                 {
                  *cluster=Bytes2Value(pitem->LowClust,2)+Bytes2Value(pitem->HighClust,2)*65536;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 62  

                 }
                   else
                 {
                    Destroy_FDI(pitem); //Ïú»ÙÎÄ¼şÄ¿Â¼Ïî¼°Æä¶ÔÓ¦µÄ´ØÁ´ ×¢£ºÄÚ²¿»º³åÇøÊı¾İ±»±ä¸ü
                  znFAT_Device_Read_Sector(sec_temp+(UINT32)iSec,znFAT_Buffer); //ÖØĞÂ¶ÁÈ¡ÉÈÇøÊı¾İ£¬»Ö¸´ÄÚ²¿»º³åÇøµÄÊı¾İ
              
                  pitem->Name[0]=0XE5; //¸øÎÄ¼şÄ¿Â¼Ïî´òÉÏ"ÒÑÉ¾³ı"µÄ±ê¼Ç
                    pitem->HighClust[0]=pitem->HighClust[1]=0; //¿ªÊ¼´ØµÄ¸ß×ÖÇå0
              
                    znFAT_Device_Write_Sector(sec_temp+(UINT32)iSec,znFAT_Buffer); //Èç¹ûÓĞÏú»Ù²Ù×÷£¬Ôò»ØĞ´ÉÈÇø 
                 }
                   return BOOL_TRUE;
                  }
                 }
                }
              
                temp=Get_Next_Cluster(temp); //»ñÈ¡ÏÂÒ»´Ø
               }while(!IS_END_CLU(temp)); //Èç¹û²»ÊÇ×îºóÒ»¸ö´Ø£¬Ôò¼ÌĞøÑ­»·
                
               return BOOL_FALSE;
              }
              #endif
3735          
3736          /************************************************************************************
3737           ¹¦ÄÜ£º½øÈë´ÓÄ³¸öÄ¿Â¼¿ªÊ¼µÄ×îÉî×î¡°×ó¡±µÄÄ¿Â¼
3738           ĞÎ²Î£ºcluster:Ö¸ÏòÄ¿Â¼´ØµÄÖ¸Õë
3739           ·µ»Ø£º0
3740           Ïê½â£º´Ëº¯ÊıÊÇÄ¿Â¼É¾³ı¹¦ÄÜµÄÒ»¸ö»ù±¾¶ø¹Ø¼üµÄ²Ù×÷¡£ËüÓÃÀ´½øÈëµ½¡°×îÉî×î×ó¡±µÄÄ¿Â¼£¬
3741                 Í¬Ê±ÔÚ´Ë¹ı³ÌÖĞ£¬É¾³ı¡°×î×ó¡±Ä¿Â¼¡°×ó±ß¡±µÄËùÓĞÎÄ¼ş¡££¨´Ëº¯ÊıµÄË¼Ïë½ÏÎª³éÏó£©
3742          *************************************************************************************/
3743          #ifdef ENTER_DEEP_AHEAD_DIR
              UINT8 Enter_Deep_Ahead_Dir(UINT32 *cluster)
              {
               UINT32 dir_cluster=*cluster; 
              
               while(Have_Any_SubDir_With_Del_ForeFile(&dir_cluster,BOOL_FALSE));
              
               *cluster=dir_cluster;
              
               return ERR_SUCC;
              }
              #endif
3755          
3756          /************************************************************************************
3757           ¹¦ÄÜ£º»ñÈ¡Ò»¸öÄ¿Â¼µÄÉÏÒ»¼¶Ä¿Â¼¿ªÊ¼´Ø
3758           ĞÎ²Î£ºcluster:Ä¿Â¼µÄ¿ªÊ¼´Ø£¬Í¬Ê±ÓÖÓÃÓÚ½ÓÊÕ¼ÆËãµÃµ½µÄÉÏÒ»¼¶Ä¿Â¼µÄ¿ªÊ¼´Ø
3759           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»ò´íÎóÂë 
3760           Ïê½â£ºÔÚÄ¿Â¼µÄ×îÍ·ÉÏ£¬ÓĞ.Óë..£¬ÔÚ..ÖĞ¼ÇÂ¼ÁËÉÏÒ»²ãÄ¿Â¼µÄ¿ªÊ¼´Ø£¬´Ëº¯Êı¾ÍÊÇ»ùÓÚÕâÒ»µã
3761                 À´»ñÈ¡Ä¿Â¼ÉÏÒ»¼¶Ä¿Â¼¿ªÊ¼´ØµÄ¡£
3762          *************************************************************************************/
3763          #ifdef GET_UPPER_DIR
              UINT8 Get_Upper_Dir(UINT32 *cluster)
              {
               struct FDIesInSEC *pitems; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÉÈÇøÊı¾İµÄÖ¸Õë
               struct FDI *pitem; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÊı¾İµÄÖ¸Õë
              
               znFAT_Device_Read_Sector(SOC(*cluster),znFAT_Buffer);
               pitems=(struct FDIesInSEC *)znFAT_Buffer; 
                 
               pitem=&(pitems->FDIes[1]); //Ö¸Ïò..ÎÄ¼şÄ¿Â¼Ïî£¬ÓÃÒÔ»ñÈ¡ÉÏÒ»¼¶Ä¿Â¼µÄÊ×´Ø
              
               if('.'==pitem->Name[0] && '.'==pitem->Name[1])
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 63  

                *cluster=Bytes2Value(pitem->LowClust,2)+Bytes2Value(pitem->HighClust,2)*65536;
               else
                return ERR_FS_DIR; //Èç¹ûÔÚÄ¿Â¼µÄ×îÍ·ÉÏ²»ÊÇ.Óë..£¬ÔòËµÃ÷ÎÄ¼şÏµÍ³ÒÑ±»Ëğ»µ
               
               if(0==(*cluster)) (*cluster)=2; //Èç¹ûÉÏÒ»¼¶Ä¿Â¼Îª¸ùÄ¿Â¼(Ê×Ä¿Â¼)£¬½«´ØÖµÖÃÎª2
              
               return ERR_SUCC;
              }
              #endif
3784          
3785          /************************************************************************************
3786           ¹¦ÄÜ£ºÉ¾³ıÄ¿Â¼
3787           ĞÎ²Î£ºdirpath:Ö¸ÕëÏòÄ¿Â¼Â·¾¶ Ä¿Â¼ÃûÖ§³ÖÍ¨Åä
3788           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»ò´íÎóÂë
3789           Ïê½â£ºdirpathÈç\a\b\c£¬É¾³ıÄ¿Â¼c£¬×îºó²»ÒªÒÔ\½áÊø¡£É¾³ıÄ¿Â¼½«»áÉ¾³ıÄ¿Â¼ÏÂµÄËùÓĞ×ÓÄ¿Â¼
3790                 ÓëÎÄ¼ş£¬×ÓÄ¿Â¼ÏÂ¿ÉÒÔÔÙÓĞ×ÓÄ¿Â¼ÓëÎÄ¼ş£¬ÒÀ´Îµİ¹é¡£dirpathÒ²¿ÉÒÔÎª/a/b/c* £¬Ëü½«
3791                 É¾³ıbÄ¿Â¼ÏÂËùÓĞÒÔc´òÍ·µÄÄ¿Â¼¡£
3792          *************************************************************************************/
3793          #ifdef ZNFAT_DELETE_DIR
              UINT8 znFAT_Delete_Dir(INT8 *dirpath) 
              {
               UINT32 top_dir_first_cluster=0,sub_dir_first_cluster=0;
               UINT8 res=0;
              
               struct FDIesInSEC *pitems; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÉÈÇøÊı¾İµÄÖ¸Õë
              
               struct FileInfo fi;
              
               res=znFAT_Open_File(&fi,dirpath,0,BOOL_FALSE); //³¢ÊÔ´ò¿ªÄ¿Â¼
              
               if(res) return res; //Èç¹û´ò¿ªÄ¿Â¼Ê§°Ü£¬ÔòÖ±½Ó·µ»Ø´íÎóÂë
              
               while(!res) //Ä¿Â¼´ò¿ª³É¹¦
               {
                top_dir_first_cluster=fi.File_StartClust; //¶¥²ãÄ¿Â¼µÄÊ×´Ø
                sub_dir_first_cluster=top_dir_first_cluster;
              
                //ÒÔÏÂ´úÂë½«¶¥¼¶Ä¿Â¼ÏÂËùÓĞÄÚÈİ(ÎÄ¼ş¡¢×ÓÄ¿Â¼¼°×ÓÄ¿Â¼ÖĞµÄÄÚÈİ£¬º¬µİ¹é)Ïú»Ù
              
                Enter_Deep_Ahead_Dir(&sub_dir_first_cluster); //»ñÈ¡×îÉî×î¿¿Ç°µÄÄ¿Â¼Ê×´Ø
              
                while(sub_dir_first_cluster!=top_dir_first_cluster) //Èç¹û×îÉî×î¿¿Ç°Ä¿Â¼Ê×´Ø¾ÍÊÇÒªÉ¾³ıµÄ¶¥¼¶Ä¿Â¼
                {                                                   //ÔòËµÃ÷¶¥¼¶Ä¿Â¼ÏÂµÄËùÓĞÄÚÈİ¶¼ÒÑ¾­Çå¿Õ
                 Get_Upper_Dir(&sub_dir_first_cluster); //»ñÈ¡ÉÏÒ»²ãÄ¿Â¼Ê×´Ø 
                 
                 Have_Any_SubDir_With_Del_ForeFile(&sub_dir_first_cluster,BOOL_TRUE); //°ÑÒÑÇå¿ÕÆäÄÚÈİµÄ×ÓÄ¿Â¼Ïú»Ù 
              
                 Enter_Deep_Ahead_Dir(&sub_dir_first_cluster); //»ñÈ¡×îÉî×î¿¿Ç°µÄÄ¿Â¼Ê×´Ø
                }  
              
                //Ïú»Ù¶¥¼¶Ä¿Â¼¶ÔÓ¦µÄÎÄ¼şÄ¿Â¼Ïî¼°Æä´ØÁ´
              
                znFAT_Device_Read_Sector(fi.FDI_Sec,znFAT_Buffer); //¶ÁÈ¡ÎÄ¼şÄ¿Â¼ÏîËùÔÚµÄÉÈÇø
                pitems=(struct FDIesInSEC *)znFAT_Buffer;
              
                Destroy_FDI((pitems->FDIes)+fi.nFDI); //Ïú»Ù¶¥¼¶Ä¿Â¼
              
                znFAT_Device_Read_Sector(fi.FDI_Sec,znFAT_Buffer); //¶ÁÈ¡ÎÄ¼şÄ¿Â¼ÏîËùÔÚµÄÉÈÇø
                (pitems->FDIes)[fi.nFDI].Name[0]=0XE5;
                (pitems->FDIes)[fi.nFDI].HighClust[0]=(pitems->FDIes)[fi.nFDI].HighClust[1]=0;
              
                znFAT_Device_Write_Sector(fi.FDI_Sec,znFAT_Buffer); //»ØĞ´ÉÈÇø
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 64  

              
                res=znFAT_Open_File(&fi,dirpath,0,BOOL_FALSE); //³¢ÊÔ´ò¿ªÄ¿Â¼
               }
               
               znFAT_Close_File(&fi);
              
               #ifdef RT_UPDATE_FSINFO
               Update_FSINFO();
               #endif
              
               return ERR_SUCC; 
              }
              #endif
3850          
3851          //========================ÒÔÉÏ´úÂëÓÃÓÚÊµÏÖÄ¿Â¼É¾³ı¹¦ÄÜ====================
3852          
3853          /************************************************************************************
3854           ¹¦ÄÜ£ºÎÄ¼şÉ¾³ı
3855           ĞÎ²Î£ºfilepath:ÎÄ¼şÂ·¾¶ 
3856           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»ò´íÎóÂë
3857           Ïê½â£ºÉ¾³ıÎÄ¼ş±ÈÉ¾³ıÄ¿Â¼Òª¼òµ¥µÄ¶à¡£filepathÈç\a\b\test.txt£¬É¾³ıÎÄ¼ştest.txt
3858                 ÔËĞĞÍ¨Åä£¬filepath¿ÉÒÔÎª/a/b/c/d/t*.txt É¾³ıdÄ¿Â¼ÏÂËùÓĞµÄt´òÍ·µÄtxtÎÄ¼ş
3859          *************************************************************************************/
3860          #ifdef ZNFAT_DELETE_FILE
              UINT8 znFAT_Delete_File(INT8 *filepath) 
              {
               UINT8 res=0;
               struct FileInfo fi; 
              
               struct FDIesInSEC *pitems; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÉÈÇøÊı¾İµÄÖ¸Õë
               struct FDI *pitem; //Ö¸ÏòÎÄ¼şÄ¿Â¼ÏîÊı¾İµÄÖ¸Õë
              
               res=znFAT_Open_File(&fi,filepath,0,BOOL_TRUE);
               if(res) return res;
              
               while(!res) //´ò¿ªÎÄ¼ş³É¹¦
               {
                znFAT_Device_Read_Sector(fi.FDI_Sec,znFAT_Buffer); //¶ÁÈ¡ÎÄ¼şµÄÎÄ¼şÄ¿Â¼ÏîËùÔÚÉÈÇø
                pitems=(struct FDIesInSEC *)znFAT_Buffer;
                pitem=(pitems->FDIes)+fi.nFDI;
              
                if(0!=fi.File_StartClust) Destroy_FAT_Chain(fi.File_StartClust); //Ïú»ÙÕûÌõ´ØÁ´
              
                znFAT_Device_Read_Sector(fi.FDI_Sec,znFAT_Buffer); //¶ÁÈ¡ÎÄ¼şÄ¿Â¼ÏîËùÔÚµÄÉÈÇø
              
                pitem->Name[0]=0XE5; //¸øÎÄ¼şÄ¿Â¼Ïî´òÉÏ"ÒÑÉ¾³ı"µÄ±ê¼Ç
                pitem->HighClust[0]=pitem->HighClust[1]=0; //¿ªÊ¼´ØµÄ¸ß×ÖÇå0
              
                znFAT_Device_Write_Sector(fi.FDI_Sec,znFAT_Buffer); //»ØĞ´ÉÈÇø
              
                res=znFAT_Open_File(&fi,filepath,0,BOOL_TRUE);
               }
              
               znFAT_Close_File(&fi);
              
               #ifdef RT_UPDATE_FSINFO
               Update_FSINFO();
               #endif
              
               return ERR_SUCC; 
              }
              #endif
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 65  

3899          
3900          //==========================ÒÔÏÂ´úÂëÓÃÓÚÊµÏÖ¸ñÊ½»¯¹¦ÄÜ============================
3901          
3902          /************************************************************************************
3903           ¹¦ÄÜ£º»ñÈ¡ÔÚÄ³ÖÖ´ÅÅÌÈİÁ¿ÏÂ´Ø´óĞ¡µÄÍÆ¼öÖµ
3904           ĞÎ²Î£ºnsec:×ÜÉÈÇøÊı
3905           ·µ»Ø£º0
3906           Ïê½â£ºÈç¹û·µ»Ø0£¬ÔòËµÃ÷´ÅÅÌÈİÁ¿¶ÔÓÚFAT32ÎÄ¼şÏµÍ³À´ËµÌ«Ğ¡ÁË£¬ÎŞ·¨ÓÃFAT32À´¸ñÊ½»¯¡£
3907          *************************************************************************************/
3908          #ifdef GET_RECMD_SZCLU
              UINT8 Get_Recmd_szClu(UINT32 nsec)
              {
               if(nsec<(14336)) return 0;
              
               if((nsec>=(14336)) && (nsec<=(32767))) return 0;
               if((nsec>=(32768)) && (nsec<=(65535))) return 1;
               if((nsec>=(65536)) && (nsec<=(131071))) return 1;
               if((nsec>=(131072)) && (nsec<=(262143))) return 2;
               if((nsec>=(262144)) && (nsec<=(524287))) return 4;
               if((nsec>=(524288)) && (nsec<=(16777215))) return 8;
               if((nsec>=(16777216)) && (nsec<=(33554431))) return 16;
               if((nsec>=(33554432)) && (nsec<=(67108863))) return 32;
               if((nsec>=(67108864)) && (nsec<=(4294967295UL))) return 64;
              
               return 0;
              }
              #endif
3926          
3927          /************************************************************************************
3928           ¹¦ÄÜ£ºÔÚ´ÅÅÌÉÏ´´½¨Ò»¸öFAT32µÄÎÄ¼şÏµÍ³£¬¼´¸ñÊ½»¯
3929           ĞÎ²Î£ºtt_sec:×ÜÉÈÇøÊı clu_sz:Ê¹ÓÃÕßÖ¸¶¨µÄ´Ø´óĞ¡£¬Èç¹ûÎª0£¬ÔòÈ¡ÍÆ¼öÖµ
3930           ·µ»Ø£º0
3931           Ïê½â£ºFAT32µÄ¸ñÊ½»¯·ÖÎªÁ½ÖÖ²ßÂÔ£ºFDISKÓëSFD¡£FDISKÊÇÖ§³Ö¶à·ÖÇøµÄ£¬Òò´ËĞèÒª¹¹ÔìMBR
3932                 ¹¹ÔìMBR»áÉæ¼°µ½Ò»Ğ©±È½Ïµ×²ãµÄÄÚÈİ£¬½ÏÓĞÄÑ¶È£¬Òò´ËÎªÁË¼òµ¥¶ø¸ßĞ§£¬znFATÖĞÊ¹ÓÃÁË
3933                 SFD²ßÂÔ£¬Ëü½«Õû¸ö´ÅÅÌ¾Íµ±×÷Ò»¸öÄ¬ÈÏµÄ´ó·ÖÇø£¬Òò´ËËüÃ»ÓĞMBR¡£¸ñÊ½»¯ºó´ÅÅÌµÄ¾í
3934                 ±êÎªZN'ZNFATOK!
3935          *************************************************************************************/
3936          #ifdef ZNFAT_MAKE_FS
              UINT8 znFAT_Make_FS(UINT32 tt_sec,UINT16 clu_sz) //¸ñÊ½»¯ tt_sec ×ÜÉÈÇøÊı clu_sz Ö¸¶¨µÄ´Ø´óĞ¡
              {                                          //ÈôÎª0Ôò°´´ÅÅÌ´óĞ¡Ñ¡¶¨Ä¬ÈÏÖµ ¸ñÊ½»¯²ßÂÔ²ÉÓÃ±È½Ï¼òµ¥µÄSFD²ßÂÔ
                                                       //ÎŞMBR£¬²»Ö§³Ö·ÖÇø£¬Ö±½Ó´ÓDBR¿ªÊ¼
               struct DBR      *pdbr;
               struct FSInfo   *pfsinfo;
              
               UINT32 temp=0,temp1=0,temp2=0;
              
               tt_sec/=(UINT32)(NSECPERCYLINDER); 
               tt_sec*=(UINT32)(NSECPERCYLINDER);//ÉáÈ¥¡°Ê£ÓàÉÈÇø¡±£¬Ê£ÓàÉÈÇøÊÇÖ¸²»×ãÒ»¸öÖùÃæµÄÉÈÇøÊı
              
               //=================ºÏ³ÉDBRÉÈÇøÊı¾İ=============================================================
               PGM2RAM(znFAT_Buffer,_dbr,512); //´ÓÄ£°æÊı×éÖĞ°ÑÊı¾İ°áµ½ÄÚ²¿»º³åÇø
               pdbr=(struct DBR *)znFAT_Buffer;
              
               pdbr->BPB_SecPerClus=(UINT8)(clu_sz/512); //Ã¿´ØÉÈÇøÊı
               if(0==pdbr->BPB_SecPerClus) pdbr->BPB_SecPerClus=Get_Recmd_szClu(tt_sec);
               if(0==pdbr->BPB_SecPerClus) return ERR_FMT_TOO_LOW_VOLUME; //ÈİÁ¿Ì«Ğ¡£¬²»ÄÜÓÃFAT32½øĞĞ¸ñÊ½»¯
              
               temp1=pdbr->BPB_SecPerClus;
              
               pdbr->BPB_TotSec32[0]=(UINT8)((tt_sec)    &0X000000FF);
               pdbr->BPB_TotSec32[1]=(UINT8)((tt_sec>>8) &0X000000FF);
               pdbr->BPB_TotSec32[2]=(UINT8)((tt_sec>>16)&0X000000FF);
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 66  

               pdbr->BPB_TotSec32[3]=(UINT8)((tt_sec>>24)&0X000000FF); //¸Ã·ÖÇøµÄ×ÜÉÈÇøÊı
              
               temp=(tt_sec-32)/(((UINT32)NITEMSINFATSEC)*((UINT32)(pdbr->BPB_SecPerClus)));
               if((tt_sec-32)%((UINT32)NITEMSINFATSEC)*((UINT32)pdbr->BPB_SecPerClus)) temp++; //((tt_sec-32)-2*FATsz)/(
             -SecPerClus*128)=FATsz ½âÕâ¸öµÈÊ½
               temp2=temp;
               
               pdbr->BPB_FATSz32[0]=(UINT8)((temp)    &0X000000FF);
               pdbr->BPB_FATSz32[1]=(UINT8)((temp>>8) &0X000000FF);
               pdbr->BPB_FATSz32[2]=(UINT8)((temp>>16)&0X000000FF);
               pdbr->BPB_FATSz32[3]=(UINT8)((temp>>24)&0X000000FF); //FAT±íµÄÉÈÇøÊı
              
               znFAT_Device_Write_Sector(0,znFAT_Buffer); //½«ºÏ³ÉºÃµÄDBRÊı¾İĞ´Èëµ½0ÉÈÇøÖĞÈ¥
              
               //===============================ÒÔÉÏ´úÂëÍê³É¶ÔDBRÉÈÇøÊı¾İµÄºÏ³É===============================
              
               //===================================ÒÔÏÂ´úÂëÍê³É¶ÔFSINFOÉÈÇøÊı¾İµÄºÏ³É========================
              
               Memory_Set(znFAT_Buffer,ZNFAT_BUF_SIZE,0); //½«ÄÚ²¿»º³åÇøÇå0
               PGM2RAM(znFAT_Buffer,_fsinfo_1,4); //½«FSINFOÄ£°åÊı¾İµÄµÚÒ»²¿·Ö°á¹ıÀ´
               PGM2RAM(znFAT_Buffer+484,_fsinfo_2,28); //½«FSINFOÄ£°åÊı¾İµÄµÚ¶ş²¿·Ö°á¹ıÀ´
                                                           //×¢£ºFSINFOÄ£°åÊı¾İ·ÖÎªÁ½²¿·Ö£¬Ö÷ÒªÊÇÒòÎªÆäÖĞÓĞ¾ø´ó
                                                           //²¿·ÖÊÇ0£¬ÎªÁË½ÚÊ¡¹Ì»¯Êı¾İÁ¿£¬¼õÉÙFLASHROM¿Õ¼äµÄÊ¹ÓÃÁ¿
               pfsinfo=(struct FSInfo *)znFAT_Buffer;
               
               temp=(tt_sec-32-2*temp)/((UINT32)(temp1))-1; //×Ü´ØÊı-1£¬ÒòÎªµÚ2´ØÎªÊ×Ä¿Â¼£¬ÒÑ¾­±»¾í±êÕ¼ÓÃ
               pfsinfo->Free_Cluster[0]=(UINT8)((temp)    &0X000000FF);
               pfsinfo->Free_Cluster[1]=(UINT8)((temp>>8) &0X000000FF);
               pfsinfo->Free_Cluster[2]=(UINT8)((temp>>16)&0X000000FF);
               pfsinfo->Free_Cluster[3]=(UINT8)((temp>>24)&0X000000FF); //Ê£Óà¿Õ´ØÊı
              
               znFAT_Device_Write_Sector(1,znFAT_Buffer); //½«ºÏ³ÉºÃµÄDBRÊı¾İĞ´Èëµ½64ÉÈÇøÖĞÈ¥£¬¼´DBRÉÈÇøµÄºóÒ»¸öÉÈÇø
              
               //=====================================ÒÔÉÏ´úÂëÍê³É¶ÔFSINFOÉÈÇøÊı¾İµÄºÏ³É=====================
              
               //=====================================ÒÔÏÂ´úÂëÍê³É¶ÔFAT±íµÄ³õÊ¼»¯============================
              
               znFAT_Device_Clear_nSector(temp1,32+2*temp2);
               znFAT_Device_Clear_nSector(temp2-1,33);
               znFAT_Device_Clear_nSector(temp2-1,33+temp2);
              
               PGM2RAM(znFAT_Buffer,_fatsec,12); //½«FAT±íÄ£°æÊı¾İ°áµ½ÄÚ²¿»º³åÇø
               znFAT_Device_Write_Sector(32,znFAT_Buffer); //ÏòFAT±í1ÖĞĞ´Èë0
               znFAT_Device_Write_Sector(32+temp2,znFAT_Buffer); //ÏòFAT±í2ÖĞĞ´Èë0
              
               //=====================================ÒÔÉÏ´úÂëÍê³É¶ÔFAT±íµÄ³õÊ¼»¯============================
              
               //=====================================ÒÔÏÂ´úÂë¶ÔÊı¾İÇøÊ×ÉÈÇø½øĞĞ³õÊ¼»¯£¬Ğ´Èë¾í±ê=============
              
               PGM2RAM(znFAT_Buffer,_1stsec,26); 
               znFAT_Device_Write_Sector(32+2*temp2,znFAT_Buffer); //ÏòÊı¾İÇøµÚÒ»¸öÉÈÇøĞ´ÈëÊı¾İ
              
               //=====================================ÒÔÉÏ.....==============================================
               return ERR_SUCC;
              }  
              #endif
4016          
4017          //===================ÒÔÏÂ´úÂëÓÃÓÚÊµÏÖÎÄ¼şÊı¾İĞ´Èë=====================
4018          
4019          /************************************************************************************
4020           ¹¦ÄÜ£º¸üĞÂÎÄ¼şµÄ´óĞ¡£¬½«µ±Ç°ÎÄ¼şĞÅÏ¢¼¯ºÏÖĞµÄFile_SizeÖµĞ´Èëµ½ÎÄ¼şÄ¿Â¼ÏîÖĞÈ¥
4021           ĞÎ²Î£ºpfi:Ö¸ÕëÎÄ¼şÄ¿Â¼ÏîµÄÖ¸Õë
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 67  

4022           ·µ»Ø£º0
4023           Ïê½â£ºÔÚÏòÎÄ¼şĞ´ÈëÊı¾İ£¬»òÉ¾³ıÊı¾İÖ®ºó£¬Èç¹û²»µ÷ÓÃ´Ëº¯Êı½«ÎÄ¼ş´óĞ¡¸üĞÂµ½Ä¿Â¼ÏîÖĞÈ¥
4024                 ÔòÎÒÃÇÔÚµçÄÔÉÏÊÇ¿´²»µ½Ğ´ÈëµÄÊı¾İµÄ¡£´Ëº¯ÊıÔÚznFATÖĞÊÜµ½RT_UPDATE_FILESIZEÕâ¸ö
4025                 ºêµÄ¿ØÖÆ£¬ÒÔ¾ö¶¨ÊÇ·ñÊµÊ±¸üĞÂÎÄ¼ş´óĞ¡¡£
4026          *************************************************************************************/
4027          #ifdef UPDATE_FILE_SIZE
4028          UINT8 Update_File_Size(struct FileInfo *pfi) //¸üĞÂÎÄ¼ş´óĞ¡
4029          {
4030   1       struct FDI *pfdi;
4031   1      
4032   1       just_file=pfi;
4033   1      
4034   1       znFAT_Device_Read_Sector(pfi->FDI_Sec,znFAT_Buffer);
4035   1      
4036   1       pfdi=(((struct FDIesInSEC *)znFAT_Buffer)->FDIes)+(pfi->nFDI); //ÎÄ¼şµÄÎÄ¼şÄ¿Â¼Ïî
4037   1      
4038   1       (pfdi->FileSize)[0]=(UINT8)((pfi->File_Size)&0X000000FF)      ;
4039   1       (pfdi->FileSize)[1]=(UINT8)(((pfi->File_Size)&0X0000FF00)>>8) ;
4040   1       (pfdi->FileSize)[2]=(UINT8)(((pfi->File_Size)&0X00FF0000)>>16);
4041   1       (pfdi->FileSize)[3]=(UINT8)(((pfi->File_Size)&0XFF000000)>>24);
4042   1      
4043   1       znFAT_Device_Write_Sector(pfi->FDI_Sec,znFAT_Buffer);
4044   1      
4045   1       return 0;
4046   1      }
4047          #endif
4048          
4049          /************************************************************************************
4050           ¹¦ÄÜ£º¸üĞÂÎÄ¼şµÄ¿ªÊ¼´Ø
4051           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë clu:ÎÄ¼ş¿ªÊ¼´ØºÅ
4052           ·µ»Ø£º0
4053           Ïê½â£º¶ÔÓÚÒ»¸ö¸Õ¸Õ´´½¨µÄÎÄ¼ş£¨¿ÕÎÄ¼ş£©£¬ËüµÄ¿ªÊ¼´ØÎª0£¬Òò´ËÏòÆäĞ´ÈëÊı¾İÊ±£¬²»¹âÒª¸ü
4054                 ĞÂ´ØÁ´£¬»¹Òª¸üĞÂÎÄ¼şµÄ¿ªÊ¼´Ø£¬ËüÊÇÎÄ¼şÕûÌõ´ØÁ´µÄ¿ªÊ¼¡£
4055          *************************************************************************************/
4056          #ifdef UPDATE_FILE_SCLUST
              UINT8 Update_File_sClust(struct FileInfo *pfi,UINT32 clu) //¸üĞÂÎÄ¼ş¿ªÊ¼´Ø
              {
               struct FDI *pfdi;
              
               just_file=pfi;
              
               znFAT_Device_Read_Sector(pfi->FDI_Sec,znFAT_Buffer);
              
               pfdi=(((struct FDIesInSEC *)znFAT_Buffer)->FDIes)+(pfi->nFDI); //ÎÄ¼şµÄÎÄ¼şÄ¿Â¼Ïî
              
               pfi->File_StartClust=clu;
              
               (pfdi->HighClust)[0]=(UINT8)((clu&0X00FF0000)>>16);
               (pfdi->HighClust)[1]=(UINT8)((clu&0XFF000000)>>24);
               (pfdi->LowClust )[0]=(UINT8)((clu&0X000000FF))    ;
               (pfdi->LowClust )[1]=(UINT8)((clu&0X0000FF00)>>8) ;
              
               znFAT_Device_Write_Sector(pfi->FDI_Sec,znFAT_Buffer);
              
               return 0; 
              }
              #endif
4079          
4080          /************************************************************************************
4081           ¹¦ÄÜ£º´´½¨Ò»Ìõ´ØÁ´
4082           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë cluster:´ØÁ´µÄ¿ªÊ¼´Ø datalen:Êı¾İ³¤¶È(×Ö½Ú)
4083           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»ò´íÎóÂë
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 68  

4084           Ïê½â£º´Ëº¯ÊıµÄ¹¦ÄÜÊÇÎªÁËÏòÎÄ¼şÖĞĞ´ÈëÊı¾İ¶øÔ¤ÏÈ½¨Á¢´ØÁ´£¬´Ó¶ø¿ÉÒÔÌá¹©Êı¾İĞ´ÈëµÄĞ§ÂÊ
4085                 £¨Ê¹Êı¾İĞ´ÈëµÄ¹ı³ÌÖĞ£¬²»ÔÙÇ£³¶´ØÁ´¹¹ÔìµÄ²Ù×÷£©¼ÓÖ®¶Ô´ØÁ´µÄÁ¬Ğø¶ÎµÄ·ÖÎö£¬¿ÉÒÔºÜ
4086                 ´ó³ÌĞòÉÏÌá¸ß¶àÉÈÇøÁ¬Ğø¶ÁĞ´Çı¶¯µÄÊ¹ÓÃÂÊ¡£ÕâÒ»º¯ÊıÊÇznFAT¡°´óÄ£Ê½¡±µÄ»ù´¡£¨´óÄ£
4087                 Ê½¾ÍÊÇÏÈÎªÎÄ¼şÔ¤ÏÈ½¨Á¢ºÃ´ØÁ´£¬È»ºó¾ÍÊÇµ¥´¿µÄÊı¾İĞ´ÈëÁË£¬ÕâÑù¼«´óµÄÌáÉıÁËÊı¾İĞ´
4088                 ÈëµÄËÙ¶ÈºÍĞ§ÂÊ£¬ÊÇÊı¾İ¸ßËÙ´æ´¢µÄ½â¾ö·½°¸£©¡£
4089          *************************************************************************************/
4090          #ifdef CREATE_CLUSTER_CHAIN
              UINT8 Create_Cluster_Chain(struct FileInfo *pfi,UINT32 cluster,UINT32 datalen)
              {
               UINT32 iSec=0,clu_sec=0,old_clu=cluster,ncluster=0,temp_ncluster=0;
               UINT8 iItem=0,temp=0;
               struct FAT_Sec *pFAT_Sec=(struct FAT_Sec *)znFAT_Buffer; //½«Êı¾İ»º³åÇøÊ×µØÖ·Ç¿×ªÎªFAT_Sec½á¹¹ÌåµÄÖ¸ÕëÀàĞ
             -Í
              
               UINT32 Clu_Size=(pInit_Args->SectorsPerClust*pInit_Args->BytesPerSector); //´Ø´óĞ¡£¬ÒÔÃâºóÃæÖØ¸´¼ÆËã
              
               just_file=pfi;
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               #ifdef USE_ALONE_CCCB
               CCCB_To_Alone();
               #endif
               #endif
              
               ncluster=datalen/Clu_Size;
               if(0!=datalen%Clu_Size) ncluster++; //Èç¹ûÓĞÊı¾İÓàÁ¿£¨ÕûÉÈÇø£©£¬´ØÊı¼Ó1
              
               temp_ncluster=ncluster; //¼ÇÂ¼ÏÂ´ØÁ´µÄ´ØÊı
              
               if((pInit_Args->Free_nCluster)<ncluster) return ERR_NO_SPACE; //ÎŞ×ã¹»µÄ´æ´¢¿Õ¼ä
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               #ifndef USE_ALONE_CCCB
               if(pfi!=pcccb_cur_oc) //Èç¹ûµ±Ç°Õ¼ÓÃCCCBµÄ²»ÊÇÏÖÔÚÒª²Ù×÷µÄÎÄ¼ş
               {
                CCCB_Update_FAT();
                pcccb_cur_oc=pfi;
                (*pcccb_curdev)=Dev_No;
                pcccb_cur_initargs=pInit_Args;
               }
               #endif
               (*pcccb_curval)=cluster;
               #endif
              
               //===================================ÕâÀï¿ÉÄÜ²úÉú·µÁ´==========================================
              
               cluster=(pInit_Args->Next_Free_Cluster);
              
               pfi->File_CurClust=pInit_Args->Next_Free_Cluster; //µ±Ç°´ØÎªÏÂÒ»¿Õ´Ø
               pfi->File_CurSec=SOC(pfi->File_CurClust); //µ±Ç°´ØµÄÊ×ÉÈÇø
              
               ncluster--;
               //============================
              
               if(0!=old_clu)
               {
                clu_sec=(old_clu/NITEMSINFATSEC); //¼ÆËãÇ°Ò»´ØµÄ´ØÏîËùÔÚµÄFATÉÈÇø
                znFAT_Device_Read_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
              
                #ifdef RT_UPDATE_CLUSTER_CHAIN
                temp=(UINT8)(old_clu%NITEMSINFATSEC);
                (((pFAT_Sec->items)[temp]).Item)[0]=(UINT8)(cluster&0X000000FF)      ;  //½«ÆäÁ´ÔÚÇ°ÃæµÄ´ØÏîÉÏ   
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 69  

                (((pFAT_Sec->items)[temp]).Item)[1]=(UINT8)((cluster&0X0000FF00)>>8) ;
                (((pFAT_Sec->items)[temp]).Item)[2]=(UINT8)((cluster&0X00FF0000)>>16);
                (((pFAT_Sec->items)[temp]).Item)[3]=(UINT8)((cluster&0XFF000000)>>24);
                #else
                //---------------------------------CCCBµÄ´¦Àí--------------------------------------
                if(0==(*pcccb_counter)) 
                {
                 pcccb_buf[(*pcccb_counter)]=(*pcccb_curval);
                 (*pcccb_counter)++;
                }
              
                if(cluster==((*pcccb_curval)+1))
                {
                 (*pcccb_curval)++;
                }
                else
                {
                 if(((*pcccb_counter)+1)!=CCCB_LEN) //CCCBÃ»ÓĞÒç³ö
                 {
                  pcccb_buf[(*pcccb_counter)]=(*pcccb_curval);
              
                  (*pcccb_counter)++;
                  pcccb_buf[(*pcccb_counter)]=cluster;
                  (*pcccb_curval)=cluster;
                  (*pcccb_counter)++;
                 }
                 else //CCCBÒç³ö£¬´ËÊ±ĞèÒª½«CCCB¸üĞÂµ½FAT
                 {
                CCCB_Update_FAT();
                #ifndef USE_ALONE_CCCB
                pcccb_cur_oc=pfi;
                  (*pcccb_curdev)=Dev_No;
                  pcccb_cur_initargs=pInit_Args;
                  #endif
              
                  (*pcccb_counter)=0;
                  pcccb_buf[(*pcccb_counter)]=pcccb_buf[(*pcccb_counter)+1]=(*pcccb_curval);
                  pcccb_buf[(*pcccb_counter)+2]=cluster;
                  (*pcccb_curval)=cluster;
                  (*pcccb_counter)+=3;
                 }
                }
                //---------------------------------CCCBµÄ´¦Àí--------------------------------------
                #endif
               }
               else
               {
                clu_sec=(cluster/NITEMSINFATSEC); //¼ÆËãÇ°Ò»´ØµÄ´ØÏîËùÔÚµÄFATÉÈÇø
                znFAT_Device_Read_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                
                #ifndef RT_UPDATE_CLUSTER_CHAIN
                //---------------------------------CCCBµÄ´¦Àí--------------------------------------
                (*pcccb_counter)=0;
                pcccb_buf[(*pcccb_counter)]=cluster;
                (*pcccb_curval)=cluster;
                (*pcccb_counter)++;
                //---------------------------------CCCBµÄ´¦Àí--------------------------------------
                #endif
               }
              
               #ifdef RT_UPDATE_CLUSTER_CHAIN
               if(clu_sec==(cluster/NITEMSINFATSEC)) //Èç¹ûÄ¿±ê´ØÏîÓëÇ°Ò»´ØÏîÔÚÍ¬Ò»ÉÈÇø
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 70  

               {
                if(0==ncluster) 
                {
                 temp=(UINT8)(cluster%NITEMSINFATSEC);
                 (((pFAT_Sec->items)[temp]).Item)[0]=0XFF;  //´ØÁ´·â¿Ú  
                 (((pFAT_Sec->items)[temp]).Item)[1]=0XFF;
                 (((pFAT_Sec->items)[temp]).Item)[2]=0XFF;
                 (((pFAT_Sec->items)[temp]).Item)[3]=0X0F;   
              
                 znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                 znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
                }
               }
               else //Èç¹ûÄ¿±ê´ØÏîÓëÇ°Ò»´ØÏî²»ÔÚÍ¬Ò»ÉÈÇø
               {
                znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
              
                clu_sec=(cluster/NITEMSINFATSEC); //¼ÆËãÇ°Ò»´ØµÄ´ØÏîËùÔÚµÄFATÉÈÇø
                znFAT_Device_Read_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
              
                if(0==ncluster) 
                {
                 temp=(UINT8)(cluster%NITEMSINFATSEC);
              
                 (((pFAT_Sec->items)[temp]).Item)[0]=0XFF;  //´ØÁ´·â¿Ú  
                 (((pFAT_Sec->items)[temp]).Item)[1]=0XFF;
                 (((pFAT_Sec->items)[temp]).Item)[2]=0XFF;
                 (((pFAT_Sec->items)[temp]).Item)[3]=0X0F;   
              
                 znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                 znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
                }
               }
               #endif
               
               if(0==ncluster) //Èç¹û´ØÁ´¹¹ÔìÍê³É
               {
                pInit_Args->Free_nCluster-=temp_ncluster; //¸üĞÂÊ£Óà¿Õ´ØÊı
              
                Update_Next_Free_Cluster();
              
                #ifdef RT_UPDATE_FSINFO
                Update_FSINFO();
                #endif
              
                return ERR_SUCC;
               }
              
               old_clu=cluster; 
              
               //=============================================================================================
              
               clu_sec=(old_clu/NITEMSINFATSEC);
              
               if(((UINT8)((cluster%NITEMSINFATSEC)+1))!=((UINT8)NITEMSINFATSEC)) //Èç¹ûµ±Ç°µÄ´ØÏî²»ÊÇÆäËùÔÚFATÉÈÇøÖĞµÄ×
             -îºóÒ»¸ö´ØÏî
               {
                znFAT_Device_Read_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
              
                for(iItem=(UINT8)((cluster%NITEMSINFATSEC)+1);iItem<NITEMSINFATSEC;iItem++) //¼ì²âÔÚµ±Ç°FATÉÈÇøÄÚµ±Ç°´ØÏ
             -îÖ®ºóÊÇ·ñÓĞ¿Õ´Ø
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 71  

                {
                 cluster++; //´ØºÅ×ÔÔö
              
                 if(0==(((pFAT_Sec->items)[iItem]).Item)[0]  //Èç¹û·¢ÏÖ¿Õ´Ø
                 && 0==(((pFAT_Sec->items)[iItem]).Item)[1]
                 && 0==(((pFAT_Sec->items)[iItem]).Item)[2]
                 && 0==(((pFAT_Sec->items)[iItem]).Item)[3])
                 { 
                #ifdef RT_UPDATE_CLUSTER_CHAIN
                  temp=(UINT8)(old_clu%NITEMSINFATSEC);
              
                  (((pFAT_Sec->items)[temp]).Item)[0]=(UINT8)(cluster&0X000000FF)      ;  //½«ÆäÁ´ÔÚÇ°ÃæµÄ´ØÏîÉÏ   
                  (((pFAT_Sec->items)[temp]).Item)[1]=(UINT8)((cluster&0X0000FF00)>>8) ;
                  (((pFAT_Sec->items)[temp]).Item)[2]=(UINT8)((cluster&0X00FF0000)>>16);
                  (((pFAT_Sec->items)[temp]).Item)[3]=(UINT8)((cluster&0XFF000000)>>24);
                  #else
                //---------------------------------CCCBµÄ´¦Àí--------------------------------------
                  if(cluster==((*pcccb_curval)+1))
                {
                   (*pcccb_curval)++;
                }
                  else
                {
                   if(((*pcccb_counter)+1)!=CCCB_LEN) //CCCBÃ»ÓĞÒç³ö
                   {
                    pcccb_buf[(*pcccb_counter)]=(*pcccb_curval);
              
                    (*pcccb_counter)++;
                    pcccb_buf[(*pcccb_counter)]=cluster;
                    (*pcccb_curval)=cluster;
                    (*pcccb_counter)++;
                   }
                   else //CCCBÒç³ö£¬´ËÊ±ĞèÒª½«CCCB¸üĞÂµ½FAT£¬²¢Çå¿ÕCCCB£¬ÒÔ±ãÔÙ´ÎÀûÓÃ
                   {
                  CCCB_Update_FAT();
                  #ifndef USE_ALONE_CCCB
                  pcccb_cur_oc=pfi;
                    (*pcccb_curdev)=Dev_No;
                    pcccb_cur_initargs=pInit_Args;
                    #endif
              
                  (*pcccb_counter)=0;
                  pcccb_buf[(*pcccb_counter)]=pcccb_buf[(*pcccb_counter)+1]=(*pcccb_curval);
                  pcccb_buf[(*pcccb_counter)+2]=cluster;
                    (*pcccb_curval)=cluster;
                  (*pcccb_counter)+=3;
                   }
                }
                //---------------------------------CCCBµÄ´¦Àí--------------------------------------
                  #endif
                  ncluster--;
                  old_clu=cluster;
                 }
              
                 if(0==ncluster) 
                 {
                  #ifdef RT_UPDATE_CLUSTER_CHAIN
                (((pFAT_Sec->items)[iItem]).Item)[0]=0XFF;
                (((pFAT_Sec->items)[iItem]).Item)[1]=0XFF;
                (((pFAT_Sec->items)[iItem]).Item)[2]=0XFF;
                (((pFAT_Sec->items)[iItem]).Item)[3]=0X0F; //FATÁ´·â¿Ú
                  
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 72  

                  znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                  znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
                  #endif
                  pInit_Args->Free_nCluster-=temp_ncluster; //¸üĞÂÊ£Óà¿Õ´ØÊı
                  pInit_Args->Next_Free_Cluster=cluster; 
              
                  Update_Next_Free_Cluster();
              
                  #ifdef RT_UPDATE_FSINFO
                  Update_FSINFO();
                  #endif
              
                  return ERR_SUCC;
                 }
                }
               }
               #ifdef RT_UPDATE_CLUSTER_CHAIN
               znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
               znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
               #endif
               //=============================================================================================
              
               for(iSec=(clu_sec+1);iSec<(pInit_Args->FATsectors);iSec++) //ÔÚºóÃæµÄFATÉÈÇøÖĞ¼ÌĞø²éÕÒ
               {
                znFAT_Device_Read_Sector(iSec+(pInit_Args->FirstFATSector),znFAT_Buffer);
              
                for(iItem=0;iItem<NITEMSINFATSEC;iItem++) //¼ì²âÔÚµ±Ç°FATÉÈÇøÄÚµ±Ç°´ØÏîÖ®ºóÊÇ·ñÓĞ¿Õ´Ø
                {
                 cluster++;
              
                 if(0==(((pFAT_Sec->items)[iItem]).Item)[0]
                 && 0==(((pFAT_Sec->items)[iItem]).Item)[1]
                 && 0==(((pFAT_Sec->items)[iItem]).Item)[2]
                 && 0==(((pFAT_Sec->items)[iItem]).Item)[3])
                 {
                  #ifdef RT_UPDATE_CLUSTER_CHAIN
                clu_sec=(old_clu/NITEMSINFATSEC);
                  temp=(UINT8)(old_clu%NITEMSINFATSEC);
              
                  if(iSec!=clu_sec) //Èç¹ûÒª¸üĞÂµÄ´ØÏîËùÔÚµÄÉÈÇøÓëµ±Ç°ÉÈÇø²»ÊÇÍ¬Ò»ÉÈÇø
                {                 //ÔòĞèÒªÔÚ¸üĞÂ´ØÏîºó£¬»Ö¸´ÄÚ²¿¼¶³åµÄÊı¾İÎªµ±Ç°ÉÈÇø
                   Modify_FAT(old_clu,cluster);
              
                   znFAT_Device_Read_Sector(iSec+(pInit_Args->FirstFATSector),znFAT_Buffer);   
                }
                else //¶øÈç¹ûÒª¸üĞÂµÄ´ØÏîËùÔÚÉÈÇøÓëµ±Ç°ÉÈÇøÎªÍ¬Ò»ÉÈÇø£¬ÔòÖ»ĞèÒªÔÚÄÚ²¿»º³åÖĞ½øĞĞ¸üĞÂ
                {    //¶øÎŞĞèÏòÉÈÇøÖĞ»ØĞ´£¬ÕâÊÇÌá¹©´ØÁ´´´½¨ËÙ¶ÈµÄºËĞÄË¼Ïë
                   (((pFAT_Sec->items)[temp]).Item)[0]=(UINT8)(cluster&0X000000FF)      ;  //½«ÆäÁ´ÔÚÇ°ÃæµÄ´ØÏîÉÏ   
                   (((pFAT_Sec->items)[temp]).Item)[1]=(UINT8)((cluster&0X0000FF00)>>8) ;
                   (((pFAT_Sec->items)[temp]).Item)[2]=(UINT8)((cluster&0X00FF0000)>>16);
                   (((pFAT_Sec->items)[temp]).Item)[3]=(UINT8)((cluster&0XFF000000)>>24);
                }
                  #else
                //---------------------------------CCCBµÄ´¦Àí--------------------------------------
                  if(cluster==((*pcccb_curval)+1))
                {
                   (*pcccb_curval)++;
                }
                  else
                {
                   if(((*pcccb_counter)+1)!=CCCB_LEN) //CCCBÃ»ÓĞÒç³ö
                   {
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 73  

                    pcccb_buf[(*pcccb_counter)]=(*pcccb_curval);
              
                    (*pcccb_counter)++;
                    pcccb_buf[(*pcccb_counter)]=cluster;
                    (*pcccb_curval)=cluster;
                    (*pcccb_counter)++;
                   }
                   else //CCCBÃ»ÓĞÒç³ö£¬´ËÊ±ĞèÒª½«CCCB¸üĞÂµ½FAT
                   {
                  CCCB_Update_FAT();
                  #ifndef USE_ALONE_CCCB
                  pcccb_cur_oc=pfi;
                    (*pcccb_curdev)=Dev_No;
                    pcccb_cur_initargs=pInit_Args;
                    #endif
              
                  (*pcccb_counter)=0;
                  pcccb_buf[(*pcccb_counter)]=pcccb_buf[(*pcccb_counter)+1]=(*pcccb_curval);
                  pcccb_buf[(*pcccb_counter)+2]=cluster;
                    (*pcccb_curval)=cluster;
                  (*pcccb_counter)+=3;
                   }
                }
                //---------------------------------CCCBµÄ´¦Àí--------------------------------------
                  #endif
                ncluster--;
                old_clu=cluster;
                 }
              
                 if(0==ncluster) 
                 {
                #ifdef RT_UPDATE_CLUSTER_CHAIN
                clu_sec=(old_clu/NITEMSINFATSEC);
              
                (((pFAT_Sec->items)[iItem]).Item)[0]=0XFF;
                (((pFAT_Sec->items)[iItem]).Item)[1]=0XFF;
                (((pFAT_Sec->items)[iItem]).Item)[2]=0XFF;
                (((pFAT_Sec->items)[iItem]).Item)[3]=0X0F; //FATÁ´·â¿Ú
              
                  znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                  znFAT_Device_Write_Sector(clu_sec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
                  #endif
                  pInit_Args->Free_nCluster-=temp_ncluster; //¸üĞÂÊ£Óà¿Õ´ØÊı
                  pInit_Args->Next_Free_Cluster=cluster; 
              
                  Update_Next_Free_Cluster();
              
                  #ifdef RT_UPDATE_FSINFO
                  Update_FSINFO();
                  #endif
              
                  return ERR_SUCC;
                 }
                }
                #ifdef RT_UPDATE_CLUSTER_CHAIN
                znFAT_Device_Write_Sector(iSec+(pInit_Args->FirstFATSector),znFAT_Buffer);
                znFAT_Device_Write_Sector(iSec+(pInit_Args->FirstFATSector+pInit_Args->FATsectors),znFAT_Buffer);
                #endif
               } 
              
               return ERR_FAIL;
              }
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 74  

              #endif
4454          
4455          /************************************************************************************
4456           ¹¦ÄÜ£º´ÓÎÄ¼şÕû´ØÎ»ÖÃ¿ªÊ¼Ğ´ÈëÊı¾İ
4457           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë len:ÒªĞ´ÈëµÄÊı¾İ³¤¶È pbuf:Ö¸ÏòÊı¾İ»º³åÇø
4458           ·µ»Ø£ºÊµ¼ÊĞ´ÈëµÄÊı¾İÁ¿
4459           Ïê½â£ºznFATÖĞÏòÎÄ¼şĞ´ÈëÊı¾İÊÇÒÔ×·¼Ó·½Ê½Ğ´ÈëµÄ£¬¼´×ÜÊÇ´ÓÎÄ¼şµÄÄ©Î²ÏòºóĞ´ÈëÊı¾İ¡£Ğ´Èë
4460                 Êı¾İµÄÒÀ¾İÊÇÎÄ¼şµ±Ç°µÄÎ»ÖÃ²ÎÊı£¬µ«ÊÇµ±ÎÄ¼şÎª¿ÕÎÄ¼ş£¬¼´ÆäÊı¾İÎª0£¬»òÊÇÊı¾İÎª´Ø
4461                 ´óĞ¡µÄÕûÊı±¶£¬´ËÊ±ÎÄ¼şµÄÎ»ÖÃ²ÎÊı½«²»ÄÜÈçÊµ±í´ïÎÄ¼şÊı¾İµÄµ±Ç°Î»ÖÃ£¨ÎÄ¼şÎª¿ÕÊ±
4462                 µ±Ç°´ØÎª0£¬Õû´ØÊ±µ±Ç°´ØÎª×îºóÒ»¸öÓĞĞ§´Ø£©£¬ÕâÖÖÇé¿ö¾ÍÊÇznFATÖĞµÄ¡°å´Ø¡±£¬´Ëº¯
4463                 Êı×¨ÃÅÓÃÒÔ´¦ÀíÕâÖÖÇé¿ö¡£
4464          *************************************************************************************/
4465          #ifdef WRITEDATA_FROM_NCLUSTER
              UINT32 WriteData_From_nCluster(struct FileInfo *pfi,UINT32 len,UINT8 *pbuf)
              {
               UINT32 CluSize=((pInit_Args->BytesPerSector)*(pInit_Args->SectorsPerClust)); //¼ÆËã´Ø´óĞ¡£¬ÒÔÃâºóÃæÖØ¸´¼Æ
             -Ëã
               UINT32 temp=len/CluSize;//¼ÆËãÒªĞ´ÈëµÄÊı¾İÁ¿¹»¼¸¸öÕû´Ø
               UINT32 iClu=0,start_clu=0,end_clu=0,next_clu=0; 
               UINT32 temp1=0,temp2=0;
               UINT8 res=0;
              
               #ifdef USE_EXCHANGE_BUFFER
               #ifndef USE_ALONE_EXB
               UINT8 old_devno=Dev_No;
               #else
               pexb_buf=(pfi->exb_buf);
               #endif
               #endif
              
               just_file=pfi;
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=1;
               #ifdef USE_ALONE_CCCB
               CCCB_To_Alone();
               #endif
               #endif
              
               if(0==len) return 0; //Èç¹ûÒªĞ´ÈëµÄÊı¾İ³¤¶ÈÎª0£¬ÔòÖ±½Ó·µ»Ø
              
               if(0==pfi->File_CurClust) //Èç¹ûÊÇ¿ÕÎÄ¼ş£¬Ôòµ±Ç°´ØÎª0£¬¼´ÉĞÎ´ÎªÆä·ÖÅä´Ø
               {
                pfi->File_StartClust=pInit_Args->Next_Free_Cluster;
                Update_File_sClust(pfi,pInit_Args->Next_Free_Cluster);
               }
              
               res=Create_Cluster_Chain(pfi,pfi->File_CurClust,len); //ÎªÕû´ØÊı¾İÔ¤½¨´ØÁ´
               if(res) return res;
              
               if(0==temp) //Èç¹ûÒªĞ´ÈëµÄÊı¾İÉÙÓÚÒ»¸ö´Ø
               {
                temp=len/(pInit_Args->BytesPerSector); //ÒªĞ´ÈëµÄÊı¾İ¹»¼¸¸öÕûÉÈÇø
                znFAT_Device_Write_nSector(temp,SOC(pfi->File_CurClust),pbuf);
                pfi->File_CurSec+=temp;
                pbuf+=(temp*(pInit_Args->BytesPerSector));
              
                temp=len%(pInit_Args->BytesPerSector);
                if(0!=temp) //»¹ÓĞÊı¾İÒªĞ´Èë£¬²»×ãÉÈÇøµÄ×îºóÒ»µãÊı¾İ
                {
                 #ifndef USE_EXCHANGE_BUFFER
                 Memory_Copy(znFAT_Buffer,pbuf,temp); //°Ñ²»×ãÒ»ÉÈÇøµÄÊı¾İÏÈ·ÅÈëÄÚ²¿»º³åÇøÖĞ
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 75  

                 znFAT_Device_Write_Sector(pfi->File_CurSec,znFAT_Buffer); //½«ÄÚ²¿»º³åÇøÖĞµÄÊı¾İĞ´ÈëÉÈÇøÖĞ
                                                                       //Èç¹ûÖ±½ÓÊ¹ÓÃpbuf×÷Êı¾İÔ´À´Ğ´Èë£¬Òò²»×ãÒ»¸öÉÈÇø
                                                                       //´Ó¶ø»áÔì³ÉÄÚ´æÒç³ö,³ÌĞò±ÀÀ£
                 #else
                 #ifndef USE_ALONE_EXB
                 if(Dev_No!=sexb_cur_dev) //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸²»ÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                 {
                if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                {
                 Dev_No=sexb_cur_dev;
                 znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇøÖĞ
              
                   Dev_No=old_devno;
                }
                 }
                 else //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸ÕıÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                 {
                if(sexb_cur_sec!=(pfi->File_CurSec)) //Õ¼ÓÃEXBµÄÉÈÇø²»ÊÇµ±Ç°Òª²Ù×÷µÄÉÈÇø
                {
                 if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                 {
                  znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇøÖĞ
                 }     
                }
                 }
                 #endif 
              
                 Memory_Copy(pexb_buf,pbuf,temp);
              
                 #ifndef USE_ALONE_EXB
                 sexb_cur_sec=pfi->File_CurSec;   //¼ÇÂ¼µ±Ç°½»»»»º³åÖĞËù·´Ó³µÄÉÈÇøµØÖ·
                 sexb_cur_dev=Dev_No; //¼ÇÂ¼µ±Ç°½»»»»º³åÖĞÊı¾İËùÔÚµÄÉè±¸ºÅ
                 psexb_cur_oc=pfi; //¼ÇÂ¼EXBÖĞ»º³åµÄÊı¾İÊôÓÚÄÄ¸öÎÄ¼ş
                 #else
                 just_file->exb_cursec=pfi->File_CurSec;
                 #endif
                 #endif
                  
                 pfi->File_CurPos=(UINT16)temp;   
                }
               }
               else
               {
                //¼ÆËã¸÷Á¬Ğø´Ø¶Î£¬ÒÔ¾¡¿ÉÄÜµÄÊ¹ÓÃ¶àÉÈÇøĞ´Çı¶¯£¬ÒÔÌá¸ßÊı¾İĞ´ÈëËÙ¶È
                //start_cluÓëend_cluÓÃÓÚ¼ÇÂ¼Á¬Ğø´Ø¶ÎµÄÊ¼Ä©
                start_clu=end_clu=pfi->File_CurClust; 
              
                for(iClu=1;iClu<temp;iClu++)
                {
                 next_clu=Get_Next_Cluster(end_clu);
              
                 if((next_clu-1)==end_clu) //Èç¹ûÁ½¸ö´ØÏàÁÙ£¬¼´Á¬Ğø
                 {
                  end_clu=next_clu;
                 }
                 else //Èç¹ûÁ½¸ö´Ø²»ÏàÁÙ£¬¼´Óöµ½´ØÁ´¶Ïµã
                 {
                  znFAT_Device_Write_nSector(((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)),SOC(start_clu),pbuf);
                pbuf+=((end_clu-start_clu+1)*CluSize);
                  start_clu=next_clu;
                  end_clu=next_clu;
                 }
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 76  

                }
              
                temp1=(len%CluSize)/(pInit_Args->BytesPerSector); //Ê£ÓàÊı¾İ¹»¼¸¸öÕûÉÈÇø
                temp2=Get_Next_Cluster(end_clu);
                temp=(end_clu-start_clu+1)*(pInit_Args->SectorsPerClust);
               
                if(!IS_END_CLU(temp2)) //Èç¹ûÏÂÒ»´Ø²»ÊÇ½áÊø´Ø£¬¼´ºóÃæ»¹ÓĞÊı¾İÒªĞ´Èë
                {
                 if((temp2-1)==end_clu) //Èç¹û×îºóÒ»¸ö´ØÖĞµÄÊ£ÓàÉÈÇøÓëÇ°ÃæµÄ×îºóµÄÁ¬Ğø´Ø¶ÎÊÇÁ¬ĞøµÄ
                 {
                  znFAT_Device_Write_nSector((temp+temp1),SOC(start_clu),pbuf);
                  pbuf+=((temp+temp1)*(pInit_Args->BytesPerSector));
                 }
                 else
                 {
                  znFAT_Device_Write_nSector(((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)),SOC(start_clu),pbuf);
             - 
                  pbuf+=(temp*(pInit_Args->BytesPerSector));
                  znFAT_Device_Write_nSector(temp1,SOC(temp2),pbuf);
                  pbuf+=(temp1*(pInit_Args->BytesPerSector));
                 }
              
                 pfi->File_CurClust=temp2;
                 pfi->File_CurSec=(SOC(temp2)+temp1);
                 //=======================================================================================
                 temp=len%(pInit_Args->BytesPerSector);
                 if(0!=temp) //»¹ÓĞÊı¾İÒªĞ´Èë
                 {
                #ifndef USE_EXCHANGE_BUFFER
                  Memory_Copy(znFAT_Buffer,pbuf,temp); //°Ñ²»×ãÒ»ÉÈÇøµÄÊı¾İÏÈ·ÅÈëÄÚ²¿»º³åÇøÖĞ
                  znFAT_Device_Write_Sector(pfi->File_CurSec,znFAT_Buffer); //½«ÄÚ²¿»º³åÇøÖĞµÄÊı¾İĞ´ÈëÉÈÇøÖĞ
                                                                       //Èç¹ûÖ±½ÓÊ¹ÓÃpbuf×÷Êı¾İÔ´À´Ğ´Èë£¬Òò²»×ãÒ»¸öÉÈÇø
                                                                       //´Ó¶ø»áÔì³ÉÄÚ´æÒç³ö,³ÌĞò±ÀÀ£
                  #else
                  #ifndef USE_ALONE_EXB
                  if(Dev_No!=sexb_cur_dev) //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸²»ÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                  {
                 if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                 {
                  Dev_No=sexb_cur_dev;
                  znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇøÖĞ
              
                    Dev_No=old_devno;
                 }
                  }
                  else //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸ÕıÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                  {
                 if(sexb_cur_sec!=(pfi->File_CurSec)) //Õ¼ÓÃEXBµÄÉÈÇø²»ÊÇµ±Ç°Òª²Ù×÷µÄÉÈÇø
                 {
                  if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                  {
                   znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇøÖ
             -Ğ
                  }    
                 }
                  }
                  #endif
              
                  Memory_Copy(pexb_buf,pbuf,temp);
              
                  #ifndef USE_ALONE_EXB
                  sexb_cur_sec=pfi->File_CurSec;
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 77  

                sexb_cur_dev=Dev_No; //¼ÇÂ¼µ±Ç°½»»»»º³åÖĞÊı¾İËùÔÚµÄÉè±¸ºÅ
                psexb_cur_oc=pfi; //¼ÇÂ¼EXBÖĞ»º³åµÄÊı¾İÊôÓÚÄÄ¸öÎÄ¼ş
                  #else
                  just_file->exb_cursec=pfi->File_CurSec;
                  #endif
                  #endif   
                
                pfi->File_CurPos=(UINT16)temp;
                 }
                }
                else //Èç¹ûÏÂÒ»´ØÒÑÎª½áÊø´Ø£¬¼´ºóÃæÒÑÎŞÊı¾İÔÙÒªĞ´Èë
                {
                 znFAT_Device_Write_nSector(temp,SOC(start_clu),pbuf);
                 pbuf+=((temp+temp1)*(pInit_Args->BytesPerSector)); 
              
                 pfi->File_CurClust=end_clu;
                 pfi->File_CurSec=SOC(end_clu);
                }
               }
              
               //========================ÒÔÉÏ´úÂëÓÃÓÚ´¦ÀíÕû´ØÓëÕûÉÈÇøÊı¾İµÄĞ´Èë£¬¾¡¿ÉÄÜÀûÓÃÁËÉÈÇøµÄÁ¬ĞøĞÔ===============
             -=========
               #ifdef RT_UPDATE_FSINFO
               Update_FSINFO();
               #endif
              
               pfi->File_CurOffset+=len;
              
               return len;
              } 
              #endif
4666          
4667          /************************************************************************************
4668           ¹¦ÄÜ£ºÏòÎÄ¼şÖĞĞ´ÈëÊı¾İ
4669           ĞÎ²Î£ºpfi:Ö¸ÕëÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë len:ÒªĞ´ÈëµÄÊı¾İÁ¿ pbuf:Ö¸ÏòÊı¾İ»º³åÇøµÄÖ¸Õë
4670           ·µ»Ø£ºÊµ¼ÊÏòÎÄ¼şÖĞĞ´ÈëµÄÊı¾İÁ¿  Èç¹ûÎÄ¼ş´óĞ¡ÒÑ¾­´ïµ½FAT32ÖĞËùÏŞÖÆµÄ¼«ÏŞ£¬·µ»Ø-2
4671           Ïê½â£ºÕâÊÇ×îÖÕ¹©Ê¹ÓÃÕßµ÷ÓÃµÄÎÄ¼şÊı¾İĞ´Èëº¯Êı£¬Ëü×ÜÊÇ´ÓÎÄ¼şµÄÄ©Î²ÏòºóĞ´ÈëÊı¾İ£¬¼´Êı¾İ
4672                 ÊÇÒÔ×·¼ÓµÄ·½Ê½±»Ğ´ÈëµÄ¡£ÔÚÊı¾İĞ´ÈëÖ®ºó£¬Òª¼°Ê±µÄ¸üĞÂÎÄ¼ş´óĞ¡£¬·ñÔòĞ´ÈëµÄÊı¾İ½«
4673                 ²»¿É¼û¡£¿ÉÒÔ´ò¿ªRT_UPDATE_FILESIZEºêÀ´¿ªÆôÊµÊ±ÎÄ¼ş´óĞ¡¸üĞÂ¹¦ÄÜ£¬¼´Ã¿´ÎĞ´ÈëÊı¾İ
4674                 znFAT¶¼»áÈ¥¸üĞÂÎÄ¼ş´óĞ¡£¬ÕâÖÖ¹¤×÷·½Ê½ÏÂÄÄÅÂÖĞ¼äÍ»È»¶Ïµç»òËÀ»ú¶¼Ã»ÓĞ¹ØÏµ£¬¿ÉÒÔ
4675                 ±£Ö¤ÎÄ¼ş´óĞ¡ÈçÊµ·´Ó³ÎÄ¼şµÄÓĞĞ§Êı¾İÁ¿£¬µ«ÕâÖÖ·½Ê½Ê¹Êı¾İĞ´ÈëµÄËÙ¶ÈºÍĞ§ÂÊ±äÂı¡£Èô
4676                 ²»Ê¹ÓÃ´Ëºê£¬ÔòĞèÒªÊ¹ÓÃÕßÔÚËùÓĞĞ´ÈëÊı¾İµÄ²Ù×÷Íê³ÉÖ®ºó£¬µ÷ÓÃ¸üĞÂÎÄ¼ş´óĞ¡µÄº¯Êı¡£
4677          *************************************************************************************/
4678          #ifdef ZNFAT_WRITEDATA
              UINT32 znFAT_WriteData(struct FileInfo *pfi,UINT32 len,UINT8 *pbuf)
              {
               UINT32 temp=0,temp1=0,len_temp=len;
               UINT32 Cluster_Size=((pInit_Args->BytesPerSector)*(pInit_Args->SectorsPerClust));
              
               #ifdef USE_EXCHANGE_BUFFER
               #ifndef USE_ALONE_EXB
               UINT8 old_devno=Dev_No;
               #else
               pexb_buf=(pfi->exb_buf);
               #endif
               #endif
              
               just_file=pfi;
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               get_next_cluster_in_cccb=1;
               #ifdef USE_ALONE_CCCB
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 78  

               CCCB_To_Alone();
               #endif
               #endif
              
               if(0==len) return 0; //Èç¹ûÒªĞ´ÈëµÄÊı¾İ³¤¶ÈÎª0£¬ÔòÖ±½Ó·µ»Ø0
              
               if(len>(0XFFFFFFFF-pfi->File_Size)) return (UINT32)-2; //ÎÄ¼ş´óĞ¡ÔÚĞ´ÈëÊı¾İºó½«·¢ÉúÒç³ö´íÎó
               
               znFAT_Seek(pfi,pfi->File_Size); //ÎÄ¼şÊı¾İ¶¨Î»µ½ÎÄ¼şÄ©Î²£¬ÎÄ¼şÎ»ÖÃÏà¹ØĞÅÏ¢Ëæ¼´¸Ä±ä
              
               //¼ì²é´ÅÅÌÊ£Óà¿Õ¼äÊÇ·ñ¹»ÓÃ
               if((pfi->File_CurOffset%Cluster_Size)!=0)
               {
                temp=((pInit_Args->BytesPerSector)-(pfi->File_CurPos))+((LAST_SEC_OF_CLU(pfi->File_CurClust))-(pfi->File
             -_CurSec))*(Cluster_Size);
                //µ±Ç°´ØÊ£ÓàÊı¾İÁ¿
              
                if(len>temp) //Èç¹ûÒªĞ´ÈëµÄÊı¾İÁ¿´óÓÚtemp£¬ÔòËµÃ÷±ØÈ»»á³¬³öµ±Ç°´Ø£¬ÎªÆäÀ©Õ¹¿Õ´Ø
                {
                 temp1=(len-temp)/(Cluster_Size);
                 if((len-temp)%(Cluster_Size)) temp1++; //¼ÆËãĞèÒª¶àÉÙ¸ö¿Õ´Ø
              
                 if(temp1>(pInit_Args->Free_nCluster)) return ((UINT32)-1); //¿Õ¼ä²»×ã
                }
              
               }
               else
               {
                temp1=len/(Cluster_Size);
                if(len%(Cluster_Size)) temp1++; //¼ÆËãĞèÒª¶àÉÙ¸ö¿Õ´Ø  
                if(temp1>(pInit_Args->Free_nCluster)) return ((UINT32)-1); //¿Õ¼ä²»×ã
               }
              
               //=======================================================================================================
             -====
              
               temp=((pInit_Args->BytesPerSector)-(pfi->File_CurPos)); //¼ÆËã¸³¸øÁÙÊ±±äÁ¿£¬ÒÔÃâºóÃæÖØ¸´¼ÆËã
              
               if((pfi->File_CurOffset%Cluster_Size)!=0)
               {
                if(len<=temp) //ÒªĞ´ÈëµÄÊı¾İĞ¡ÓÚµÈÓÚµ±Ç°ÉÈÇøÊ£ÓàÊı¾İÁ¿
                {
                 #ifndef USE_EXCHANGE_BUFFER
                 znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer); //¶ÁÈ¡µ±Ç°ÉÈÇøÊı¾İ£¬ÒÔ±ã×÷ÉÈÇøÄÚÊı¾İÆ´½Ó
                 Memory_Copy(znFAT_Buffer+pfi->File_CurPos,pbuf,len); //ÉÈÇøÊı¾İÆ´½Ó
                 znFAT_Device_Write_Sector(pfi->File_CurSec,znFAT_Buffer); //»ØĞ´ÉÈÇøÊı¾İ
                 #endif
              
                 if(len==temp) //Èç¹ûÒªĞ´ÈëµÄÊı¾İÕıºÃÕ¼Âúµ±Ç°ÉÈÇø
                 {
                #ifdef USE_EXCHANGE_BUFFER
                if(0!=pfi->File_CurPos) 
                {
                   #ifndef USE_ALONE_EXB
                 if(Dev_No!=sexb_cur_dev) //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸²»ÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                 {
                  if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                  {
                   Dev_No=sexb_cur_dev;
                   znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇøÖ
             -Ğ
              
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 79  

                     Dev_No=old_devno;
                  }
                  znFAT_Device_Read_Sector(pfi->File_CurSec,pexb_buf); 
                 }
                 else //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸ÕıÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                 {
                  if(sexb_cur_sec!=(pfi->File_CurSec)) //Õ¼ÓÃEXBµÄÉÈÇø²»ÊÇµ±Ç°Òª²Ù×÷µÄÉÈÇø
                  {
                   if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                   {
                    znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇø
             -ÖĞ
              
                    znFAT_Device_Read_Sector(pfi->File_CurSec,pexb_buf); 
                   }     
                  }
                 }
              
                   #else
                 if(0==(just_file->exb_cursec)) 
                 {
                  znFAT_Device_Read_Sector(pfi->File_CurSec,pexb_buf);
                 }
                   #endif
              
                 Memory_Copy(pexb_buf+pfi->File_CurPos,pbuf,len); //ÉÈÇøÊı¾İÆ´½Ó
              
                   znFAT_Device_Write_Sector(pfi->File_CurSec,pexb_buf); //»ØĞ´ÉÈÇøÊı¾İ
                   
                   #ifndef USE_ALONE_EXB
                 sexb_cur_sec=0; //Ã¿´ÎEXBÖĞµÄÊı¾İÒÔÕûÉÈÇøÊı¾İ»ØĞ´Ö®ºó£¬ÎÒÃÇ±ãÈÏÎªËü²»ÔÙ±»Õ¼ÓÃÁË
                 sexb_cur_dev=(UINT8)(-1); //EXBµÄµ±Ç°Éè±¸ºÅÖÃÎª¿Õ£¬ÕâÀïÈ¡-1ÈÏ¶¨ÆäÎª¿Õ£¬ÎªÁËÓëÓĞĞ§Éè±¸ºÅ0ÏàÇø·Ö
                 psexb_cur_oc=(struct FileInfo *)0; //´ËÊ±EXB²»¹éÈÎºÎÎÄ¼şËùÓĞ
                   #else
                 (just_file->exb_cursec)=0; //ÎÄ¼şµÄ¶ÀÁ¢EXBÎ´Õ¼ÓÃ
                   #endif
                }
                else
                {
                 znFAT_Device_Write_Sector(pfi->File_CurSec,pbuf); //»ØĞ´ÉÈÇøÊı¾İ
                }
                  #endif
              
                if(IS_END_SEC_OF_CLU(pfi->File_CurSec,pfi->File_CurClust)) //Èç¹ûµ±Ç°ÉÈÇøÊÇµ±Ç°´ØµÄ×îºóÒ»¸öÉÈÇø
                {
                 pfi->File_CurSec=SOC(pfi->File_CurClust); //¸üĞÂµ±Ç°ÉÈÇø£¬ÆäÊµÎŞĞ§£¬ÎªÁË¹æÕû
                }
                else //µ±Ç°ÉÈÇø²»ÊÇµ±Ç°´ØµÄ×îºóÉÈÇø
                {
                 pfi->File_CurSec++;
                }
              
                pfi->File_CurPos=0;
                pfi->File_CurOffset+=len; //¸üĞÂµ±Ç°Æ«ÒÆÁ¿
                pfi->File_Size+=len; //¸üĞÂÎÄ¼ş´óĞ¡
                   
                  #ifdef RT_UPDATE_FILESIZE
                Update_File_Size(pfi); //¸üÎÄ¼şÄ¿Â¼ÏîÖĞµÄÎÄ¼ş´óĞ¡×Ö¶Î
                  #endif
              
                return len;
                 }
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 80  

                 else//lenĞ¡ÓÚµ±Ç°ÉÈÇøÊ£ÓàÊı¾İÁ¿
                 {  
                #ifdef USE_EXCHANGE_BUFFER
                  #ifndef USE_ALONE_EXB
                if(Dev_No!=sexb_cur_dev) //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸²»ÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                {
                 if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                 {
                  Dev_No=sexb_cur_dev;
                  znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇøÖĞ
              
                    Dev_No=old_devno; 
                 }
                 znFAT_Device_Read_Sector(pfi->File_CurSec,pexb_buf);
                }
                else //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸ÕıÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                {
                 if(sexb_cur_sec!=(pfi->File_CurSec)) //Õ¼ÓÃEXBµÄÉÈÇø²»ÊÇµ±Ç°Òª²Ù×÷µÄÉÈÇø
                 {
                  if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                  {
                   znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇøÖ
             -Ğ
              
                   znFAT_Device_Read_Sector(pfi->File_CurSec,pexb_buf); 
                  }    
                 }
                }
                  #else
                if((0==(just_file->exb_cursec)) && (0!=(pfi->File_CurPos))) //µ±Ç°ÎÄ¼şµÄ¶ÀÁ¢EXBÎ´±»Õ¼ÓÃ£¬ÇÒÎÄ¼şµ±Ç°ÉÈÇøÄÚ
             -Æ«ÒÆ²»Îª0£¬Èç¹ûÎª0ÔòÃ»±ØÒª¶ÁÉÈÇø
                {
                 znFAT_Device_Read_Sector(pfi->File_CurSec,pexb_buf);
                }
                  #endif
              
                Memory_Copy(pexb_buf+pfi->File_CurPos,pbuf,len); //ÉÈÇøÊı¾İÆ´½Ó
              
                  #ifndef USE_ALONE_EXB
                sexb_cur_dev=Dev_No;
                sexb_cur_sec=pfi->File_CurSec;
                psexb_cur_oc=pfi; //¼ÇÂ¼EXBÖĞ»º³åµÄÊı¾İÊôÓÚÄÄ¸öÎÄ¼ş
                  #else
                (just_file->exb_cursec)=pfi->File_CurSec;
                  #endif
                  #endif
                  //znFAT_Device_Write_Sector(pfi->File_CurSec,ex_buf); //»ØĞ´ÉÈÇøÊı¾İ
              
                  pfi->File_CurPos+=(UINT16)len;
                  pfi->File_CurOffset+=len; //¸üĞÂµ±Ç°Æ«ÒÆÁ¿
                  pfi->File_Size+=len; //¸üĞÂÎÄ¼ş´óĞ¡ 
                
                  #ifdef RT_UPDATE_FILESIZE
                Update_File_Size(pfi); //¸üÎÄ¼şÄ¿Â¼ÏîÖĞµÄÎÄ¼ş´óĞ¡×Ö¶Î
                  #endif
              
                return len;  
                 }
                }
                else 
                {
                 #ifndef USE_EXCHANGE_BUFFER
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 81  

                 znFAT_Device_Read_Sector(pfi->File_CurSec,znFAT_Buffer); //¶ÁÈ¡µ±Ç°ÉÈÇø
                 Memory_Copy(znFAT_Buffer+pfi->File_CurPos,pbuf,temp); //ÉÈÇøÊı¾İÆ´½Ó
                 znFAT_Device_Write_Sector(pfi->File_CurSec,znFAT_Buffer); //»ØĞ´ÉÈÇø
                 #else
              
                 if(0!=pfi->File_CurPos) 
                 {
                  #ifndef USE_ALONE_EXB
                if(Dev_No!=sexb_cur_dev) //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸²»ÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                {
                 if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                 {
                  Dev_No=sexb_cur_dev;
                  znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇøÖĞ
              
                    Dev_No=old_devno;
                 }
                 znFAT_Device_Read_Sector(pfi->File_CurSec,pexb_buf); 
                }
                else //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸ÕıÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                {
                 if(sexb_cur_sec!=(pfi->File_CurSec)) //Õ¼ÓÃEXBµÄÉÈÇø²»ÊÇµ±Ç°Òª²Ù×÷µÄÉÈÇø
                 {
                  if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                  {
                   znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇøÖ
             -Ğ
              
                   znFAT_Device_Read_Sector(pfi->File_CurSec,pexb_buf); 
                  }    
                 }
                }
                  #else
                if(0==(just_file->exb_cursec)) 
                {
                 znFAT_Device_Read_Sector(pfi->File_CurSec,pexb_buf);
                }
                  #endif
              
                Memory_Copy(pexb_buf+pfi->File_CurPos,pbuf,temp); //ÉÈÇøÊı¾İÆ´½Ó
              
                  znFAT_Device_Write_Sector(pfi->File_CurSec,pexb_buf); //»ØĞ´ÉÈÇøÊı¾İ
              
                  #ifndef USE_ALONE_EXB
                sexb_cur_sec=0; //Ã¿´ÎEXBÖĞµÄÊı¾İÒÔÕûÉÈÇøÊı¾İ»ØĞ´Ö®ºó£¬ÎÒÃÇ±ãÈÏÎªËü²»ÔÙ±»Õ¼ÓÃÁË
                sexb_cur_dev=(UINT8)(-1); //EXBµÄµ±Ç°Éè±¸ºÅÖÃÎª¿Õ£¬ÕâÀïÈ¡-1ÈÏ¶¨ÆäÎª¿Õ£¬ÎªÁËÓëÓĞĞ§Éè±¸ºÅ0ÏàÇø·Ö
                psexb_cur_oc=(struct FileInfo *)0;
                  #else
                (just_file->exb_cursec)=0; //µ±Ç°ÎÄ¼ş¶ÀÁ¢EXBÎ´±»Õ¼ÓÃ
                  #endif
                 }
                 else //Èç¹ûµ±Ç°Î»ÖÃÔÚ0Î»ÖÃ£¬ÔòÖ±½ÓĞ´ÉÈÇø
                 {
                znFAT_Device_Write_Sector(pfi->File_CurSec,pbuf); //»ØĞ´ÉÈÇøÊı¾İ
                 }
                 #endif
              
                 len_temp-=temp;
                 pbuf+=temp;
              
                 if(!(IS_END_SEC_OF_CLU(pfi->File_CurSec,pfi->File_CurClust))) //Èç¹ûµ±Ç°ÉÈÇø²»ÊÇµ±Ç°´ØµÄ×îºóÒ»¸öÉÈÇø
                 {
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 82  

                pfi->File_CurSec++;
                pfi->File_CurPos=0;
              
                  pfi->File_CurOffset+=temp;
              
                  temp=(LAST_SEC_OF_CLU(pfi->File_CurClust)-(pfi->File_CurSec)+1)*(pInit_Args->BytesPerSector);//µ±Ç°´ØÖ
             -ĞµÄÊ£ÓàÕûÕûÉÈÇøÊı¾İÁ¿
              
                  if(len_temp<=temp) //Èç¹ûÒªĞ´ÈëµÄÊı¾İÁ¿Ğ¡ÓÚµÈÓÚµ±Ç°´ØÖĞµÄÊ£ÓàÕûÉÈÇøÊı¾İÁ¿
                {
                 temp1=len_temp/(pInit_Args->BytesPerSector); //¼ÆËãÒªĞ´ÈëµÄÊı¾İÁ¿¹»¼¸¸öÕûÉÈÇø
              
                 znFAT_Device_Write_nSector(temp1,pfi->File_CurSec,pbuf);
                 pbuf+=((pInit_Args->BytesPerSector)*temp1);
              
                 if(len_temp==temp) //Èç¹ûÕıºÃĞ´Âúµ±Ç°´Ø
                 {
                  pfi->File_CurSec=SOC(pfi->File_CurClust); //å´Ø
                  pfi->File_CurPos=0;
              
                  pfi->File_CurOffset+=len_temp;
                  pfi->File_Size+=len;
              
                    #ifdef RT_UPDATE_FILESIZE
                    Update_File_Size(pfi); //¸üÎÄ¼şÄ¿Â¼ÏîÖĞµÄÎÄ¼ş´óĞ¡×Ö¶Î
                    #endif
              
                  return len;
                 }
                 else
                 {
                  pfi->File_CurSec+=temp1;
                  pfi->File_CurPos=(UINT16)(len_temp%(pInit_Args->BytesPerSector));
              
                  if(pfi->File_CurPos) //»¹ÓĞÒªĞ´µÄÊı¾İ,´¦Àí×îºóµÄ×Ö½ÚÊı¾İ
                  {
                     #ifndef USE_EXCHANGE_BUFFER
                   Memory_Copy(znFAT_Buffer,pbuf,pfi->File_CurPos);
                   znFAT_Device_Write_Sector(pfi->File_CurSec,znFAT_Buffer);
                     #else
                     #ifndef USE_ALONE_EXB
                     if(Dev_No!=sexb_cur_dev) //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸²»ÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                   {
                    if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                  {
                     Dev_No=sexb_cur_dev;
                     znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈÇ
             -øÖĞ
              
                       Dev_No=old_devno;
                  }
                   }
                     else //Èç¹ûÏÖÔÚ²Ù×÷µÄÉè±¸ÕıÊÇµ±Ç°Õ¼ÓÃEXBµÄÉè±¸
                   {
                    if(sexb_cur_sec!=(pfi->File_CurSec)) //Õ¼ÓÃEXBµÄÉÈÇø²»ÊÇµ±Ç°Òª²Ù×÷µÄÉÈÇø
                  {
                     if(0!=sexb_cur_sec) //Èç¹ûEXBÕı±»Õ¼ÓÃ
                   {
                      znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //Èç¹ûEXBÖĞ»¹ÓĞÊı¾İ£¬ÔòÏÈ½«ÕâĞ©Êı¾İ»ØĞ´µ½ÆäÏàÓ¦ÉÈ
             -ÇøÖĞ
                   }     
                  }
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 83  

                   }
                     #endif
              
                   Memory_Copy(pexb_buf,pbuf,pfi->File_CurPos);
              
                     #ifndef USE_ALONE_EXB
                   sexb_cur_sec=pfi->File_CurSec;
                   sexb_cur_dev=Dev_No;
                   psexb_cur_oc=pfi; //¼ÇÂ¼EXBÖĞ»º³åµÄÊı¾İÊôÓÚÄÄ¸öÎÄ¼ş
                     #else
                   just_file->exb_cursec=pfi->File_CurSec;
                     #endif
                     #endif
                  }
              
                    pfi->File_CurOffset+=len_temp;
                  pfi->File_Size+=len;
              
                    #ifdef RT_UPDATE_FILESIZE
                    Update_File_Size(pfi); //¸üÎÄ¼şÄ¿Â¼ÏîÖĞµÄÎÄ¼ş´óĞ¡×Ö¶Î
                    #endif
              
                  return len;
                 }
                }
                else
                {
                 temp1=temp/(pInit_Args->BytesPerSector);
              
                 znFAT_Device_Write_nSector(temp1,pfi->File_CurSec,pbuf);
                 pbuf+=temp;
              
                 len_temp-=temp;
              
                 pfi->File_CurSec=SOC(pfi->File_CurClust);
                 pfi->File_CurPos=0;
              
                 pfi->File_CurOffset+=temp;  
                }
                 }
                 else //µ±Ç°ÉÈÇøÊÇµ±Ç°´Ø×îºóÒ»¸öÉÈÇø
                 {
                pfi->File_CurSec=SOC(pfi->File_CurClust);
                pfi->File_CurPos=0;
              
                pfi->File_CurOffset+=temp;     
                 }   
                }
               }
              
               //Èç¹ûÎÄ¼şµÄµ±Ç°Æ«ÒÆÁ¿ÊÇ´Ø´óĞ¡µÄÕûÊı±¶£¬Ôò
               //Ö±½Ó½øÈë¿ÕÎÄ¼ş¿ªÊ¼Î»ÖÃ»òÕû´ØÎ»ÖÃĞ´Êı¾İµÄ½×¶Î
               WriteData_From_nCluster(pfi,len_temp,pbuf); //´Ó¿ÕÎÄ¼ş¿ªÊ¼Î»ÖÃ»òÕû´ØÎ»ÖÃĞ´Êı¾İ£¬´ËÊ±¶¼ÊÇÒ»ÖÖ¡°¾½¾³´Ø¡±µÄÇ
             -é¿ö
                                                            //ÕâÖÖÇé¿öÏÂ£¬Êı¾İÕıºÃÍ£Ö¹ÓÚÄ©´ØµÄÄ©Î²»òÊÇ¿ÕÎÄ¼ş¶øÃ»ÓĞÊı¾İ£¬
             -Í¨
                                                            //³£ÎÄ¼şĞÅÏ¢¼¯ºÏÖĞ¼ÇÂ¼µÄÎÄ¼şÎ»ÖÃĞÅÏ¢Ó¦¸ÃÊÇÏÂÒ»´ØµÄ×î¿ªÊ¼Î»ÖÃ
             -£¬
                                                            //µ«ÊÇÕâ¸öÊ±ºòÏÂÒ»´ØÉĞÃ»ÓĞ±»·ÖÅä£¬¼´ÎÄ¼şÄ©´ØµÄFAT´ØÏî¼ÇÂ¼µÄÊ
             -Ç
                                                            //0XFFFFFF0F£¨´ØÁ´½áÊø±ê¼Ç£©£¬Òò´Ë´ËÊ±µÄÎÄ¼şÎ»ÖÃĞÅÏ¢ÊÇÎŞĞ§µÄ
                                                            //znFATÖĞ×÷³öÔ¼¶¨:¡°¾½¾³´Ø¡±Çé¿öÏÂ£¬¿ÕÎÄ¼şµ±Ç°´ØÎª0£¬ÔÚÄ©´ØÄ
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 84  

             -©Î²
                                                            //Ê±£¬µ±Ç°´ØÎªÄ©´Ø¡£ÕâÖÖÔ¼¶¨±ãÓÚznFATµÄÊı¾İĞ´Èë¹¦ÄÜÔÚ¡°¾½¾³´
             -Ø¡±
                                                            //Çé¿öÏÂµÄÕıÈ·ĞÔ
               pfi->File_Size+=len;
               
               #ifdef RT_UPDATE_FILESIZE
               Update_File_Size(pfi); //¸üÎÄ¼şÄ¿Â¼ÏîÖĞµÄÎÄ¼ş´óĞ¡×Ö¶Î
               #endif
              
               return len;
              }
              #endif
5066          
5067          /************************************************************************************
5068           ¹¦ÄÜ£ºÎÄ¼şÊı¾İ½Ø¶Ï
5069           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë offset:Òª½øĞĞÊı¾İ½Ø¶ÏµÄÆğÊ¼Î»ÖÃ
5070           ·µ»Ø£ºÔËĞĞ½á¹û ³É¹¦»òÊ§°Ü 
5071           Ïê½â£º´Ëº¯ÊıÓÃÓÚ½«ÎÄ¼şµÄÊı¾İ´ÓoffsetÎ»ÖÃ½øĞĞ½Ø¶Ï£¬¼´´Ó´ËÎ»ÖÃºóÃæµÄÊı¾İ¾ù±»É¾³ı¡£Èç¹û
5072                 Ö¸¶¨µÄoffsetÈç¹û´óÓÚµÈÓÚÎÄ¼şµÄ´óĞ¡£¬ÔòÖ±½Ó·µ»Ø´íÎó¡£
5073          *************************************************************************************/
5074          #ifdef ZNFAT_DUMP_DATA
              UINT8 znFAT_Dump_Data(struct FileInfo *pfi,UINT32 offset)
              {
               just_file=pfi;
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN
               #ifdef USE_ALONE_CCCB
               CCCB_To_Alone();
               #endif
               #endif
              
               if(offset>=(pfi->File_Size)) //Òª½Ø¶ÏµÄÎ»ÖÃ³¬³öÎÄ¼ş·¶Î§
               {
                return ERR_FAIL;
               }
              
               znFAT_Seek(pfi,offset); //¶¨Î»µ½Òª½Ø¶ÏµÄÎ»ÖÃ
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN //Ïú»ÙÖ®Ç°£¬ÏÈ°ÑCCCBÖĞµÄ´ØÁ´¶Î¸üĞÂµ½FAT
               #ifndef USE_ALONE_CCCB
               if(pfi==pcccb_cur_oc) 
               #endif
               {
                CCCB_Update_FAT();
               }
               #endif
              
               Destroy_FAT_Chain(pfi->File_CurClust); //Ïú»Ù´ØÁ´
              
               if(offset>0)
               {
                Modify_FAT(pfi->File_CurClust,0X0FFFFFFF); //´ØÁ´·â¿Ú
               }
              
               pfi->File_Size=offset; //¸üĞÂÎÄ¼ş´óĞ¡
              
               #ifdef RT_UPDATE_FILESIZE
               Update_File_Size(pfi); //¸üÎÄ¼şÄ¿Â¼ÏîÖĞµÄÎÄ¼ş´óĞ¡×Ö¶Î
               #endif
              
               if(0==pfi->File_Size) Update_File_sClust(pfi,0); //Èç¹ûÎÄ¼ş´óĞ¡Îª0£¬¸üĞÂÎÄ¼ş¿ªÊ¼´ØÎª0
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 85  

              
               #ifdef RT_UPDATE_FSINFO
               Update_FSINFO();
               #endif
              
               return ERR_SUCC;
              }
              #endif
5123          
5124          #ifdef ZNFAT_MODIFY_DATA
              UINT32 znFAT_Modify_Data(struct FileInfo *pfi,UINT32 offset,UINT32 len,UINT8 *app_Buffer)
              {
               UINT32 temp_len=0,temp=0,nsec=0,iClu=0,start_clu=0,end_clu=0,next_clu=0,temp2=0,temp1=0;
               UINT32 Cluster_Size=((pInit_Args->BytesPerSector)*(pInit_Args->SectorsPerClust));
              
               if(offset>=(pfi->File_Size)) return ERR_MD_POS_OVER_FSIZE; //Èç¹ûÒªĞŞ¸ÄµÄÊı¾İÎ»ÖÃ³¬³öÎÄ¼ş´óĞ¡
              
               if((offset+len)>=(pfi->File_Size))  //´ÓoffsetÎ»ÖÃÒª¸ÄĞ´µÄÊı¾İ³¤¶È³¤ÓÚÎÄ¼ş³¤¶È£¬ÔòÈ¡Êµ¼Ê³¤¶È
               {
                len=(pfi->File_Size)-offset;
                (pfi->File_IsEOF)=1; //´ËÖÖÇé¿öÒ»¶¨»áĞŞ¸Äµ½ÎÄ¼ş×îÄ©Î²£¬ÎÄ¼ş½«´ïµ½½áÊøÎ»ÖÃ
               }
              
               temp_len=len; 
              
               znFAT_Seek(pfi,offset); //¶¨Î»ÎÄ¼şoffsetÎ»ÖÃ£¬¶¨Î»Ö®ºóÎÄ¼şĞÅÏ¢ÌåÏà¹Ø±äÁ¿¼´µÃµ½¸üĞÂ
              
               //======================================ÏÂÃæ¿ªÊ¼¶ÔÊı¾İ½øĞĞ¸ÄĞ´==================================
               just_file=pfi;
              
               #ifndef RT_UPDATE_CLUSTER_CHAIN //Èç¹ûÊ¹ÓÃÁËCCCB»º³å£¬ÔòĞèÒª´ò¿ªÔÚCCCBÖĞÑ°´ØµÄ±ê¼Ç
               get_next_cluster_in_cccb=1;
               #ifdef USE_ALONE_CCCB //Èç¹ûÊ¹ÓÃÁË¶ÀÁ¢CCCB»º³å£¬Ôò°ÑCCCB´òµ½µ±Ç°Ëù²Ù×÷ÎÄ¼şµÄCCCB
               CCCB_To_Alone();
               #endif
               #endif 
               //==============================================================================================
               if(((pfi->File_CurOffset)%Cluster_Size)!=0) //Èç¹ûµ±Ç°Î»ÖÃ·Ç´Ø´óĞ¡ÕûÊı±¶£¬¼´²»ÔÚ´Ø¿ªÊ¼Î»ÖÃ
               {
                if(((pfi->File_CurOffset)%(pInit_Args->BytesPerSector))!=0) //Èç¹ûµ±Ç°Î»ÖÃ·ÇÕûÉÈÇø´óĞ¡ÕûÊı±¶£¬¼´²»ÔÚÉÈÇø
             -¿ªÊ¼Î»ÖÃ
                {
                 if(len<=((pInit_Args->BytesPerSector)-(pfi->File_CurPos))) //Èç¹ûÒªĞŞ¸ÄµÄÊı¾İ³¤¶ÈĞ¡ÓÚµÈÓÚÎÄ¼şµ±Ç°ÉÈÇøÊ£
             -ÓàÊı¾İÁ¿
                 {
                //Èç¹ûÆôÓÃÁËEXB»º³å£¬Ôò´Ë²»×ãÉÈÇøµÄÊı¾İ£¬¿ÉÄÜ²¢²»ÔÚÎïÀíÉÈÇøÖĞ£¬¶øÔÚEXB»º³åÖĞ
                  #ifdef USE_EXCHANGE_BUFFER //Èç¹ûÊ¹ÓÃÁËEXB»º³å
                  #ifndef USE_ALONE_EXB //Èç¹ûÃ»ÓĞÆôÓÃ¶ÀÁ¢EXB»º³å£¬¼´ÆôÓÃÁË¹²ÏíEXB»º³å
                  if((psexb_cur_oc==pfi)&&(sexb_cur_dev==Dev_No)&&(sexb_cur_sec==(pfi->File_CurSec))) //Èç¹û´ËÊ±ÎÄ¼şÕıÕ¼
             -ÓÃ¹²ÏíEXB£¬Í¬Ê±µ±Ç°ÎÄ¼şËùÔÚµÄÉè±¸ÓëÉÈÇøºÍ¹²ÏíEXBÏà·û
                {
                 Memory_Copy(pexb_buf+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚ¹²ÏíEXBÖĞµÄÊı¾İ
                }
                else //·ñÔòÒªĞŞ¸ÄµÄÊı¾İ²»ÔÚEXBÖĞ£¬¶øÔÚÎïÀíÉÈÇøÖĞ
                {
                 znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer); //½«ÎÄ¼şµ±Ç°ÉÈÇø¶Á³öµ½ÄÚ²¿»º³å£¬ÒÔ±¸ĞŞ¸Ä
                   Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÄÚ²¿»º³åÖĞµÄÊı¾İ
                   znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer); //½«Êı¾İ»ØĞ´µ½ÉÈÇøÖĞ
                }
                  #else //Èç¹ûÆô¶¯¶ÀÁ¢EXB»º³å
                if((pfi->exb_cursec)==(pfi->File_CurSec)) //Èç¹û´ËÎÄ¼şµÄEXB¶ÔÓ¦ÉÈÇøÓëÎÄ¼şµ±Ç°ÉÈÇøÒ»ÖÂ£¬ÔòËµÃ÷ÒªĞŞ¸ÄµÄÊı¾İ
             -ÔÚ´ËÎÄ¼şµÄEXBÖĞ
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 86  

                {
                 Memory_Copy((pfi->exb_buf)+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÎÄ¼ş¶ÀÁ¢EXBÖĞµÄÊı¾İ
                }
                else //Èç¹û´ËÎÄ¼şEXB¶ÔÓ¦ÉÈÇøÓëÎÄ¼şµ±Ç°ÉÈÇø²»Ò»ÖÂ£¬ÒªĞŞ¸ÄµÄÊı¾İÔÚÎïÀíÉÈÇøÖĞ
                {
                 znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer); //½«ÎÄ¼şµ±Ç°ÉÈÇø¶Á³öµ½ÄÚ²¿»º³å£¬ÒÔ±¸ĞŞ¸Ä
                   Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÄÚ²¿»º³åÖĞµÄÊı¾İ
                   znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer); //½«Êı¾İ»ØĞ´µ½ÉÈÇøÖĞ  
                }
                  
                  #endif
                  #else //Èç¹ûÃ»ÓĞÊ¹ÓÃEXB»º³å£¬ÔòÖ±½ÓĞŞ¸ÄÎïÀíÉÈÇøÊı¾İ
                znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer); //½«ÎÄ¼şµ±Ç°ÉÈÇø¶Á³öµ½ÄÚ²¿»º³å£¬ÒÔ±¸ĞŞ¸Ä
                  Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÄÚ²¿»º³åÖĞµÄÊı¾İ
                  znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer); //½«Êı¾İ»ØĞ´µ½ÉÈÇøÖĞ
                  
                  #endif
              
                  //ÒÔÏÂ¸üĞÂÎÄ¼şÎ»ÖÃĞÅÏ¢
                if(len<((pInit_Args->BytesPerSector)-(pfi->File_CurPos))) //ÒªĞŞ¸ÄµÄÊı¾İÁ¿Ğ¡ÓÚµ±Ç°ÉÈÇøÊ£ÓàÊı¾İÁ¿
                {
                 (pfi->File_CurOffset)+=len;
                 (pfi->File_CurPos)+=len;
                }
                  else
                if(len==((pInit_Args->BytesPerSector)-(pfi->File_CurPos))) //ÒªĞŞ¸ÄµÄÊı¾İÁ¿µÈÓÚµ±Ç°ÉÈÇøÊ£ÓàÊı¾İÁ¿
                {
                   if((len+(pfi->File_CurOffset))==(pfi->File_Size)) //ÕıºÃĞ´µ½ÎÄ¼şÄ©Î²
                 {
                  if(((pfi->File_Size)%Cluster_Size)==0) //Èç¹ûÎÄ¼ş´óĞ¡Îª´Ø´óĞ¡ÕûÊı±¶£¬¼´´ËÊ±²úÉúÁË¡°å´Ø¡±
                  {
                   (pfi->File_CurOffset)+=len;
                   (pfi->File_CurPos)=0;
                   (pfi->File_CurSec)=SOC((pfi->File_CurClust));
                  }
                  else //Èç¹ûÎÄ¼ş´óĞ¡·Ç´Ø´óĞ¡ÕûÊı±¶£¬¼´´ËÊ±Êı¾İĞ´µ½ÁË·Ç´ØÄ©ÉÈÇøÄ©Î²
                  {
                   (pfi->File_CurOffset)+=len;
                   (pfi->File_CurPos)=0;
                   (pfi->File_CurSec)++;
                  }
                 }
                 else
                 {
                  if(((len+(pfi->File_CurOffset))%Cluster_Size)==0) //Èç¹ûĞ´µ½µÄÎ»ÖÃÕıºÃÊÇ´Ø´óĞ¡ÕûÊı±¶£¬¶ø´ËÊ±²¢Ã»ÓĞµ½ÎÄ¼
             -şÄ©Î²
                  {
                   (pfi->File_CurOffset)+=len;
                   (pfi->File_CurPos)=0;
                   (pfi->File_CurClust)=Get_Next_Cluster((pfi->File_CurClust));
                   (pfi->File_CurSec)=SOC((pfi->File_CurClust));     
                  }
                  else //Èç¹ûĞ´µ½µÄÎ»ÖÃ·Ç´Ø´óĞ¡ÕûÊı±¶£¬¼´´ËÊ±Êı¾İĞ´µ½ÁË·Ç´ØÄ©ÉÈÇøÄ©Î²
                  {
                   (pfi->File_CurOffset)+=len;
                   (pfi->File_CurPos)=0;
                   (pfi->File_CurSec)++;
                  }
                 }
                }
                return temp_len;
                 }
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 87  

                 else //ÒªĞŞ¸ÄµÄÊı¾İ³¤¶È´óÓÚµ±Ç°ÉÈÇøÊ£ÓàÊı¾İÁ¿
                 {
                temp=(pInit_Args->BytesPerSector)-(pfi->File_CurPos);
                znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer);
                  Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,temp);
                znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer);
                len-=temp;app_Buffer+=temp;
                  (pfi->File_CurOffset)+=temp;
              
                (pfi->File_CurPos)=0;
              
                  if(!IS_END_SEC_OF_CLU((pfi->File_CurSec),(pfi->File_CurClust))) //Èç¹ûµ±Ç°ÉÈÇø²»ÊÇµ±Ç°´ØµÄ½áÊøÉÈÇø
                {
                 (pfi->File_CurSec)++;
                }
                else
                {
                 (pfi->File_CurClust)=Get_Next_Cluster((pfi->File_CurClust));
                 (pfi->File_CurSec)=SOC((pfi->File_CurClust));
                }
                 }
                }
              
                if(((pfi->File_CurOffset)%(Cluster_Size))!=0) //ÕâÀïÔÙ´ÎÅĞ¶Ï´ËÊ±µÄÎ»ÖÃÊÇ·ñÔÚÕû´Ø¿ªÊ¼£¬ÎªÁËºóÃæµÄÍ³Ò»»¯´¦
             -Àí
                {
                 temp=(((SOC(pfi->File_CurClust))+(pInit_Args->SectorsPerClust)-1)-(pfi->File_CurSec)+1)*(pInit_Args->By
             -tesPerSector);
              
                 if(len<=temp) //ÒªĞŞ¸ÄµÄÊ£ÓàÊı¾İÁ¿Ğ¡ÓÚµÈÓÚµ±Ç°ÕûÉÈÇøµÄÊ£ÓàÊı¾İÁ¿
                 {
                  nsec=len/(pInit_Args->BytesPerSector); //¼ÆËãÒªĞŞ¸ÄµÄÊ£ÓàÊı¾İÁ¿ÖĞµÄÕûÉÈÇøÊı
                  znFAT_Device_Write_nSector(nsec,(pfi->File_CurSec),app_Buffer); //Ïòµ±Ç°´ØÄÚÒªĞŞ¸ÄµÄÕûÉÈÇøÊı¾İ²¿·ÖĞ´Èë
             -Êı¾İ
                  temp=(nsec*(pInit_Args->BytesPerSector));
                  len-=temp;app_Buffer+=temp;
              
                  (pfi->File_CurOffset)+=temp;
              
                  if(len==0) //ÒªĞŞ¸ÄµÄÊı¾İÕıºÃĞ´Âúµ±Ç°´Ø
                {
                   if((pfi->File_CurOffset)==(pfi->File_Size)) //Èç¹ûÕıºÃĞ´µ½ÁËÎÄ¼şÄ©Î²£¬Ôò´ËÊ±²úÉú¡°å´Ø¡±
                 {
                  (pfi->File_CurPos)=0;
                  (pfi->File_CurSec)=SOC((pfi->File_CurClust));
                 }
                   else //Ğ´ÂúÁËµ±Ç°´Ø£¬µ«²¢²»ÊÇÎÄ¼şÄ©Î²
                 {
                  (pfi->File_CurClust)=Get_Next_Cluster((pfi->File_CurClust));
                  (pfi->File_CurPos)=0;
                  (pfi->File_CurSec)=SOC((pfi->File_CurClust));
                 }
                }
                  else //Ã»ÓĞĞ´Âúµ±Ç°´Ø
                {
                   (pfi->File_CurPos)=0;
                   (pfi->File_CurSec)+=nsec;
              
                   //Èç¹ûÆôÓÃÁËEXB»º³å£¬Ôò´Ë²»×ãÉÈÇøµÄÊı¾İ£¬¿ÉÄÜ²¢²»ÔÚÎïÀíÉÈÇøÖĞ£¬¶øÔÚEXB»º³åÖĞ
                   #ifdef USE_EXCHANGE_BUFFER //Èç¹ûÊ¹ÓÃÁËEXB»º³å
                   #ifndef USE_ALONE_EXB //Èç¹ûÃ»ÓĞÆôÓÃ¶ÀÁ¢EXB»º³å£¬¼´ÆôÓÃÁË¹²ÏíEXB»º³å
                   if((psexb_cur_oc==pfi)&&(sexb_cur_dev==Dev_No)&&(sexb_cur_sec==(pfi->File_CurSec))) //Èç¹û´ËÊ±ÎÄ¼şÕıÕ
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 88  

             -¼ÓÃ¹²ÏíEXB£¬Í¬Ê±µ±Ç°ÎÄ¼şËùÔÚµÄÉè±¸ÓëÉÈÇøºÍ¹²ÏíEXBÏà·û
                 {
                  Memory_Copy(pexb_buf+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚ¹²ÏíEXBÖĞµÄÊı¾İ
                 }
                   else //·ñÔòÒªĞŞ¸ÄµÄÊı¾İ²»ÔÚEXBÖĞ£¬¶øÔÚÎïÀíÉÈÇøÖĞ
                 {
                  znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer); //½«ÎÄ¼şµ±Ç°ÉÈÇø¶Á³öµ½ÄÚ²¿»º³å£¬ÒÔ±¸ĞŞ¸Ä
                    Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÄÚ²¿»º³åÖĞµÄÊı¾İ
                    znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer); //½«Êı¾İ»ØĞ´µ½ÉÈÇøÖĞ
                 }
                   #else //Èç¹ûÆô¶¯¶ÀÁ¢EXB»º³å
                   if((pfi->exb_cursec)==(pfi->File_CurSec)) //Èç¹û´ËÎÄ¼şµÄEXB¶ÔÓ¦ÉÈÇøÓëÎÄ¼şµ±Ç°ÉÈÇøÒ»ÖÂ£¬ÔòËµÃ÷ÒªĞŞ¸ÄµÄ
             -Êı¾İÔÚ´ËÎÄ¼şµÄEXBÖĞ
                 {
                  Memory_Copy((pfi->exb_buf)+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÎÄ¼ş¶ÀÁ¢EXBÖĞµÄÊı¾İ
                 }
                   else //Èç¹û´ËÎÄ¼şEXB¶ÔÓ¦ÉÈÇøÓëÎÄ¼şµ±Ç°ÉÈÇø²»Ò»ÖÂ£¬ÒªĞŞ¸ÄµÄÊı¾İÔÚÎïÀíÉÈÇøÖĞ
                 {
                  znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer); //½«ÎÄ¼şµ±Ç°ÉÈÇø¶Á³öµ½ÄÚ²¿»º³å£¬ÒÔ±¸ĞŞ¸Ä
                    Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÄÚ²¿»º³åÖĞµÄÊı¾İ
                    znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer); //½«Êı¾İ»ØĞ´µ½ÉÈÇøÖĞ   
                 }
                 
                   #endif
                   #else //Èç¹ûÃ»ÓĞÊ¹ÓÃEXB»º³å£¬ÔòÖ±½ÓĞŞ¸ÄÎïÀíÉÈÇøÊı¾İ
                   znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer); //½«ÎÄ¼şµ±Ç°ÉÈÇø¶Á³öµ½ÄÚ²¿»º³å£¬ÒÔ±¸ĞŞ¸Ä
                   Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÄÚ²¿»º³åÖĞµÄÊı¾İ
                   znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer); //½«Êı¾İ»ØĞ´µ½ÉÈÇøÖĞ
                 
                   #endif
              
                   (pfi->File_CurOffset)+=len;
                   (pfi->File_CurPos)=len;
                }
              
                return temp_len;
                 }
                 else //ÒªĞŞ¸ÄµÄÊ£ÓàÊı¾İÁ¿´óÓÚµ±Ç°´ØÄÚÊ£ÓàÊı¾İÁ¿
                 {
                  //temp=(pInit_Args->BytesPerSector)-(pfi->File_CurPos);
                  //znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer);
                  //Memory_Copy(znFAT_Buffer,app_Buffer,temp);
                  //znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer);
                  //len-=temp;app_Buffer+=temp;
                  //(pfi->File_CurOffset)+=temp;
                  //(pfi->File_CurSec)++;
              
                  temp=(((SOC(pfi->File_CurClust))+(pInit_Args->SectorsPerClust)-1)-(pfi->File_CurSec)+1);
                  znFAT_Device_Write_nSector(temp,(pfi->File_CurSec),app_Buffer); //Ïòµ±Ç°´ØÄÚÒªĞŞ¸ÄµÄÕûÉÈÇøÊı¾İ²¿·ÖĞ´Èë
             -Êı¾İ
                temp*=(pInit_Args->BytesPerSector);
                len-=temp;app_Buffer+=temp;
              
                (pfi->File_CurOffset)+=temp;
                (pfi->File_CurClust)=Get_Next_Cluster((pfi->File_CurClust));
                (pfi->File_CurPos)=0;
                (pfi->File_CurSec)=SOC((pfi->File_CurClust));
                 }
                }
               }
              
               //¼ÆËã¸÷Á¬Ğø´Ø¶Î£¬ÒÔ¾¡¿ÉÄÜµÄÊ¹ÓÃ¶àÉÈÇøĞ´Çı¶¯£¬ÒÔÌá¸ßÊı¾İĞ´ÈëËÙ¶È
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 89  

               //start_cluÓëend_cluÓÃÓÚ¼ÇÂ¼Á¬Ğø´Ø¶ÎµÄÊ¼Ä©
               temp=(len/Cluster_Size); 
              
               if(temp>0) //Èç¹ûÕû´ØÊı´óÓÚ0£¬ÔòÉæ¼°µ½¶à´ØĞ´
               {
                start_clu=end_clu=(pfi->File_CurClust);
              
                for(iClu=1;iClu<temp;iClu++)
                {
                 next_clu=Get_Next_Cluster(end_clu);
              
                 if((next_clu-1)==end_clu) //Èç¹ûÁ½¸ö´ØÏàÁÙ£¬¼´Á¬Ğø
                 {
                  end_clu=next_clu;
                 }
                 else //Èç¹ûÁ½¸ö´Ø²»ÏàÁÙ£¬¼´Óöµ½´ØÁ´¶Ïµã
                 {
                  znFAT_Device_Write_nSector(((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)),SOC(start_clu),app_Bu
             -ffer);
                  app_Buffer+=((end_clu-start_clu+1)*Cluster_Size);
                  start_clu=next_clu;
                  end_clu=next_clu;
                 }
                } 
                 
                temp2=Get_Next_Cluster(end_clu);
                temp1=(len-temp*Cluster_Size); //ÒªĞŞ¸ÄµÄÊ£ÓàµÄ·ÇÕû´ØÊı¾İ
                   
                if(temp1==0) //ÒÑÎŞÒªĞŞ¸ÄµÄÊı¾İ£¬¼´ÒªĞŞ¸ÄµÄÊı¾İÕıºÃĞ´µ½Õû´Ø
                {
                 znFAT_Device_Write_nSector(((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)),SOC(start_clu),app_Buf
             -fer);
              
                 if(!IS_END_CLU(temp2)) //Èç¹ûÒÑµ½ÁË½áÊø´Ø£¬¼´ÎÄ¼şÒÑµ½Ä©Î²£¬¼´¡°å´Ø¡±
                 {
                  (pfi->File_CurClust)=end_clu;
                 }
                 else
                 {
                  (pfi->File_CurClust)=temp2;    
                 }
              
                 (pfi->File_CurOffset)+=(temp*Cluster_Size);
                 (pfi->File_CurPos)=0;
                 (pfi->File_CurSec)=SOC((pfi->File_CurClust));
              
                 return temp_len;
                }
                else
                {
                 if((temp2-1)==end_clu) //ÏÂÒ»´ØÈç¹ûÓëÇ°ÃæÕû´Ø×îºóÒ»´ØÈÔÈ»Á¬Ğø
                 {
                  temp=((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust)+(temp1/(pInit_Args->BytesPerSector))); //Á¬Ğ
             -øÉÈÇøÊı
                  znFAT_Device_Write_nSector(temp,SOC(start_clu),app_Buffer);
              
                  (pfi->File_CurOffset)+=(temp*(pInit_Args->BytesPerSector));
              
                  app_Buffer+=(temp*(pInit_Args->BytesPerSector));
                  len-=(temp*(pInit_Args->BytesPerSector));
                 }
                 else //ÏÂÒ»´ØÓëÇ°Ãæ´Ø²»ÔÙÁ¬Ğø
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 90  

                 {
                  temp=((end_clu-start_clu+1)*(pInit_Args->SectorsPerClust));
                  znFAT_Device_Write_nSector(temp,SOC(start_clu),app_Buffer);
                  iClu=(temp*(pInit_Args->BytesPerSector)); //½èÓÃÁÙÊ±±äÁ¿£¬¼õÉÙ¼ÆËãÁ¿
                  app_Buffer+=iClu;len-=iClu;
                  (pfi->File_CurOffset)+=iClu;
              
                  znFAT_Device_Write_nSector((temp1/(pInit_Args->BytesPerSector)),SOC(temp2),app_Buffer);
                  iClu=((temp1/(pInit_Args->BytesPerSector))*(pInit_Args->BytesPerSector)); //½èÓÃÁÙÊ±±äÁ¿£¬¼õÉÙ¼ÆËãÁ¿
                  app_Buffer+=iClu;len-=iClu;
                  (pfi->File_CurOffset)+=iClu;
                 }
              
                 (pfi->File_CurClust)=temp2;
                 (pfi->File_CurPos)=0;
                 (pfi->File_CurSec)=SOC(temp2)+(temp1/(pInit_Args->BytesPerSector));
                }
               }
               else
               {
                temp=len/(pInit_Args->BytesPerSector);
                znFAT_Device_Write_nSector(temp,(pfi->File_CurSec),app_Buffer);
                app_Buffer+=(temp*(pInit_Args->BytesPerSector));
                len-=(temp*(pInit_Args->BytesPerSector));
                (pfi->File_CurOffset)+=(temp*(pInit_Args->BytesPerSector));
                 
                (pfi->File_CurSec)+=temp;
               }
              
               if(len==0) //Èç¹ûÒªĞŞ¸ÄµÄÊı¾İÒÑÎŞ£¬¼´Êı¾İÕıºÃĞ´µ½ÁËÉÈÇøÄ©Î²
               {
                return temp_len;
               }
               else //Èç¹û»¹ÓĞÊı¾İÒªĞŞ¸Ä£¬×îºóµÄ²»×ãÉÈÇø²¿·Ö
               {
                //Èç¹ûÆôÓÃÁËEXB»º³å£¬Ôò´Ë²»×ãÉÈÇøµÄÊı¾İ£¬¿ÉÄÜ²¢²»ÔÚÎïÀíÉÈÇøÖĞ£¬¶øÔÚEXB»º³åÖĞ
                #ifdef USE_EXCHANGE_BUFFER //Èç¹ûÊ¹ÓÃÁËEXB»º³å
                #ifndef USE_ALONE_EXB //Èç¹ûÃ»ÓĞÆôÓÃ¶ÀÁ¢EXB»º³å£¬¼´ÆôÓÃÁË¹²ÏíEXB»º³å
                if((psexb_cur_oc==pfi)&&(sexb_cur_dev==Dev_No)&&(sexb_cur_sec==(pfi->File_CurSec))) //Èç¹û´ËÊ±ÎÄ¼şÕıÕ¼ÓÃ
             -¹²ÏíEXB£¬Í¬Ê±µ±Ç°ÎÄ¼şËùÔÚµÄÉè±¸ÓëÉÈÇøºÍ¹²ÏíEXBÏà·û
                {
                 Memory_Copy(pexb_buf+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚ¹²ÏíEXBÖĞµÄÊı¾İ
                }
                else //·ñÔòÒªĞŞ¸ÄµÄÊı¾İ²»ÔÚEXBÖĞ£¬¶øÔÚÎïÀíÉÈÇøÖĞ
                {
                 znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer); //½«ÎÄ¼şµ±Ç°ÉÈÇø¶Á³öµ½ÄÚ²¿»º³å£¬ÒÔ±¸ĞŞ¸Ä
                 Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÄÚ²¿»º³åÖĞµÄÊı¾İ
                 znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer); //½«Êı¾İ»ØĞ´µ½ÉÈÇøÖĞ
                }
                #else //Èç¹ûÆô¶¯¶ÀÁ¢EXB»º³å
                if((pfi->exb_cursec)==(pfi->File_CurSec)) //Èç¹û´ËÎÄ¼şµÄEXB¶ÔÓ¦ÉÈÇøÓëÎÄ¼şµ±Ç°ÉÈÇøÒ»ÖÂ£¬ÔòËµÃ÷ÒªĞŞ¸ÄµÄÊı¾
             -İÔÚ´ËÎÄ¼şµÄEXBÖĞ
                {
                 Memory_Copy((pfi->exb_buf)+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÎÄ¼ş¶ÀÁ¢EXBÖĞµÄÊı¾İ
                }
                else //Èç¹û´ËÎÄ¼şEXB¶ÔÓ¦ÉÈÇøÓëÎÄ¼şµ±Ç°ÉÈÇø²»Ò»ÖÂ£¬ÒªĞŞ¸ÄµÄÊı¾İÔÚÎïÀíÉÈÇøÖĞ
                {
                 znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer); //½«ÎÄ¼şµ±Ç°ÉÈÇø¶Á³öµ½ÄÚ²¿»º³å£¬ÒÔ±¸ĞŞ¸Ä
                 Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÄÚ²¿»º³åÖĞµÄÊı¾İ
                 znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer); //½«Êı¾İ»ØĞ´µ½ÉÈÇøÖĞ  
                }
                 
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 91  

                #endif
                #else //Èç¹ûÃ»ÓĞÊ¹ÓÃEXB»º³å£¬ÔòÖ±½ÓĞŞ¸ÄÎïÀíÉÈÇøÊı¾İ
                
                znFAT_Device_Read_Sector((pfi->File_CurSec),znFAT_Buffer); //½«ÎÄ¼şµ±Ç°ÉÈÇø¶Á³öµ½ÄÚ²¿»º³å£¬ÒÔ±¸ĞŞ¸Ä
                Memory_Copy(znFAT_Buffer+(pfi->File_CurPos),app_Buffer,len); //ĞŞ¸ÄÔÚÄÚ²¿»º³åÖĞµÄÊı¾İ
                znFAT_Device_Write_Sector((pfi->File_CurSec),znFAT_Buffer); //½«Êı¾İ»ØĞ´µ½ÉÈÇøÖĞ
                 
                #endif
              
                (pfi->File_CurOffset)+=len;
                (pfi->File_CurPos)=len; 
               
                return temp_len;
               }
              }
              #endif
5487          
5488          /************************************************************************************
5489           ¹¦ÄÜ£º¹Ø±ÕÎÄ¼ş
5490           ĞÎ²Î£ºpfi:Ö¸ÏòÎÄ¼şĞÅÏ¢¼¯ºÏµÄÖ¸Õë
5491           ·µ»Ø£º0
5492           Ïê½â£º´Ëº¯ÊıÓÃÓÚ¹Ø±ÕÎÄ¼ş£¬¼´¶ÔÎÄ¼şµÄĞÅÏ¢¼¯ºÏ½øĞĞÇå0£¬Ê¹ÎÄ¼şµÄÏà¹ØĞÅÏ¢µÃÒÔÏú»Ù£¬´Ó¶ø
5493                 ÎŞ·¨ÔÙ¶ÔÆä½øĞĞ²Ù×÷£¬³ı·ÇÖØĞÂ´ò¿ª´ËÎÄ¼ş¡£Óë´ËÍ¬Ê±£¬´Ëº¯Êı»¹ÒÀÕÕRT_UPDATE_FILESIZE
5494                 µÄ¶¨Òå¶ÔÎÄ¼ş´óĞ¡½øĞĞ¸üĞÂ¡£Èç¹ûÃ»ÓĞ¿ªÆôÎÄ¼ş´óĞ¡µÄÊµÊ±¸üĞÂ¹¦ÄÜ£¬ÔòÔÚµ÷ÓÃ´Ëº¯ÊıÊ±
5495                 ½«¶ÔÆä½øĞĞ¸üĞÂ¡£Òò´ËÈç¹ûÃ»ÓĞÊ¹ÓÃÊµÊ±ÎÄ¼ş´óĞ¡¸üĞÂ£¬ÄÇÃ´ÔÚÎÄ¼ş²Ù×÷£¬ÓÈÆäÊÇÊı¾İĞ´Èë
5496                 »òĞŞ¸Ä²Ù×÷Ö®ºó£¬Ò»¶¨Òªµ÷ÓÃclose_fileº¯Êı¡£
5497          *************************************************************************************/
5498          #ifdef ZNFAT_CLOSE_FILE
5499          UINT8 znFAT_Close_File(struct FileInfo *pfi)
5500          {
5501   1       #ifndef RT_UPDATE_FILESIZE
               Update_File_Size(pfi); //¸üÎÄ¼şÄ¿Â¼ÏîÖĞµÄÎÄ¼ş´óĞ¡×Ö¶Î
               #endif
5504   1      
5505   1       just_file=pfi;
5506   1      
5507   1       #ifndef RT_UPDATE_CLUSTER_CHAIN
               #ifdef USE_ALONE_CCCB
               CCCB_To_Alone();
               #endif
               #endif
5512   1      
5513   1       #ifndef RT_UPDATE_CLUSTER_CHAIN
               #ifndef USE_ALONE_CCCB
               if(pfi==pcccb_cur_oc) //Èç¹ûÏÖÔÚ²Ù×÷µÄÕâ¸öÎÄ¼şÕıÕ¼ÓÃCCCB£¬ÔòÔÚ¹Ø±ÕÎÄ¼şÒÔÇ°£¬ĞèÒª½«CCCB¸üĞÂµ½FAT
               #endif
                CCCB_Update_FAT();
               #endif
5519   1      
5520   1       #ifndef RT_UPDATE_CLUSTER_CHAIN
               #ifdef USE_ALONE_CCCB
               pcccb_buf=(UINT32 *)0;
               pcccb_curval=(UINT32 *)0;
               pcccb_counter=(UINT8 *)0;
               #endif
               #endif
5527   1      
5528   1       #ifdef USE_EXCHANGE_BUFFER
               #ifndef USE_ALONE_EXB
               if(pfi==psexb_cur_oc && 0!=(sexb_cur_sec)) //Èç¹ûµ±Ç°EXB±»Õ¼ÓÃ£¬¶øÇÒÊÇÏÖÔÚÒª¹Ø±ÕµÄÎÄ¼ş
               {
                znFAT_Device_Write_Sector(sexb_cur_sec,pexb_buf); //EXB»º³åÊı¾İ»ØĞ´
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 92  

                sexb_cur_sec=0;
                psexb_cur_oc=(struct FileInfo *)0;
                sexb_cur_dev=(UINT8)(-1);
               }
               #else
               pexb_buf=pfi->exb_buf;
               if(0!=pfi->exb_cursec) //Èç¹ûÒª¹Ø±ÕÎÄ¼şµÄEXB±»Õ¼ÓÃ
               {
                znFAT_Device_Write_Sector(pfi->File_CurSec,pexb_buf); //EXB»º³åÊı¾İ»ØĞ´
               }
               pexb_buf=(UINT8 *)0;
               #endif
               #endif
5546   1      
5547   1       Memory_Set((UINT8 *)pfi,(UINT32)sizeof(struct FileInfo),0);
5548   1      
5549   1       just_file=(struct FileInfo *)0;
5550   1      
5551   1       return ERR_SUCC;
5552   1      }
5553          #endif
5554          
5555          /************************************************************************************
5556           ¹¦ÄÜ£ºË¢ĞÂÎÄ¼şÏµÍ³
5557           ĞÎ²Î£ºÎŞ
5558           ·µ»Ø£º0
5559           Ïê½â£ºÔÚÎÒÃÇ½øĞĞÁËÎÄ¼ş²Ù×÷Ö®ºó£¬±ÈÈç´´½¨ÎÄ¼ş»òÄ¿Â¼£¬ÏòÎÄ¼şÖĞĞ´ÈëÊı¾İ£¬»òÊÇÉ¾³ı²Ù×÷£¬
5560                 ¶¼»áÓ°Ïìµ½ÎÄ¼şÏµÍ³±¾ÉíµÄÒ»Ğ©²ÎÊı£¬±ÈÈç´ÅÅÌµÄÊ£ÓàÈİÁ¿µÈ¡£znFATÖĞ¿ÉÒÔÍ¨¹ı´ò¿ª
5561                 RT_UPDATE_FSINFOÕâ¸öºêÀ´Æô¶¯ÎÄ¼şÏµÍ³ÊµÊ±¸üĞÂ¹¦ÄÜ£¬ÈÎºÎµÄÔö¼ÓÉ¾¸Ä²Ù×÷znFAT¶¼»á
5562                 Á¢¼´¸üĞÂÎÄ¼şÏµÍ³¡£µ«ÕâÑù»á±»Êı¾İĞ´ÈëµÈ²Ù×÷Ğ§ÂÊ½µµÍ£¬Òò´Ë¿ÉÒÔÆÁ±ÎµôÕâÒ»ÊµÊ±¸üĞÂ
5563                 ¹¦ÄÜ£¬µ«ÊÇ±ØĞëÔÚËùÓĞÎÄ¼ş²Ù×÷½áÊøÖ®ºó£¬µ÷ÓÃ´Ëº¯ÊıÀ´Ë¢ĞÂÎÄ¼şÏµÍ³¡£
5564          *************************************************************************************/
5565          #ifdef ZNFAT_FLUSH_FS
5566          UINT8 znFAT_Flush_FS(void)
5567          {
5568   1       #ifndef RT_UPDATE_FSINFO
               Update_FSINFO(); //¸üĞÂÎÄ¼şÏµÍ³ĞÅÏ¢
               #endif
5571   1      
5572   1       return ERR_SUCC; 
5573   1      }
5574          #endif
5575                                                 
5576          
5577          
5578          
5579          /***********************************************************************************************
5580           ¹¦ÄÜ£º½«UNICODEÂë×ªÎªGB2312Âë£¨¶ÔÓÚºº×ÖÀ´Ëµ£¬OEMÂë¾ÍÊÇGB2312£©
5581           ĞÎ²Î£ºoem_code:OEMÂë uni_code:Ö¸ÏòÓÃÓÚ¼ÇÂ¼oem_codeËù¶ÔÓ¦µÄUNICODE±àÂëµÄ±äÁ¿µÄÖ¸Õë
5582           ·µ»Ø£ºÔËĞĞ½á¹û  ³É¹¦»òÊ§°Ü
5583           Ïê½â£ºOEMÂëÊÇ¸÷µØÇøµÄ¼ÆËã»úÉú²úÉÌÔÚ¼ÆËã»ú¹Ì»¯µÄ±¾µØÎÄ×Ö±àÂë£¬±ÈÈçÔÚÖĞ¹úOEMÂë¾ÍÊÇGB2312Âë£¬¼´Çø
5584                 Î»Âë£¬µ«ÊÇFAT32µÄ³¤ÎÄ¼şÃûÊÇÒÔUNICODEÀ´±àÂëµÄ£¬Òò´ËĞèÒªÒ»¸ö±àÂë×ª»»µÄ¹ı³Ì¡£±¾º¯ÊıµÄÊµÏÖ»ùÓÚ
5585                 ¶ş·ÖËÑË÷£¬¿É¿ìËÙ²éÕÒµ½UNICODEÂë¶ÔÓ¦µÄOEM±àÂë¡£
5586          ************************************************************************************************/
5587          #ifdef USE_LFN
              static UINT8 UNI2OEM(UINT16 uni_code,UINT16 *oem_code) //Í¨¹ı¶ş·Ö·¨²é±í½«UNIÂë×ªÎªOEMÂë
              {
                UINT32 low=0,high=MAX_UNI_INDEX-1,mid;//ÖÃµ±Ç°²éÕÒÇø¼äÉÏÏÂ½çµÄ³õÖµ 
              
                if(uni_code<GET_PGM_WORD(&(uni_oem[0][0]))) //ÅĞ¶ÏUNIÂëÊÇ·ñÔÚ±íÀï
                  return ERR_FAIL;
                //Èç¹ûÊäÈëµÄoem_code²»ÊÇ±íµÄ·¶Î§ÄÚ£¬ÔòÖ±½Ó·µ»Ø
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 93  

                if(uni_code>GET_PGM_WORD(&(uni_oem[MAX_UNI_INDEX-1][0]))) 
                  return ERR_FAIL; 
              
                while(low<=high) //µ±Ç°²éÕÒÇø¼ä[low..high]·Ç¿Õ
                {
                  mid=low+(high-low)/2;
              
                  if(uni_code==GET_PGM_WORD(&(uni_oem[mid][0])))
                  {
                    *oem_code=GET_PGM_WORD(&(uni_oem[mid][1]));
                    return ERR_SUCC; //²éÕÒ³É¹¦·µ»Ø
                  }
              
                  if(GET_PGM_WORD(&(uni_oem[mid][0]))>uni_code)
                  {
                    high=mid-1;  //¼ÌĞøÔÚ[low..mid-1]ÖĞ²éÕÒ
                  }
                  else
                  {
                    low=mid+1; //¼ÌĞøÔÚ[mid+1..high]ÖĞ²éÕÒ
                  }
                }
              
                return ERR_FAIL; //µ±low>highÊ±±íÊ¾²éÕÒÇø¼äÎª¿Õ£¬²éÕÒÊ§°Ü
              }
              
              
              
              static UINT8 file_Open_unistr2oemstr(UINT16 *oemstr)
              {
                UINT16 len=WStringLen(oemstr);  //Çó³ö³¤¶È
                UINT16 buff[MAX_LFN_LEN];   //¶¨ÒåÏàÍ¬³¤¶ÈÊı×é
                
                UINT32 i=0,pos=0;
                UINT8 res=0;
                UINT16 temp=0;
                
                UINT8 oem_H;
                UINT8 oem_L;
                
                /* Êı¾İ½»»» */
                for(i=0;i<len;i++)
                {
                  buff[i] = oemstr[i];
                }
                
                for(i=0;i<len;i++)
                {
                  oem_H = ((buff[i])>>8)&0x00ff;
                  oem_L = (buff[i])&0x00ff;
              
                  if(oem_H == 0) //¼ì²éÊÇ·ñÊÇASCIIÂë£¬ASCIIÂëµÄÊıÖµ·¶Î§Îª0X00~0X7F£¬OEM±àÂëÖµ²»ÔÚ´Ë·¶Î§£¬ÒÔ´ËÇø·ÖÊÇASCII»¹
             -ÊÇOEM
                  {
                    oemstr[pos] = oem_L;
                  }
                  else //²»ÊÇASCIIÂë£¬¶øÊÇOEM±àÂë
                  {
                    temp=buff[i];
              
                    res=UNI2OEM(temp,oemstr+pos);
                    if(res) //ÅĞ¶ÏÊÇ·ñÕÒµ½GB2312×ÖÂë
C51 COMPILER V9.60.0.0   ZNFAT                                                             06/16/2023 01:03:55 PAGE 94  

                    {
                      oemstr[0]=0;
                      return ERR_OEM_CHAR_NOT_COMPLETE;
                    }
                  }
                  pos++;
              
                  if(pos>MAX_LFN_LEN) 
                  {
                    oemstr[0]=0;
                    return ERR_LFN_BUF_OUT; 
                  }
                }
              
                oemstr[pos]=0;
              
                return ERR_SUCC;
              }
              
              #endif
5676          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  19173    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =    522     460
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
